
lab4_rb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080045d8  080045d8  000145d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004640  08004640  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  08004640  08004640  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004640  08004640  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004640  08004640  00014640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004644  08004644  00014644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08004648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  200000bc  08004704  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08004704  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd0d  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002118  00000000  00000000  0002cdf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  0002ef10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  0002fc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018084  00000000  00000000  000308f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dcfb  00000000  00000000  00048974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b0c7  00000000  00000000  0005666f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1736  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a44  00000000  00000000  000e178c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000bc 	.word	0x200000bc
 8000128:	00000000 	.word	0x00000000
 800012c:	080045c0 	.word	0x080045c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c0 	.word	0x200000c0
 8000148:	080045c0 	.word	0x080045c0

0800014c <is_Button1_Pressed>:
int TimeOutForKeyPress_1 = 300;
int TimeOutForKeyPress_2 = 100;
int TimeOutForKeyPress_3 = 100;
int TimeOutForKeyPress_4 = 100;
////////////press////////////
int is_Button1_Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <is_Button1_Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <is_Button1_Pressed+0x16>
	{
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <is_Button1_Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <is_Button1_Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000d8 	.word	0x200000d8

08000170 <is_Button1_Pressed_3s>:
int is_Button1_Pressed_3s(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button1_3s_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <is_Button1_Pressed_3s+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <is_Button1_Pressed_3s+0x16>
	{
		button1_3s_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <is_Button1_Pressed_3s+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <is_Button1_Pressed_3s+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000dc 	.word	0x200000dc

08000194 <is_Button2_Pressed>:
int is_Button2_Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button2_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <is_Button2_Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <is_Button2_Pressed+0x16>
	{
		button2_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <is_Button2_Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <is_Button2_Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000e0 	.word	0x200000e0

080001b8 <is_Button3_Pressed>:
int is_Button3_Pressed(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if(button3_flag == 1)
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <is_Button3_Pressed+0x20>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <is_Button3_Pressed+0x16>
	{
		button3_flag =0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <is_Button3_Pressed+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <is_Button3_Pressed+0x18>
	}
	return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	200000e4 	.word	0x200000e4

080001dc <is_Button4_Pressed>:
int is_Button4_Pressed(){
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
	if(button4_flag == 1)
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <is_Button4_Pressed+0x20>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d104      	bne.n	80001f2 <is_Button4_Pressed+0x16>
	{
		button4_flag =0;
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <is_Button4_Pressed+0x20>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
		return 1;
 80001ee:	2301      	movs	r3, #1
 80001f0:	e000      	b.n	80001f4 <is_Button4_Pressed+0x18>
	}
	return 0;
 80001f2:	2300      	movs	r3, #0
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	200000e8 	.word	0x200000e8

08000200 <subKeyProcess_1>:
///////////subkey////////////

void subKeyProcess_1(){
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	button1_flag=1;
 8000204:	4b03      	ldr	r3, [pc, #12]	; (8000214 <subKeyProcess_1+0x14>)
 8000206:	2201      	movs	r2, #1
 8000208:	601a      	str	r2, [r3, #0]
}
 800020a:	bf00      	nop
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	200000d8 	.word	0x200000d8

08000218 <subKeyProcess_3s_1>:
void subKeyProcess_3s_1(){
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	button1_3s_flag=1;
 800021c:	4b03      	ldr	r3, [pc, #12]	; (800022c <subKeyProcess_3s_1+0x14>)
 800021e:	2201      	movs	r2, #1
 8000220:	601a      	str	r2, [r3, #0]
}
 8000222:	bf00      	nop
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	200000dc 	.word	0x200000dc

08000230 <getKeyInput_1>:
	button3_flag=1;
}
void subKeyProcess_4(){
	button4_flag=1;
}
void getKeyInput_1(){
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  KeyReg10 = KeyReg9;
 8000234:	4b20      	ldr	r3, [pc, #128]	; (80002b8 <getKeyInput_1+0x88>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a20      	ldr	r2, [pc, #128]	; (80002bc <getKeyInput_1+0x8c>)
 800023a:	6013      	str	r3, [r2, #0]
  KeyReg9 = KeyReg8;
 800023c:	4b20      	ldr	r3, [pc, #128]	; (80002c0 <getKeyInput_1+0x90>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a1d      	ldr	r2, [pc, #116]	; (80002b8 <getKeyInput_1+0x88>)
 8000242:	6013      	str	r3, [r2, #0]
  KeyReg8 = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 8000244:	2102      	movs	r1, #2
 8000246:	481f      	ldr	r0, [pc, #124]	; (80002c4 <getKeyInput_1+0x94>)
 8000248:	f001 fcd2 	bl	8001bf0 <HAL_GPIO_ReadPin>
 800024c:	4603      	mov	r3, r0
 800024e:	461a      	mov	r2, r3
 8000250:	4b1b      	ldr	r3, [pc, #108]	; (80002c0 <getKeyInput_1+0x90>)
 8000252:	601a      	str	r2, [r3, #0]
  if ((KeyReg9 == KeyReg8) && (KeyReg9 == KeyReg10)){
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <getKeyInput_1+0x88>)
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	4b19      	ldr	r3, [pc, #100]	; (80002c0 <getKeyInput_1+0x90>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	429a      	cmp	r2, r3
 800025e:	d129      	bne.n	80002b4 <getKeyInput_1+0x84>
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <getKeyInput_1+0x88>)
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	4b15      	ldr	r3, [pc, #84]	; (80002bc <getKeyInput_1+0x8c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	429a      	cmp	r2, r3
 800026a:	d123      	bne.n	80002b4 <getKeyInput_1+0x84>
    if (KeyReg10 != KeyReg11){
 800026c:	4b13      	ldr	r3, [pc, #76]	; (80002bc <getKeyInput_1+0x8c>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <getKeyInput_1+0x98>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	429a      	cmp	r2, r3
 8000276:	d00e      	beq.n	8000296 <getKeyInput_1+0x66>
      KeyReg11 = KeyReg10;
 8000278:	4b10      	ldr	r3, [pc, #64]	; (80002bc <getKeyInput_1+0x8c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a12      	ldr	r2, [pc, #72]	; (80002c8 <getKeyInput_1+0x98>)
 800027e:	6013      	str	r3, [r2, #0]

      if (KeyReg10 == PRESSED_STATE){
 8000280:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <getKeyInput_1+0x8c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d115      	bne.n	80002b4 <getKeyInput_1+0x84>
        TimeOutForKeyPress_1 = 300;
 8000288:	4b10      	ldr	r3, [pc, #64]	; (80002cc <getKeyInput_1+0x9c>)
 800028a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800028e:	601a      	str	r2, [r3, #0]
        subKeyProcess_1();
 8000290:	f7ff ffb6 	bl	8000200 <subKeyProcess_1>
//        	TimeOutForKeyPress_1 = 100;

        }
    }
  }
}
 8000294:	e00e      	b.n	80002b4 <getKeyInput_1+0x84>
       TimeOutForKeyPress_1 --;
 8000296:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <getKeyInput_1+0x9c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	3b01      	subs	r3, #1
 800029c:	4a0b      	ldr	r2, [pc, #44]	; (80002cc <getKeyInput_1+0x9c>)
 800029e:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress_1 == 0){
 80002a0:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <getKeyInput_1+0x9c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d105      	bne.n	80002b4 <getKeyInput_1+0x84>
        	if (KeyReg10 == PRESSED_STATE){
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <getKeyInput_1+0x8c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d101      	bne.n	80002b4 <getKeyInput_1+0x84>
        		subKeyProcess_3s_1();
 80002b0:	f7ff ffb2 	bl	8000218 <subKeyProcess_3s_1>
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000024 	.word	0x20000024
 80002bc:	20000028 	.word	0x20000028
 80002c0:	20000020 	.word	0x20000020
 80002c4:	40010800 	.word	0x40010800
 80002c8:	2000002c 	.word	0x2000002c
 80002cc:	20000030 	.word	0x20000030

080002d0 <getKeyInput_2>:
void getKeyInput_2(){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  KeyReg2 = KeyReg1;
 80002d4:	4b23      	ldr	r3, [pc, #140]	; (8000364 <getKeyInput_2+0x94>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a23      	ldr	r2, [pc, #140]	; (8000368 <getKeyInput_2+0x98>)
 80002da:	6013      	str	r3, [r2, #0]
  KeyReg1 = KeyReg0;
 80002dc:	4b23      	ldr	r3, [pc, #140]	; (800036c <getKeyInput_2+0x9c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a20      	ldr	r2, [pc, #128]	; (8000364 <getKeyInput_2+0x94>)
 80002e2:	6013      	str	r3, [r2, #0]
  KeyReg0 = HAL_GPIO_ReadPin(A2_GPIO_Port, A2_Pin);
 80002e4:	2110      	movs	r1, #16
 80002e6:	4822      	ldr	r0, [pc, #136]	; (8000370 <getKeyInput_2+0xa0>)
 80002e8:	f001 fc82 	bl	8001bf0 <HAL_GPIO_ReadPin>
 80002ec:	4603      	mov	r3, r0
 80002ee:	461a      	mov	r2, r3
 80002f0:	4b1e      	ldr	r3, [pc, #120]	; (800036c <getKeyInput_2+0x9c>)
 80002f2:	601a      	str	r2, [r3, #0]
  if ((KeyReg1 == KeyReg0) && (KeyReg1 == KeyReg2)){
 80002f4:	4b1b      	ldr	r3, [pc, #108]	; (8000364 <getKeyInput_2+0x94>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	4b1c      	ldr	r3, [pc, #112]	; (800036c <getKeyInput_2+0x9c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d12e      	bne.n	800035e <getKeyInput_2+0x8e>
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <getKeyInput_2+0x94>)
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <getKeyInput_2+0x98>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	429a      	cmp	r2, r3
 800030a:	d128      	bne.n	800035e <getKeyInput_2+0x8e>
	if (KeyReg2 != KeyReg3){
 800030c:	4b16      	ldr	r3, [pc, #88]	; (8000368 <getKeyInput_2+0x98>)
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	4b18      	ldr	r3, [pc, #96]	; (8000374 <getKeyInput_2+0xa4>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	429a      	cmp	r2, r3
 8000316:	d00f      	beq.n	8000338 <getKeyInput_2+0x68>
		KeyReg3 = KeyReg2;
 8000318:	4b13      	ldr	r3, [pc, #76]	; (8000368 <getKeyInput_2+0x98>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a15      	ldr	r2, [pc, #84]	; (8000374 <getKeyInput_2+0xa4>)
 800031e:	6013      	str	r3, [r2, #0]
		if (KeyReg2 == PRESSED_STATE){
 8000320:	4b11      	ldr	r3, [pc, #68]	; (8000368 <getKeyInput_2+0x98>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d11a      	bne.n	800035e <getKeyInput_2+0x8e>
			button2_flag = 1;
 8000328:	4b13      	ldr	r3, [pc, #76]	; (8000378 <getKeyInput_2+0xa8>)
 800032a:	2201      	movs	r2, #1
 800032c:	601a      	str	r2, [r3, #0]
			TimeOutForKeyPress_2 = 300;
 800032e:	4b13      	ldr	r3, [pc, #76]	; (800037c <getKeyInput_2+0xac>)
 8000330:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000334:	601a      	str	r2, [r3, #0]
    		if(KeyReg2 == PRESSED_STATE) button2_flag = 1;
    		TimeOutForKeyPress_2 = 100;
    	}
	}
  }
}
 8000336:	e012      	b.n	800035e <getKeyInput_2+0x8e>
    	TimeOutForKeyPress_2 --;
 8000338:	4b10      	ldr	r3, [pc, #64]	; (800037c <getKeyInput_2+0xac>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3b01      	subs	r3, #1
 800033e:	4a0f      	ldr	r2, [pc, #60]	; (800037c <getKeyInput_2+0xac>)
 8000340:	6013      	str	r3, [r2, #0]
    	if (TimeOutForKeyPress_2 == 0){
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <getKeyInput_2+0xac>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d109      	bne.n	800035e <getKeyInput_2+0x8e>
    		if(KeyReg2 == PRESSED_STATE) button2_flag = 1;
 800034a:	4b07      	ldr	r3, [pc, #28]	; (8000368 <getKeyInput_2+0x98>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d102      	bne.n	8000358 <getKeyInput_2+0x88>
 8000352:	4b09      	ldr	r3, [pc, #36]	; (8000378 <getKeyInput_2+0xa8>)
 8000354:	2201      	movs	r2, #1
 8000356:	601a      	str	r2, [r3, #0]
    		TimeOutForKeyPress_2 = 100;
 8000358:	4b08      	ldr	r3, [pc, #32]	; (800037c <getKeyInput_2+0xac>)
 800035a:	2264      	movs	r2, #100	; 0x64
 800035c:	601a      	str	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000004 	.word	0x20000004
 8000368:	20000008 	.word	0x20000008
 800036c:	20000000 	.word	0x20000000
 8000370:	40010800 	.word	0x40010800
 8000374:	2000000c 	.word	0x2000000c
 8000378:	200000e0 	.word	0x200000e0
 800037c:	20000034 	.word	0x20000034

08000380 <getKeyInput_3>:


void getKeyInput_3(){
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  KeyReg6 = KeyReg5;
 8000384:	4b23      	ldr	r3, [pc, #140]	; (8000414 <getKeyInput_3+0x94>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a23      	ldr	r2, [pc, #140]	; (8000418 <getKeyInput_3+0x98>)
 800038a:	6013      	str	r3, [r2, #0]
  KeyReg5 = KeyReg4;
 800038c:	4b23      	ldr	r3, [pc, #140]	; (800041c <getKeyInput_3+0x9c>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a20      	ldr	r2, [pc, #128]	; (8000414 <getKeyInput_3+0x94>)
 8000392:	6013      	str	r3, [r2, #0]
  KeyReg4 = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin);
 8000394:	2101      	movs	r1, #1
 8000396:	4822      	ldr	r0, [pc, #136]	; (8000420 <getKeyInput_3+0xa0>)
 8000398:	f001 fc2a 	bl	8001bf0 <HAL_GPIO_ReadPin>
 800039c:	4603      	mov	r3, r0
 800039e:	461a      	mov	r2, r3
 80003a0:	4b1e      	ldr	r3, [pc, #120]	; (800041c <getKeyInput_3+0x9c>)
 80003a2:	601a      	str	r2, [r3, #0]
  if ((KeyReg5 == KeyReg4) && (KeyReg5 == KeyReg6)){
 80003a4:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <getKeyInput_3+0x94>)
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	4b1c      	ldr	r3, [pc, #112]	; (800041c <getKeyInput_3+0x9c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d12e      	bne.n	800040e <getKeyInput_3+0x8e>
 80003b0:	4b18      	ldr	r3, [pc, #96]	; (8000414 <getKeyInput_3+0x94>)
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	4b18      	ldr	r3, [pc, #96]	; (8000418 <getKeyInput_3+0x98>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d128      	bne.n	800040e <getKeyInput_3+0x8e>
	  if (KeyReg6 != KeyReg7){
 80003bc:	4b16      	ldr	r3, [pc, #88]	; (8000418 <getKeyInput_3+0x98>)
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	4b18      	ldr	r3, [pc, #96]	; (8000424 <getKeyInput_3+0xa4>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	429a      	cmp	r2, r3
 80003c6:	d00f      	beq.n	80003e8 <getKeyInput_3+0x68>
		  KeyReg7 = KeyReg6;
 80003c8:	4b13      	ldr	r3, [pc, #76]	; (8000418 <getKeyInput_3+0x98>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a15      	ldr	r2, [pc, #84]	; (8000424 <getKeyInput_3+0xa4>)
 80003ce:	6013      	str	r3, [r2, #0]
		  if (KeyReg6 == PRESSED_STATE){
 80003d0:	4b11      	ldr	r3, [pc, #68]	; (8000418 <getKeyInput_3+0x98>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d11a      	bne.n	800040e <getKeyInput_3+0x8e>
			  button3_flag = 1;
 80003d8:	4b13      	ldr	r3, [pc, #76]	; (8000428 <getKeyInput_3+0xa8>)
 80003da:	2201      	movs	r2, #1
 80003dc:	601a      	str	r2, [r3, #0]
			  TimeOutForKeyPress_3 = 300;
 80003de:	4b13      	ldr	r3, [pc, #76]	; (800042c <getKeyInput_3+0xac>)
 80003e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003e4:	601a      	str	r2, [r3, #0]
		      	if(KeyReg6 == PRESSED_STATE)button3_flag = 1;
		      	TimeOutForKeyPress_3 = 100;
		  }
	  }
  }
}
 80003e6:	e012      	b.n	800040e <getKeyInput_3+0x8e>
		  TimeOutForKeyPress_3 --;
 80003e8:	4b10      	ldr	r3, [pc, #64]	; (800042c <getKeyInput_3+0xac>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	3b01      	subs	r3, #1
 80003ee:	4a0f      	ldr	r2, [pc, #60]	; (800042c <getKeyInput_3+0xac>)
 80003f0:	6013      	str	r3, [r2, #0]
		  if (TimeOutForKeyPress_3 == 0){
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <getKeyInput_3+0xac>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d109      	bne.n	800040e <getKeyInput_3+0x8e>
		      	if(KeyReg6 == PRESSED_STATE)button3_flag = 1;
 80003fa:	4b07      	ldr	r3, [pc, #28]	; (8000418 <getKeyInput_3+0x98>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d102      	bne.n	8000408 <getKeyInput_3+0x88>
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <getKeyInput_3+0xa8>)
 8000404:	2201      	movs	r2, #1
 8000406:	601a      	str	r2, [r3, #0]
		      	TimeOutForKeyPress_3 = 100;
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <getKeyInput_3+0xac>)
 800040a:	2264      	movs	r2, #100	; 0x64
 800040c:	601a      	str	r2, [r3, #0]
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000014 	.word	0x20000014
 8000418:	20000018 	.word	0x20000018
 800041c:	20000010 	.word	0x20000010
 8000420:	40010c00 	.word	0x40010c00
 8000424:	2000001c 	.word	0x2000001c
 8000428:	200000e4 	.word	0x200000e4
 800042c:	20000038 	.word	0x20000038

08000430 <fsm_simple_buttons_run>:
#include "software_timer.h"
#include "button.h"
#include "main.h"


void fsm_simple_buttons_run () {
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	switch(mode){
 8000434:	4b9d      	ldr	r3, [pc, #628]	; (80006ac <fsm_simple_buttons_run+0x27c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b04      	cmp	r3, #4
 800043a:	f200 81be 	bhi.w	80007ba <fsm_simple_buttons_run+0x38a>
 800043e:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <fsm_simple_buttons_run+0x14>)
 8000440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000444:	08000459 	.word	0x08000459
 8000448:	08000475 	.word	0x08000475
 800044c:	0800050f 	.word	0x0800050f
 8000450:	080005dd 	.word	0x080005dd
 8000454:	080006e1 	.word	0x080006e1
		case MODE_INIT:
			setTimer0(1000);
 8000458:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800045c:	f000 fdac 	bl	8000fb8 <setTimer0>
			mode_led1 = MODE_LED_INIT;
 8000460:	4b93      	ldr	r3, [pc, #588]	; (80006b0 <fsm_simple_buttons_run+0x280>)
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
			mode_led2 = MODE_LED_INIT;
 8000466:	4b93      	ldr	r3, [pc, #588]	; (80006b4 <fsm_simple_buttons_run+0x284>)
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
			mode = MODE_1;
 800046c:	4b8f      	ldr	r3, [pc, #572]	; (80006ac <fsm_simple_buttons_run+0x27c>)
 800046e:	2201      	movs	r2, #1
 8000470:	601a      	str	r2, [r3, #0]
		break;
 8000472:	e1a2      	b.n	80007ba <fsm_simple_buttons_run+0x38a>
		case MODE_1:
			fsm_led1_run();
 8000474:	f000 f9b2 	bl	80007dc <fsm_led1_run>
			fsm_led2_run();
 8000478:	f000 fa7c 	bl	8000974 <fsm_led2_run>
			if(timer0_flag == 1){
 800047c:	4b8e      	ldr	r3, [pc, #568]	; (80006b8 <fsm_simple_buttons_run+0x288>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d10f      	bne.n	80004a4 <fsm_simple_buttons_run+0x74>
				if(counter > 0){
 8000484:	4b8d      	ldr	r3, [pc, #564]	; (80006bc <fsm_simple_buttons_run+0x28c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	dd04      	ble.n	8000496 <fsm_simple_buttons_run+0x66>
					counter--;
 800048c:	4b8b      	ldr	r3, [pc, #556]	; (80006bc <fsm_simple_buttons_run+0x28c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	3b01      	subs	r3, #1
 8000492:	4a8a      	ldr	r2, [pc, #552]	; (80006bc <fsm_simple_buttons_run+0x28c>)
 8000494:	6013      	str	r3, [r2, #0]
				}
				//print time();
				time_flag = 1;
 8000496:	4b8a      	ldr	r3, [pc, #552]	; (80006c0 <fsm_simple_buttons_run+0x290>)
 8000498:	2201      	movs	r2, #1
 800049a:	601a      	str	r2, [r3, #0]
				setTimer0(1000);
 800049c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004a0:	f000 fd8a 	bl	8000fb8 <setTimer0>
			}
			if(is_Button1_Pressed()){
 80004a4:	f7ff fe52 	bl	800014c <is_Button1_Pressed>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d010      	beq.n	80004d0 <fsm_simple_buttons_run+0xa0>
				walk_flag = 0;
 80004ae:	4b85      	ldr	r3, [pc, #532]	; (80006c4 <fsm_simple_buttons_run+0x294>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
				buzz_flag = 0;
 80004b4:	4b84      	ldr	r3, [pc, #528]	; (80006c8 <fsm_simple_buttons_run+0x298>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 80004ba:	f242 7010 	movw	r0, #10000	; 0x2710
 80004be:	f000 fd7b 	bl	8000fb8 <setTimer0>
				setTimer3(1000);
 80004c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c6:	f000 fdc5 	bl	8001054 <setTimer3>
				mode = 2;
 80004ca:	4b78      	ldr	r3, [pc, #480]	; (80006ac <fsm_simple_buttons_run+0x27c>)
 80004cc:	2202      	movs	r2, #2
 80004ce:	601a      	str	r2, [r3, #0]
//			}
//			if(is_Button3_Pressed()){
//				setTimer0(10000);
//				mode = 2;
//			}
			if(is_Button4_Pressed()){
 80004d0:	f7ff fe84 	bl	80001dc <is_Button4_Pressed>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d00d      	beq.n	80004f6 <fsm_simple_buttons_run+0xc6>
				//time for walking
				setTimer4(1000);
 80004da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004de:	f000 fdd3 	bl	8001088 <setTimer4>
				buzz_flag = 1;
 80004e2:	4b79      	ldr	r3, [pc, #484]	; (80006c8 <fsm_simple_buttons_run+0x298>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	601a      	str	r2, [r3, #0]
				setTimer3(10000);
 80004e8:	f242 7010 	movw	r0, #10000	; 0x2710
 80004ec:	f000 fdb2 	bl	8001054 <setTimer3>
				walk_flag = 1;
 80004f0:	4b74      	ldr	r3, [pc, #464]	; (80006c4 <fsm_simple_buttons_run+0x294>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	601a      	str	r2, [r3, #0]
			}
			if(timer3_flag == 1){
 80004f6:	4b75      	ldr	r3, [pc, #468]	; (80006cc <fsm_simple_buttons_run+0x29c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	f040 8156 	bne.w	80007ac <fsm_simple_buttons_run+0x37c>
				walk_flag = 0;
 8000500:	4b70      	ldr	r3, [pc, #448]	; (80006c4 <fsm_simple_buttons_run+0x294>)
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
				buzz_flag = 0;
 8000506:	4b70      	ldr	r3, [pc, #448]	; (80006c8 <fsm_simple_buttons_run+0x298>)
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
			}
		break;
 800050c:	e14e      	b.n	80007ac <fsm_simple_buttons_run+0x37c>
		case MODE_2:
			//setting led red time
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 800050e:	2201      	movs	r2, #1
 8000510:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000514:	486e      	ldr	r0, [pc, #440]	; (80006d0 <fsm_simple_buttons_run+0x2a0>)
 8000516:	f001 fb82 	bl	8001c1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	2108      	movs	r1, #8
 800051e:	486d      	ldr	r0, [pc, #436]	; (80006d4 <fsm_simple_buttons_run+0x2a4>)
 8000520:	f001 fb7d 	bl	8001c1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000524:	2201      	movs	r2, #1
 8000526:	2120      	movs	r1, #32
 8000528:	486a      	ldr	r0, [pc, #424]	; (80006d4 <fsm_simple_buttons_run+0x2a4>)
 800052a:	f001 fb78 	bl	8001c1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	2110      	movs	r1, #16
 8000532:	4868      	ldr	r0, [pc, #416]	; (80006d4 <fsm_simple_buttons_run+0x2a4>)
 8000534:	f001 fb73 	bl	8001c1e <HAL_GPIO_WritePin>
			//counter
			if(timer3_flag == 1){
 8000538:	4b64      	ldr	r3, [pc, #400]	; (80006cc <fsm_simple_buttons_run+0x29c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d106      	bne.n	800054e <fsm_simple_buttons_run+0x11e>
				time_flag = 1;
 8000540:	4b5f      	ldr	r3, [pc, #380]	; (80006c0 <fsm_simple_buttons_run+0x290>)
 8000542:	2201      	movs	r2, #1
 8000544:	601a      	str	r2, [r3, #0]
				setTimer3(1000);
 8000546:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800054a:	f000 fd83 	bl	8001054 <setTimer3>
			}

			if(is_Button1_Pressed()){
 800054e:	f7ff fdfd 	bl	800014c <is_Button1_Pressed>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d006      	beq.n	8000566 <fsm_simple_buttons_run+0x136>
//				counter = 0;
				mode = MODE_3;
 8000558:	4b54      	ldr	r3, [pc, #336]	; (80006ac <fsm_simple_buttons_run+0x27c>)
 800055a:	2203      	movs	r2, #3
 800055c:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 800055e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000562:	f000 fd29 	bl	8000fb8 <setTimer0>
			}

			if(is_Button1_Pressed_3s()){
 8000566:	f7ff fe03 	bl	8000170 <is_Button1_Pressed_3s>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d002      	beq.n	8000576 <fsm_simple_buttons_run+0x146>
			//	counter = 0;
				mode = MODE_INIT;
 8000570:	4b4e      	ldr	r3, [pc, #312]	; (80006ac <fsm_simple_buttons_run+0x27c>)
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
			}
			if(is_Button2_Pressed()){
 8000576:	f7ff fe0d 	bl	8000194 <is_Button2_Pressed>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d00f      	beq.n	80005a0 <fsm_simple_buttons_run+0x170>
				led_red++;
 8000580:	4b55      	ldr	r3, [pc, #340]	; (80006d8 <fsm_simple_buttons_run+0x2a8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	4a54      	ldr	r2, [pc, #336]	; (80006d8 <fsm_simple_buttons_run+0x2a8>)
 8000588:	6013      	str	r3, [r2, #0]
				if(led_red > 99) led_red = 0;
 800058a:	4b53      	ldr	r3, [pc, #332]	; (80006d8 <fsm_simple_buttons_run+0x2a8>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b63      	cmp	r3, #99	; 0x63
 8000590:	dd02      	ble.n	8000598 <fsm_simple_buttons_run+0x168>
 8000592:	4b51      	ldr	r3, [pc, #324]	; (80006d8 <fsm_simple_buttons_run+0x2a8>)
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 8000598:	f242 7010 	movw	r0, #10000	; 0x2710
 800059c:	f000 fd0c 	bl	8000fb8 <setTimer0>
			}
			if(is_Button3_Pressed()){
 80005a0:	f7ff fe0a 	bl	80001b8 <is_Button3_Pressed>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d00f      	beq.n	80005ca <fsm_simple_buttons_run+0x19a>
				led_red--;
 80005aa:	4b4b      	ldr	r3, [pc, #300]	; (80006d8 <fsm_simple_buttons_run+0x2a8>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	3b01      	subs	r3, #1
 80005b0:	4a49      	ldr	r2, [pc, #292]	; (80006d8 <fsm_simple_buttons_run+0x2a8>)
 80005b2:	6013      	str	r3, [r2, #0]
				if(led_red < 0) led_red = 99;
 80005b4:	4b48      	ldr	r3, [pc, #288]	; (80006d8 <fsm_simple_buttons_run+0x2a8>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	da02      	bge.n	80005c2 <fsm_simple_buttons_run+0x192>
 80005bc:	4b46      	ldr	r3, [pc, #280]	; (80006d8 <fsm_simple_buttons_run+0x2a8>)
 80005be:	2263      	movs	r2, #99	; 0x63
 80005c0:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 80005c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80005c6:	f000 fcf7 	bl	8000fb8 <setTimer0>
			}
			if(timer0_flag == 1){
 80005ca:	4b3b      	ldr	r3, [pc, #236]	; (80006b8 <fsm_simple_buttons_run+0x288>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	f040 80ee 	bne.w	80007b0 <fsm_simple_buttons_run+0x380>
				mode = MODE_INIT;
 80005d4:	4b35      	ldr	r3, [pc, #212]	; (80006ac <fsm_simple_buttons_run+0x27c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
			}
		break;
 80005da:	e0e9      	b.n	80007b0 <fsm_simple_buttons_run+0x380>
		case MODE_3:
			//setting led green time
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e2:	483b      	ldr	r0, [pc, #236]	; (80006d0 <fsm_simple_buttons_run+0x2a0>)
 80005e4:	f001 fb1b 	bl	8001c1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2108      	movs	r1, #8
 80005ec:	4839      	ldr	r0, [pc, #228]	; (80006d4 <fsm_simple_buttons_run+0x2a4>)
 80005ee:	f001 fb16 	bl	8001c1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2120      	movs	r1, #32
 80005f6:	4837      	ldr	r0, [pc, #220]	; (80006d4 <fsm_simple_buttons_run+0x2a4>)
 80005f8:	f001 fb11 	bl	8001c1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2110      	movs	r1, #16
 8000600:	4834      	ldr	r0, [pc, #208]	; (80006d4 <fsm_simple_buttons_run+0x2a4>)
 8000602:	f001 fb0c 	bl	8001c1e <HAL_GPIO_WritePin>
			//counter
			if(timer3_flag == 1){
 8000606:	4b31      	ldr	r3, [pc, #196]	; (80006cc <fsm_simple_buttons_run+0x29c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d106      	bne.n	800061c <fsm_simple_buttons_run+0x1ec>
				time_flag = 1;
 800060e:	4b2c      	ldr	r3, [pc, #176]	; (80006c0 <fsm_simple_buttons_run+0x290>)
 8000610:	2201      	movs	r2, #1
 8000612:	601a      	str	r2, [r3, #0]
				setTimer3(1000);
 8000614:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000618:	f000 fd1c 	bl	8001054 <setTimer3>
			}
			if(is_Button1_Pressed()){
 800061c:	f7ff fd96 	bl	800014c <is_Button1_Pressed>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d006      	beq.n	8000634 <fsm_simple_buttons_run+0x204>
//				counter = 0;
				mode = MODE_4;
 8000626:	4b21      	ldr	r3, [pc, #132]	; (80006ac <fsm_simple_buttons_run+0x27c>)
 8000628:	2204      	movs	r2, #4
 800062a:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 800062c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000630:	f000 fcc2 	bl	8000fb8 <setTimer0>
			}

			if(is_Button1_Pressed_3s()){
 8000634:	f7ff fd9c 	bl	8000170 <is_Button1_Pressed_3s>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d002      	beq.n	8000644 <fsm_simple_buttons_run+0x214>
			//	counter = 0;
				mode = MODE_INIT;
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <fsm_simple_buttons_run+0x27c>)
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
			}
			if(is_Button2_Pressed()){
 8000644:	f7ff fda6 	bl	8000194 <is_Button2_Pressed>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d00f      	beq.n	800066e <fsm_simple_buttons_run+0x23e>
				led_green++;
 800064e:	4b23      	ldr	r3, [pc, #140]	; (80006dc <fsm_simple_buttons_run+0x2ac>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	3301      	adds	r3, #1
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <fsm_simple_buttons_run+0x2ac>)
 8000656:	6013      	str	r3, [r2, #0]
				if(led_green > 99) led_green = 0;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <fsm_simple_buttons_run+0x2ac>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b63      	cmp	r3, #99	; 0x63
 800065e:	dd02      	ble.n	8000666 <fsm_simple_buttons_run+0x236>
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <fsm_simple_buttons_run+0x2ac>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 8000666:	f242 7010 	movw	r0, #10000	; 0x2710
 800066a:	f000 fca5 	bl	8000fb8 <setTimer0>
			}
			if(is_Button3_Pressed()){
 800066e:	f7ff fda3 	bl	80001b8 <is_Button3_Pressed>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d00f      	beq.n	8000698 <fsm_simple_buttons_run+0x268>
				led_green--;
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <fsm_simple_buttons_run+0x2ac>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3b01      	subs	r3, #1
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <fsm_simple_buttons_run+0x2ac>)
 8000680:	6013      	str	r3, [r2, #0]
				if(led_green < 0) led_green = 99;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <fsm_simple_buttons_run+0x2ac>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	da02      	bge.n	8000690 <fsm_simple_buttons_run+0x260>
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <fsm_simple_buttons_run+0x2ac>)
 800068c:	2263      	movs	r2, #99	; 0x63
 800068e:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 8000690:	f242 7010 	movw	r0, #10000	; 0x2710
 8000694:	f000 fc90 	bl	8000fb8 <setTimer0>
			}
			if(timer0_flag == 1){
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <fsm_simple_buttons_run+0x288>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	f040 8089 	bne.w	80007b4 <fsm_simple_buttons_run+0x384>
				mode = MODE_INIT;
 80006a2:	4b02      	ldr	r3, [pc, #8]	; (80006ac <fsm_simple_buttons_run+0x27c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
			}
		break;
 80006a8:	e084      	b.n	80007b4 <fsm_simple_buttons_run+0x384>
 80006aa:	bf00      	nop
 80006ac:	200000f0 	.word	0x200000f0
 80006b0:	200000f4 	.word	0x200000f4
 80006b4:	200000f8 	.word	0x200000f8
 80006b8:	20000114 	.word	0x20000114
 80006bc:	200000ec 	.word	0x200000ec
 80006c0:	20000108 	.word	0x20000108
 80006c4:	20000110 	.word	0x20000110
 80006c8:	2000010c 	.word	0x2000010c
 80006cc:	2000012c 	.word	0x2000012c
 80006d0:	40010800 	.word	0x40010800
 80006d4:	40010c00 	.word	0x40010c00
 80006d8:	20000040 	.word	0x20000040
 80006dc:	20000044 	.word	0x20000044
		case MODE_4:
			//setting led yellow time
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e6:	4836      	ldr	r0, [pc, #216]	; (80007c0 <fsm_simple_buttons_run+0x390>)
 80006e8:	f001 fa99 	bl	8001c1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2108      	movs	r1, #8
 80006f0:	4834      	ldr	r0, [pc, #208]	; (80007c4 <fsm_simple_buttons_run+0x394>)
 80006f2:	f001 fa94 	bl	8001c1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	2120      	movs	r1, #32
 80006fa:	4832      	ldr	r0, [pc, #200]	; (80007c4 <fsm_simple_buttons_run+0x394>)
 80006fc:	f001 fa8f 	bl	8001c1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000700:	2201      	movs	r2, #1
 8000702:	2110      	movs	r1, #16
 8000704:	482f      	ldr	r0, [pc, #188]	; (80007c4 <fsm_simple_buttons_run+0x394>)
 8000706:	f001 fa8a 	bl	8001c1e <HAL_GPIO_WritePin>
			//counter
			if(timer3_flag == 1){
 800070a:	4b2f      	ldr	r3, [pc, #188]	; (80007c8 <fsm_simple_buttons_run+0x398>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d106      	bne.n	8000720 <fsm_simple_buttons_run+0x2f0>
				time_flag = 1;
 8000712:	4b2e      	ldr	r3, [pc, #184]	; (80007cc <fsm_simple_buttons_run+0x39c>)
 8000714:	2201      	movs	r2, #1
 8000716:	601a      	str	r2, [r3, #0]
				setTimer3(1000);
 8000718:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800071c:	f000 fc9a 	bl	8001054 <setTimer3>
			}
			if(is_Button1_Pressed()){
 8000720:	f7ff fd14 	bl	800014c <is_Button1_Pressed>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d006      	beq.n	8000738 <fsm_simple_buttons_run+0x308>
//				counter = 0;
				mode = MODE_INIT;
 800072a:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <fsm_simple_buttons_run+0x3a0>)
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 8000730:	f242 7010 	movw	r0, #10000	; 0x2710
 8000734:	f000 fc40 	bl	8000fb8 <setTimer0>
			}
			if(is_Button1_Pressed_3s()){
 8000738:	f7ff fd1a 	bl	8000170 <is_Button1_Pressed_3s>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d002      	beq.n	8000748 <fsm_simple_buttons_run+0x318>
				//	counter = 0;
				mode = MODE_INIT;
 8000742:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <fsm_simple_buttons_run+0x3a0>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
			}
			if(is_Button2_Pressed()){
 8000748:	f7ff fd24 	bl	8000194 <is_Button2_Pressed>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d00f      	beq.n	8000772 <fsm_simple_buttons_run+0x342>
				led_yellow++;
 8000752:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <fsm_simple_buttons_run+0x3a4>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	4a1e      	ldr	r2, [pc, #120]	; (80007d4 <fsm_simple_buttons_run+0x3a4>)
 800075a:	6013      	str	r3, [r2, #0]
				if(led_yellow > 99) led_yellow = 0;
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <fsm_simple_buttons_run+0x3a4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b63      	cmp	r3, #99	; 0x63
 8000762:	dd02      	ble.n	800076a <fsm_simple_buttons_run+0x33a>
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <fsm_simple_buttons_run+0x3a4>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 800076a:	f242 7010 	movw	r0, #10000	; 0x2710
 800076e:	f000 fc23 	bl	8000fb8 <setTimer0>
			}
			if(is_Button3_Pressed()){
 8000772:	f7ff fd21 	bl	80001b8 <is_Button3_Pressed>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d00f      	beq.n	800079c <fsm_simple_buttons_run+0x36c>
				led_yellow--;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <fsm_simple_buttons_run+0x3a4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3b01      	subs	r3, #1
 8000782:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <fsm_simple_buttons_run+0x3a4>)
 8000784:	6013      	str	r3, [r2, #0]
				if(led_yellow < 0) led_yellow = 99;
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <fsm_simple_buttons_run+0x3a4>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da02      	bge.n	8000794 <fsm_simple_buttons_run+0x364>
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <fsm_simple_buttons_run+0x3a4>)
 8000790:	2263      	movs	r2, #99	; 0x63
 8000792:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 8000794:	f242 7010 	movw	r0, #10000	; 0x2710
 8000798:	f000 fc0e 	bl	8000fb8 <setTimer0>
			}
			if(timer0_flag == 1){
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <fsm_simple_buttons_run+0x3a8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d109      	bne.n	80007b8 <fsm_simple_buttons_run+0x388>
				mode = MODE_INIT;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <fsm_simple_buttons_run+0x3a0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
			}
			break;
 80007aa:	e005      	b.n	80007b8 <fsm_simple_buttons_run+0x388>
		break;
 80007ac:	bf00      	nop
 80007ae:	e004      	b.n	80007ba <fsm_simple_buttons_run+0x38a>
		break;
 80007b0:	bf00      	nop
 80007b2:	e002      	b.n	80007ba <fsm_simple_buttons_run+0x38a>
		break;
 80007b4:	bf00      	nop
 80007b6:	e000      	b.n	80007ba <fsm_simple_buttons_run+0x38a>
			break;
 80007b8:	bf00      	nop
	}
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40010800 	.word	0x40010800
 80007c4:	40010c00 	.word	0x40010c00
 80007c8:	2000012c 	.word	0x2000012c
 80007cc:	20000108 	.word	0x20000108
 80007d0:	200000f0 	.word	0x200000f0
 80007d4:	20000048 	.word	0x20000048
 80007d8:	20000114 	.word	0x20000114

080007dc <fsm_led1_run>:
void fsm_led1_run(){
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	switch(mode_led1){
 80007e0:	4b5b      	ldr	r3, [pc, #364]	; (8000950 <fsm_led1_run+0x174>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b03      	cmp	r3, #3
 80007e6:	f200 80b1 	bhi.w	800094c <fsm_led1_run+0x170>
 80007ea:	a201      	add	r2, pc, #4	; (adr r2, 80007f0 <fsm_led1_run+0x14>)
 80007ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f0:	08000801 	.word	0x08000801
 80007f4:	08000823 	.word	0x08000823
 80007f8:	08000883 	.word	0x08000883
 80007fc:	080008e3 	.word	0x080008e3
		case MODE_LED_INIT:
			setTimer1(led_red*1000);
 8000800:	4b54      	ldr	r3, [pc, #336]	; (8000954 <fsm_led1_run+0x178>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000808:	fb02 f303 	mul.w	r3, r2, r3
 800080c:	4618      	mov	r0, r3
 800080e:	f000 fbed 	bl	8000fec <setTimer1>
			counter = led_red;
 8000812:	4b50      	ldr	r3, [pc, #320]	; (8000954 <fsm_led1_run+0x178>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a50      	ldr	r2, [pc, #320]	; (8000958 <fsm_led1_run+0x17c>)
 8000818:	6013      	str	r3, [r2, #0]
			mode_led1 = MODE_LED_1;
 800081a:	4b4d      	ldr	r3, [pc, #308]	; (8000950 <fsm_led1_run+0x174>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
		break;
 8000820:	e094      	b.n	800094c <fsm_led1_run+0x170>
		case MODE_LED_1://red
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000828:	484c      	ldr	r0, [pc, #304]	; (800095c <fsm_led1_run+0x180>)
 800082a:	f001 f9f8 	bl	8001c1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2108      	movs	r1, #8
 8000832:	484b      	ldr	r0, [pc, #300]	; (8000960 <fsm_led1_run+0x184>)
 8000834:	f001 f9f3 	bl	8001c1e <HAL_GPIO_WritePin>
		if (walk_flag == 1){
 8000838:	4b4a      	ldr	r3, [pc, #296]	; (8000964 <fsm_led1_run+0x188>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d10b      	bne.n	8000858 <fsm_led1_run+0x7c>
			//green
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000846:	4846      	ldr	r0, [pc, #280]	; (8000960 <fsm_led1_run+0x184>)
 8000848:	f001 f9e9 	bl	8001c1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000852:	4842      	ldr	r0, [pc, #264]	; (800095c <fsm_led1_run+0x180>)
 8000854:	f001 f9e3 	bl	8001c1e <HAL_GPIO_WritePin>
		}
		if(timer1_flag == 1){
 8000858:	4b43      	ldr	r3, [pc, #268]	; (8000968 <fsm_led1_run+0x18c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d170      	bne.n	8000942 <fsm_led1_run+0x166>
			mode_led1 = MODE_LED_2;
 8000860:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <fsm_led1_run+0x174>)
 8000862:	2202      	movs	r2, #2
 8000864:	601a      	str	r2, [r3, #0]
			counter = led_green;
 8000866:	4b41      	ldr	r3, [pc, #260]	; (800096c <fsm_led1_run+0x190>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a3b      	ldr	r2, [pc, #236]	; (8000958 <fsm_led1_run+0x17c>)
 800086c:	6013      	str	r3, [r2, #0]
			setTimer1(led_green*1000);
 800086e:	4b3f      	ldr	r3, [pc, #252]	; (800096c <fsm_led1_run+0x190>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000876:	fb02 f303 	mul.w	r3, r2, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f000 fbb6 	bl	8000fec <setTimer1>
		}
		break;
 8000880:	e05f      	b.n	8000942 <fsm_led1_run+0x166>
		case MODE_LED_2://green
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000888:	4834      	ldr	r0, [pc, #208]	; (800095c <fsm_led1_run+0x180>)
 800088a:	f001 f9c8 	bl	8001c1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 800088e:	2201      	movs	r2, #1
 8000890:	2108      	movs	r1, #8
 8000892:	4833      	ldr	r0, [pc, #204]	; (8000960 <fsm_led1_run+0x184>)
 8000894:	f001 f9c3 	bl	8001c1e <HAL_GPIO_WritePin>
			if (walk_flag == 1){
 8000898:	4b32      	ldr	r3, [pc, #200]	; (8000964 <fsm_led1_run+0x188>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d10b      	bne.n	80008b8 <fsm_led1_run+0xdc>
				//red
				HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a6:	482e      	ldr	r0, [pc, #184]	; (8000960 <fsm_led1_run+0x184>)
 80008a8:	f001 f9b9 	bl	8001c1e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b2:	482a      	ldr	r0, [pc, #168]	; (800095c <fsm_led1_run+0x180>)
 80008b4:	f001 f9b3 	bl	8001c1e <HAL_GPIO_WritePin>
			}
			if(timer1_flag == 1){
 80008b8:	4b2b      	ldr	r3, [pc, #172]	; (8000968 <fsm_led1_run+0x18c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d142      	bne.n	8000946 <fsm_led1_run+0x16a>
				mode_led1 = MODE_LED_3;
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <fsm_led1_run+0x174>)
 80008c2:	2203      	movs	r2, #3
 80008c4:	601a      	str	r2, [r3, #0]
				counter = led_yellow;
 80008c6:	4b2a      	ldr	r3, [pc, #168]	; (8000970 <fsm_led1_run+0x194>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a23      	ldr	r2, [pc, #140]	; (8000958 <fsm_led1_run+0x17c>)
 80008cc:	6013      	str	r3, [r2, #0]
				setTimer1(led_yellow*1000);
 80008ce:	4b28      	ldr	r3, [pc, #160]	; (8000970 <fsm_led1_run+0x194>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008d6:	fb02 f303 	mul.w	r3, r2, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 fb86 	bl	8000fec <setTimer1>
			}
		break;
 80008e0:	e031      	b.n	8000946 <fsm_led1_run+0x16a>
		case MODE_LED_3://yellow
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e8:	481c      	ldr	r0, [pc, #112]	; (800095c <fsm_led1_run+0x180>)
 80008ea:	f001 f998 	bl	8001c1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	2108      	movs	r1, #8
 80008f2:	481b      	ldr	r0, [pc, #108]	; (8000960 <fsm_led1_run+0x184>)
 80008f4:	f001 f993 	bl	8001c1e <HAL_GPIO_WritePin>
			if (walk_flag == 1){
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <fsm_led1_run+0x188>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d10b      	bne.n	8000918 <fsm_led1_run+0x13c>
				//green
				HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000906:	4816      	ldr	r0, [pc, #88]	; (8000960 <fsm_led1_run+0x184>)
 8000908:	f001 f989 	bl	8001c1e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 800090c:	2201      	movs	r2, #1
 800090e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000912:	4812      	ldr	r0, [pc, #72]	; (800095c <fsm_led1_run+0x180>)
 8000914:	f001 f983 	bl	8001c1e <HAL_GPIO_WritePin>
			}
			if(timer1_flag == 1){
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <fsm_led1_run+0x18c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d114      	bne.n	800094a <fsm_led1_run+0x16e>
				mode_led1 = MODE_LED_1;
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <fsm_led1_run+0x174>)
 8000922:	2201      	movs	r2, #1
 8000924:	601a      	str	r2, [r3, #0]
				counter = led_red;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <fsm_led1_run+0x178>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <fsm_led1_run+0x17c>)
 800092c:	6013      	str	r3, [r2, #0]
				setTimer1(led_red*1000);
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <fsm_led1_run+0x178>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000936:	fb02 f303 	mul.w	r3, r2, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f000 fb56 	bl	8000fec <setTimer1>
			}
		break;
 8000940:	e003      	b.n	800094a <fsm_led1_run+0x16e>
		break;
 8000942:	bf00      	nop
 8000944:	e002      	b.n	800094c <fsm_led1_run+0x170>
		break;
 8000946:	bf00      	nop
 8000948:	e000      	b.n	800094c <fsm_led1_run+0x170>
		break;
 800094a:	bf00      	nop
	}
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200000f4 	.word	0x200000f4
 8000954:	20000040 	.word	0x20000040
 8000958:	200000ec 	.word	0x200000ec
 800095c:	40010800 	.word	0x40010800
 8000960:	40010c00 	.word	0x40010c00
 8000964:	20000110 	.word	0x20000110
 8000968:	2000011c 	.word	0x2000011c
 800096c:	20000044 	.word	0x20000044
 8000970:	20000048 	.word	0x20000048

08000974 <fsm_led2_run>:

void fsm_led2_run(){
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	switch(mode_led2){
 8000978:	4b3a      	ldr	r3, [pc, #232]	; (8000a64 <fsm_led2_run+0xf0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b03      	cmp	r3, #3
 800097e:	d86e      	bhi.n	8000a5e <fsm_led2_run+0xea>
 8000980:	a201      	add	r2, pc, #4	; (adr r2, 8000988 <fsm_led2_run+0x14>)
 8000982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000986:	bf00      	nop
 8000988:	08000999 	.word	0x08000999
 800098c:	080009b3 	.word	0x080009b3
 8000990:	080009e9 	.word	0x080009e9
 8000994:	08000a1f 	.word	0x08000a1f
		case MODE_LED_INIT:
			setTimer2(led_green*1000);
 8000998:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <fsm_led2_run+0xf4>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009a0:	fb02 f303 	mul.w	r3, r2, r3
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fb3b 	bl	8001020 <setTimer2>
			mode_led2 = MODE_LED_2;
 80009aa:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <fsm_led2_run+0xf0>)
 80009ac:	2202      	movs	r2, #2
 80009ae:	601a      	str	r2, [r3, #0]
		break;
 80009b0:	e055      	b.n	8000a5e <fsm_led2_run+0xea>
		case MODE_LED_1:
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2120      	movs	r1, #32
 80009b6:	482d      	ldr	r0, [pc, #180]	; (8000a6c <fsm_led2_run+0xf8>)
 80009b8:	f001 f931 	bl	8001c1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2110      	movs	r1, #16
 80009c0:	482a      	ldr	r0, [pc, #168]	; (8000a6c <fsm_led2_run+0xf8>)
 80009c2:	f001 f92c 	bl	8001c1e <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 80009c6:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <fsm_led2_run+0xfc>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d142      	bne.n	8000a54 <fsm_led2_run+0xe0>
				mode_led2 = MODE_LED_2;
 80009ce:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <fsm_led2_run+0xf0>)
 80009d0:	2202      	movs	r2, #2
 80009d2:	601a      	str	r2, [r3, #0]
				setTimer2(led_green*1000);
 80009d4:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <fsm_led2_run+0xf4>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009dc:	fb02 f303 	mul.w	r3, r2, r3
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 fb1d 	bl	8001020 <setTimer2>
			}
		break;
 80009e6:	e035      	b.n	8000a54 <fsm_led2_run+0xe0>
		case MODE_LED_2:
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2120      	movs	r1, #32
 80009ec:	481f      	ldr	r0, [pc, #124]	; (8000a6c <fsm_led2_run+0xf8>)
 80009ee:	f001 f916 	bl	8001c1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	2110      	movs	r1, #16
 80009f6:	481d      	ldr	r0, [pc, #116]	; (8000a6c <fsm_led2_run+0xf8>)
 80009f8:	f001 f911 	bl	8001c1e <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <fsm_led2_run+0xfc>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d129      	bne.n	8000a58 <fsm_led2_run+0xe4>
				mode_led2 = MODE_LED_3;
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <fsm_led2_run+0xf0>)
 8000a06:	2203      	movs	r2, #3
 8000a08:	601a      	str	r2, [r3, #0]
				setTimer2(led_yellow*1000);
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <fsm_led2_run+0x100>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a12:	fb02 f303 	mul.w	r3, r2, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 fb02 	bl	8001020 <setTimer2>
			}
		break;
 8000a1c:	e01c      	b.n	8000a58 <fsm_led2_run+0xe4>
		case MODE_LED_3:
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2120      	movs	r1, #32
 8000a22:	4812      	ldr	r0, [pc, #72]	; (8000a6c <fsm_led2_run+0xf8>)
 8000a24:	f001 f8fb 	bl	8001c1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	480f      	ldr	r0, [pc, #60]	; (8000a6c <fsm_led2_run+0xf8>)
 8000a2e:	f001 f8f6 	bl	8001c1e <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <fsm_led2_run+0xfc>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d110      	bne.n	8000a5c <fsm_led2_run+0xe8>
				mode_led2 = MODE_LED_1;
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <fsm_led2_run+0xf0>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	601a      	str	r2, [r3, #0]
				setTimer2(led_red*1000);
 8000a40:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <fsm_led2_run+0x104>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a48:	fb02 f303 	mul.w	r3, r2, r3
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 fae7 	bl	8001020 <setTimer2>
			}
		break;
 8000a52:	e003      	b.n	8000a5c <fsm_led2_run+0xe8>
		break;
 8000a54:	bf00      	nop
 8000a56:	e002      	b.n	8000a5e <fsm_led2_run+0xea>
		break;
 8000a58:	bf00      	nop
 8000a5a:	e000      	b.n	8000a5e <fsm_led2_run+0xea>
		break;
 8000a5c:	bf00      	nop
	}
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000f8 	.word	0x200000f8
 8000a68:	20000044 	.word	0x20000044
 8000a6c:	40010c00 	.word	0x40010c00
 8000a70:	20000124 	.word	0x20000124
 8000a74:	20000048 	.word	0x20000048
 8000a78:	20000040 	.word	0x20000040

08000a7c <print_time>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print_time(){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	if(time_flag == 1){
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <print_time+0x34>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d110      	bne.n	8000aaa <print_time+0x2e>
		HAL_UART_Transmit(&huart2, (void *)buffer, sprintf(buffer, "!7SEG:%d\r\n", counter), 50);
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <print_time+0x38>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	490a      	ldr	r1, [pc, #40]	; (8000ab8 <print_time+0x3c>)
 8000a90:	480a      	ldr	r0, [pc, #40]	; (8000abc <print_time+0x40>)
 8000a92:	f003 f95b 	bl	8003d4c <siprintf>
 8000a96:	4603      	mov	r3, r0
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	2332      	movs	r3, #50	; 0x32
 8000a9c:	4907      	ldr	r1, [pc, #28]	; (8000abc <print_time+0x40>)
 8000a9e:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <print_time+0x44>)
 8000aa0:	f002 fc97 	bl	80033d2 <HAL_UART_Transmit>
		time_flag = 0;
 8000aa4:	4b02      	ldr	r3, [pc, #8]	; (8000ab0 <print_time+0x34>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
	}
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000108 	.word	0x20000108
 8000ab4:	200000ec 	.word	0x200000ec
 8000ab8:	080045d8 	.word	0x080045d8
 8000abc:	200000fc 	.word	0x200000fc
 8000ac0:	200001d8 	.word	0x200001d8

08000ac4 <buzzer>:
void buzzer(){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	if(buzz_flag == 1){
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <buzzer+0x58>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d123      	bne.n	8000b18 <buzzer+0x54>
		if(timer3_flag == 0){
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <buzzer+0x5c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d11f      	bne.n	8000b18 <buzzer+0x54>
			if(timer4_flag == 1){
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <buzzer+0x60>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d11b      	bne.n	8000b18 <buzzer+0x54>
				if(counter >= 1 && counter < 5){
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <buzzer+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	dd17      	ble.n	8000b18 <buzzer+0x54>
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <buzzer+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b04      	cmp	r3, #4
 8000aee:	dc13      	bgt.n	8000b18 <buzzer+0x54>
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 1000 - counter*200);
 8000af0:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <buzzer+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f06f 02c7 	mvn.w	r2, #199	; 0xc7
 8000af8:	fb02 f303 	mul.w	r3, r2, r3
 8000afc:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <buzzer+0x68>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	635a      	str	r2, [r3, #52]	; 0x34
				setTimer4(counter*200 + 100);
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <buzzer+0x64>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	22c8      	movs	r2, #200	; 0xc8
 8000b0c:	fb02 f303 	mul.w	r3, r2, r3
 8000b10:	3364      	adds	r3, #100	; 0x64
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fab8 	bl	8001088 <setTimer4>
				}
			}
		}
	}
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	2000010c 	.word	0x2000010c
 8000b20:	2000012c 	.word	0x2000012c
 8000b24:	20000134 	.word	0x20000134
 8000b28:	200000ec 	.word	0x200000ec
 8000b2c:	20000148 	.word	0x20000148

08000b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b34:	f000 fcb8 	bl	80014a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b38:	f000 f81a 	bl	8000b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3c:	f000 f946 	bl	8000dcc <MX_GPIO_Init>
  MX_TIM3_Init();
 8000b40:	f000 f8a4 	bl	8000c8c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000b44:	f000 f856 	bl	8000bf4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000b48:	f000 f916 	bl	8000d78 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b4c:	4806      	ldr	r0, [pc, #24]	; (8000b68 <main+0x38>)
 8000b4e:	f001 fce9 	bl	8002524 <HAL_TIM_Base_Start_IT>
  HAL_TIMEx_PWMN_Start(&htim3, TIM_CHANNEL_1);
 8000b52:	2100      	movs	r1, #0
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <main+0x3c>)
 8000b56:	f002 fabd 	bl	80030d4 <HAL_TIMEx_PWMN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 fsm_simple_buttons_run();
 8000b5a:	f7ff fc69 	bl	8000430 <fsm_simple_buttons_run>
	 print_time();
 8000b5e:	f7ff ff8d 	bl	8000a7c <print_time>
	 buzzer();
 8000b62:	f7ff ffaf 	bl	8000ac4 <buzzer>
	 fsm_simple_buttons_run();
 8000b66:	e7f8      	b.n	8000b5a <main+0x2a>
 8000b68:	20000190 	.word	0x20000190
 8000b6c:	20000148 	.word	0x20000148

08000b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b090      	sub	sp, #64	; 0x40
 8000b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b76:	f107 0318 	add.w	r3, r7, #24
 8000b7a:	2228      	movs	r2, #40	; 0x28
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f003 f8dc 	bl	8003d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b96:	2301      	movs	r3, #1
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b9a:	2310      	movs	r3, #16
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ba6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bac:	f107 0318 	add.w	r3, r7, #24
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f001 f84d 	bl	8001c50 <HAL_RCC_OscConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000bbc:	f000 f986 	bl	8000ecc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2102      	movs	r1, #2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 fab8 	bl	8002150 <HAL_RCC_ClockConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000be6:	f000 f971 	bl	8000ecc <Error_Handler>
  }
}
 8000bea:	bf00      	nop
 8000bec:	3740      	adds	r7, #64	; 0x40
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfa:	f107 0308 	add.w	r3, r7, #8
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c08:	463b      	mov	r3, r7
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c1a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c20:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c28:	224f      	movs	r2, #79	; 0x4f
 8000c2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c38:	4813      	ldr	r0, [pc, #76]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c3a:	f001 fc23 	bl	8002484 <HAL_TIM_Base_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c44:	f000 f942 	bl	8000ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	4619      	mov	r1, r3
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c56:	f001 fed5 	bl	8002a04 <HAL_TIM_ConfigClockSource>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c60:	f000 f934 	bl	8000ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c64:	2300      	movs	r3, #0
 8000c66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c72:	f002 facd 	bl	8003210 <HAL_TIMEx_MasterConfigSynchronization>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c7c:	f000 f926 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000190 	.word	0x20000190

08000c8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08e      	sub	sp, #56	; 0x38
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca0:	f107 0320 	add.w	r3, r7, #32
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
 8000cb8:	615a      	str	r2, [r3, #20]
 8000cba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cbc:	4b2c      	ldr	r3, [pc, #176]	; (8000d70 <MX_TIM3_Init+0xe4>)
 8000cbe:	4a2d      	ldr	r2, [pc, #180]	; (8000d74 <MX_TIM3_Init+0xe8>)
 8000cc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000cc2:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <MX_TIM3_Init+0xe4>)
 8000cc4:	223f      	movs	r2, #63	; 0x3f
 8000cc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc8:	4b29      	ldr	r3, [pc, #164]	; (8000d70 <MX_TIM3_Init+0xe4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000cce:	4b28      	ldr	r3, [pc, #160]	; (8000d70 <MX_TIM3_Init+0xe4>)
 8000cd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <MX_TIM3_Init+0xe4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cdc:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <MX_TIM3_Init+0xe4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ce2:	4823      	ldr	r0, [pc, #140]	; (8000d70 <MX_TIM3_Init+0xe4>)
 8000ce4:	f001 fbce 	bl	8002484 <HAL_TIM_Base_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000cee:	f000 f8ed 	bl	8000ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	481c      	ldr	r0, [pc, #112]	; (8000d70 <MX_TIM3_Init+0xe4>)
 8000d00:	f001 fe80 	bl	8002a04 <HAL_TIM_ConfigClockSource>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d0a:	f000 f8df 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d0e:	4818      	ldr	r0, [pc, #96]	; (8000d70 <MX_TIM3_Init+0xe4>)
 8000d10:	f001 fc5a 	bl	80025c8 <HAL_TIM_PWM_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d1a:	f000 f8d7 	bl	8000ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d26:	f107 0320 	add.w	r3, r7, #32
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4810      	ldr	r0, [pc, #64]	; (8000d70 <MX_TIM3_Init+0xe4>)
 8000d2e:	f002 fa6f 	bl	8003210 <HAL_TIMEx_MasterConfigSynchronization>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d38:	f000 f8c8 	bl	8000ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d3c:	2360      	movs	r3, #96	; 0x60
 8000d3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2200      	movs	r2, #0
 8000d50:	4619      	mov	r1, r3
 8000d52:	4807      	ldr	r0, [pc, #28]	; (8000d70 <MX_TIM3_Init+0xe4>)
 8000d54:	f001 fd98 	bl	8002888 <HAL_TIM_PWM_ConfigChannel>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d5e:	f000 f8b5 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d62:	4803      	ldr	r0, [pc, #12]	; (8000d70 <MX_TIM3_Init+0xe4>)
 8000d64:	f000 fa7e 	bl	8001264 <HAL_TIM_MspPostInit>

}
 8000d68:	bf00      	nop
 8000d6a:	3738      	adds	r7, #56	; 0x38
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000148 	.word	0x20000148
 8000d74:	40000400 	.word	0x40000400

08000d78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <MX_USART2_UART_Init+0x50>)
 8000d80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	220c      	movs	r2, #12
 8000da0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000db0:	f002 fac2 	bl	8003338 <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dba:	f000 f887 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200001d8 	.word	0x200001d8
 8000dc8:	40004400 	.word	0x40004400

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b2e      	ldr	r3, [pc, #184]	; (8000e9c <MX_GPIO_Init+0xd0>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	4a2d      	ldr	r2, [pc, #180]	; (8000e9c <MX_GPIO_Init+0xd0>)
 8000de6:	f043 0304 	orr.w	r3, r3, #4
 8000dea:	6193      	str	r3, [r2, #24]
 8000dec:	4b2b      	ldr	r3, [pc, #172]	; (8000e9c <MX_GPIO_Init+0xd0>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df8:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <MX_GPIO_Init+0xd0>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a27      	ldr	r2, [pc, #156]	; (8000e9c <MX_GPIO_Init+0xd0>)
 8000dfe:	f043 0308 	orr.w	r3, r3, #8
 8000e02:	6193      	str	r3, [r2, #24]
 8000e04:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <MX_GPIO_Init+0xd0>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f003 0308 	and.w	r3, r3, #8
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000e16:	4822      	ldr	r0, [pc, #136]	; (8000ea0 <MX_GPIO_Init+0xd4>)
 8000e18:	f000 ff01 	bl	8001c1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000e22:	4820      	ldr	r0, [pc, #128]	; (8000ea4 <MX_GPIO_Init+0xd8>)
 8000e24:	f000 fefb 	bl	8001c1e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8000e28:	2313      	movs	r3, #19
 8000e2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	4619      	mov	r1, r3
 8000e3a:	481a      	ldr	r0, [pc, #104]	; (8000ea4 <MX_GPIO_Init+0xd8>)
 8000e3c:	f000 fd54 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8000e40:	2301      	movs	r3, #1
 8000e42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 0308 	add.w	r3, r7, #8
 8000e50:	4619      	mov	r1, r3
 8000e52:	4813      	ldr	r0, [pc, #76]	; (8000ea0 <MX_GPIO_Init+0xd4>)
 8000e54:	f000 fd48 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000e58:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000e5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2302      	movs	r3, #2
 8000e68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	f107 0308 	add.w	r3, r7, #8
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480b      	ldr	r0, [pc, #44]	; (8000ea0 <MX_GPIO_Init+0xd4>)
 8000e72:	f000 fd39 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8000e76:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000e7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2302      	movs	r3, #2
 8000e86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	f107 0308 	add.w	r3, r7, #8
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_GPIO_Init+0xd8>)
 8000e90:	f000 fd2a 	bl	80018e8 <HAL_GPIO_Init>

}
 8000e94:	bf00      	nop
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010c00 	.word	0x40010c00
 8000ea4:	40010800 	.word	0x40010800

08000ea8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000eb0:	f000 f812 	bl	8000ed8 <SCH_Update>
	timerRun();
 8000eb4:	f000 f902 	bl	80010bc <timerRun>
	getKeyInput_1();
 8000eb8:	f7ff f9ba 	bl	8000230 <getKeyInput_1>
	getKeyInput_2();
 8000ebc:	f7ff fa08 	bl	80002d0 <getKeyInput_2>
	getKeyInput_3();
 8000ec0:	f7ff fa5e 	bl	8000380 <getKeyInput_3>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed0:	b672      	cpsid	i
}
 8000ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <Error_Handler+0x8>
	...

08000ed8 <SCH_Update>:
	SCH_tasks_G[Index].TaskID = Index;

	return Index;
}

void SCH_Update(void){
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
	unsigned char Index ;
	// NOTE: calculations are in *TICKS* (not milliseconds)
	for( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000ede:	2300      	movs	r3, #0
 8000ee0:	71fb      	strb	r3, [r7, #7]
 8000ee2:	e05d      	b.n	8000fa0 <SCH_Update+0xc8>
		// Check i f there is a task at this location
		if(SCH_tasks_G[Index].pTask ) {
 8000ee4:	79fa      	ldrb	r2, [r7, #7]
 8000ee6:	4933      	ldr	r1, [pc, #204]	; (8000fb4 <SCH_Update+0xdc>)
 8000ee8:	4613      	mov	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d050      	beq.n	8000f9a <SCH_Update+0xc2>
			if(SCH_tasks_G[Index].Delay == 0 ) {
 8000ef8:	79fa      	ldrb	r2, [r7, #7]
 8000efa:	492e      	ldr	r1, [pc, #184]	; (8000fb4 <SCH_Update+0xdc>)
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	440b      	add	r3, r1
 8000f06:	3304      	adds	r3, #4
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d132      	bne.n	8000f74 <SCH_Update+0x9c>
				// The task i s due to run
				// Inc . the ’RunMe’ flag
				SCH_tasks_G[Index].RunMe += 1;
 8000f0e:	79fa      	ldrb	r2, [r7, #7]
 8000f10:	4928      	ldr	r1, [pc, #160]	; (8000fb4 <SCH_Update+0xdc>)
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	330c      	adds	r3, #12
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	79fa      	ldrb	r2, [r7, #7]
 8000f22:	3301      	adds	r3, #1
 8000f24:	b2d8      	uxtb	r0, r3
 8000f26:	4923      	ldr	r1, [pc, #140]	; (8000fb4 <SCH_Update+0xdc>)
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	440b      	add	r3, r1
 8000f32:	330c      	adds	r3, #12
 8000f34:	4602      	mov	r2, r0
 8000f36:	701a      	strb	r2, [r3, #0]
				if(SCH_tasks_G [Index].Period ) {
 8000f38:	79fa      	ldrb	r2, [r7, #7]
 8000f3a:	491e      	ldr	r1, [pc, #120]	; (8000fb4 <SCH_Update+0xdc>)
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	440b      	add	r3, r1
 8000f46:	3308      	adds	r3, #8
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d025      	beq.n	8000f9a <SCH_Update+0xc2>
					// Schedule periodic tasks to run again
					SCH_tasks_G [Index].Delay = SCH_tasks_G[Index].Period ;
 8000f4e:	79f9      	ldrb	r1, [r7, #7]
 8000f50:	79fa      	ldrb	r2, [r7, #7]
 8000f52:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <SCH_Update+0xdc>)
 8000f54:	460b      	mov	r3, r1
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	440b      	add	r3, r1
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4403      	add	r3, r0
 8000f5e:	3308      	adds	r3, #8
 8000f60:	6819      	ldr	r1, [r3, #0]
 8000f62:	4814      	ldr	r0, [pc, #80]	; (8000fb4 <SCH_Update+0xdc>)
 8000f64:	4613      	mov	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4403      	add	r3, r0
 8000f6e:	3304      	adds	r3, #4
 8000f70:	6019      	str	r1, [r3, #0]
 8000f72:	e012      	b.n	8000f9a <SCH_Update+0xc2>
				}
			}else{
				// Not yet ready to run : just decrement the delay
				SCH_tasks_G [Index].Delay -= 1;
 8000f74:	79fa      	ldrb	r2, [r7, #7]
 8000f76:	490f      	ldr	r1, [pc, #60]	; (8000fb4 <SCH_Update+0xdc>)
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	440b      	add	r3, r1
 8000f82:	3304      	adds	r3, #4
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	79fa      	ldrb	r2, [r7, #7]
 8000f88:	1e59      	subs	r1, r3, #1
 8000f8a:	480a      	ldr	r0, [pc, #40]	; (8000fb4 <SCH_Update+0xdc>)
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4403      	add	r3, r0
 8000f96:	3304      	adds	r3, #4
 8000f98:	6019      	str	r1, [r3, #0]
	for( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2b27      	cmp	r3, #39	; 0x27
 8000fa4:	d99e      	bls.n	8000ee4 <SCH_Update+0xc>
//		}else{
//			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
//			SCH_tasks_G[i].RunMe+=1;
//		}
//	}
}
 8000fa6:	bf00      	nop
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	2000021c 	.word	0x2000021c

08000fb8 <setTimer0>:
int timer3_flag = 0;
int timer3_counter = 0;
int timer4_flag = 0;
int timer4_counter = 0;

void setTimer0(int duration) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE ;
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <setTimer0+0x28>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fca:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <setTimer0+0x2c>)
 8000fcc:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <setTimer0+0x30>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	2000003c 	.word	0x2000003c
 8000fe4:	20000118 	.word	0x20000118
 8000fe8:	20000114 	.word	0x20000114

08000fec <setTimer1>:
void setTimer1(int duration){
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE ;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <setTimer1+0x28>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ffe:	4a06      	ldr	r2, [pc, #24]	; (8001018 <setTimer1+0x2c>)
 8001000:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <setTimer1+0x30>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	2000003c 	.word	0x2000003c
 8001018:	20000120 	.word	0x20000120
 800101c:	2000011c 	.word	0x2000011c

08001020 <setTimer2>:
void setTimer2(int duration){
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE ;
 8001028:	4b07      	ldr	r3, [pc, #28]	; (8001048 <setTimer2+0x28>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001032:	4a06      	ldr	r2, [pc, #24]	; (800104c <setTimer2+0x2c>)
 8001034:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <setTimer2+0x30>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	2000003c 	.word	0x2000003c
 800104c:	20000128 	.word	0x20000128
 8001050:	20000124 	.word	0x20000124

08001054 <setTimer3>:
void setTimer3(int duration) {
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE ;
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <setTimer3+0x28>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	fb92 f3f3 	sdiv	r3, r2, r3
 8001066:	4a06      	ldr	r2, [pc, #24]	; (8001080 <setTimer3+0x2c>)
 8001068:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <setTimer3+0x30>)
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	2000003c 	.word	0x2000003c
 8001080:	20000130 	.word	0x20000130
 8001084:	2000012c 	.word	0x2000012c

08001088 <setTimer4>:
void setTimer4(int duration) {
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE ;
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <setTimer4+0x28>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	fb92 f3f3 	sdiv	r3, r2, r3
 800109a:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <setTimer4+0x2c>)
 800109c:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <setTimer4+0x30>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	2000003c 	.word	0x2000003c
 80010b4:	20000138 	.word	0x20000138
 80010b8:	20000134 	.word	0x20000134

080010bc <timerRun>:


void timerRun(){
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 80010c0:	4b29      	ldr	r3, [pc, #164]	; (8001168 <timerRun+0xac>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	dd0b      	ble.n	80010e0 <timerRun+0x24>
		timer0_counter--;
 80010c8:	4b27      	ldr	r3, [pc, #156]	; (8001168 <timerRun+0xac>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	4a26      	ldr	r2, [pc, #152]	; (8001168 <timerRun+0xac>)
 80010d0:	6013      	str	r3, [r2, #0]
		if(timer0_counter <= 0){
 80010d2:	4b25      	ldr	r3, [pc, #148]	; (8001168 <timerRun+0xac>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	dc02      	bgt.n	80010e0 <timerRun+0x24>
			timer0_flag = 1;
 80010da:	4b24      	ldr	r3, [pc, #144]	; (800116c <timerRun+0xb0>)
 80010dc:	2201      	movs	r2, #1
 80010de:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer1_counter > 0){
 80010e0:	4b23      	ldr	r3, [pc, #140]	; (8001170 <timerRun+0xb4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	dd0b      	ble.n	8001100 <timerRun+0x44>
		timer1_counter--;
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <timerRun+0xb4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	4a20      	ldr	r2, [pc, #128]	; (8001170 <timerRun+0xb4>)
 80010f0:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <timerRun+0xb4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	dc02      	bgt.n	8001100 <timerRun+0x44>
			timer1_flag = 1;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <timerRun+0xb8>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <timerRun+0xbc>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	dd0b      	ble.n	8001120 <timerRun+0x64>
		timer2_counter--;
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <timerRun+0xbc>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3b01      	subs	r3, #1
 800110e:	4a1a      	ldr	r2, [pc, #104]	; (8001178 <timerRun+0xbc>)
 8001110:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <timerRun+0xbc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	dc02      	bgt.n	8001120 <timerRun+0x64>
			timer2_flag = 1;
 800111a:	4b18      	ldr	r3, [pc, #96]	; (800117c <timerRun+0xc0>)
 800111c:	2201      	movs	r2, #1
 800111e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <timerRun+0xc4>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	dd0b      	ble.n	8001140 <timerRun+0x84>
		timer3_counter--;
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <timerRun+0xc4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3b01      	subs	r3, #1
 800112e:	4a14      	ldr	r2, [pc, #80]	; (8001180 <timerRun+0xc4>)
 8001130:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <timerRun+0xc4>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dc02      	bgt.n	8001140 <timerRun+0x84>
			timer3_flag = 1;
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <timerRun+0xc8>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <timerRun+0xcc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	dd0b      	ble.n	8001160 <timerRun+0xa4>
		timer4_counter--;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <timerRun+0xcc>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3b01      	subs	r3, #1
 800114e:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <timerRun+0xcc>)
 8001150:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <timerRun+0xcc>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	dc02      	bgt.n	8001160 <timerRun+0xa4>
			timer4_flag = 1;
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <timerRun+0xd0>)
 800115c:	2201      	movs	r2, #1
 800115e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	20000118 	.word	0x20000118
 800116c:	20000114 	.word	0x20000114
 8001170:	20000120 	.word	0x20000120
 8001174:	2000011c 	.word	0x2000011c
 8001178:	20000128 	.word	0x20000128
 800117c:	20000124 	.word	0x20000124
 8001180:	20000130 	.word	0x20000130
 8001184:	2000012c 	.word	0x2000012c
 8001188:	20000138 	.word	0x20000138
 800118c:	20000134 	.word	0x20000134

08001190 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_MspInit+0x5c>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	4a14      	ldr	r2, [pc, #80]	; (80011ec <HAL_MspInit+0x5c>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6193      	str	r3, [r2, #24]
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_MspInit+0x5c>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <HAL_MspInit+0x5c>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <HAL_MspInit+0x5c>)
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b8:	61d3      	str	r3, [r2, #28]
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_MspInit+0x5c>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_MspInit+0x60>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_MspInit+0x60>)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40010000 	.word	0x40010000

080011f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001204:	d114      	bne.n	8001230 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_TIM_Base_MspInit+0x68>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	4a14      	ldr	r2, [pc, #80]	; (800125c <HAL_TIM_Base_MspInit+0x68>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	61d3      	str	r3, [r2, #28]
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_TIM_Base_MspInit+0x68>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	201c      	movs	r0, #28
 8001224:	f000 fa79 	bl	800171a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001228:	201c      	movs	r0, #28
 800122a:	f000 fa92 	bl	8001752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800122e:	e010      	b.n	8001252 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <HAL_TIM_Base_MspInit+0x6c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d10b      	bne.n	8001252 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_TIM_Base_MspInit+0x68>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_TIM_Base_MspInit+0x68>)
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	61d3      	str	r3, [r2, #28]
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_TIM_Base_MspInit+0x68>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000
 8001260:	40000400 	.word	0x40000400

08001264 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <HAL_TIM_MspPostInit+0x58>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d117      	bne.n	80012b4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_TIM_MspPostInit+0x5c>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <HAL_TIM_MspPostInit+0x5c>)
 800128a:	f043 0304 	orr.w	r3, r3, #4
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_TIM_MspPostInit+0x5c>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800129c:	2340      	movs	r3, #64	; 0x40
 800129e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2302      	movs	r3, #2
 80012a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	4619      	mov	r1, r3
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <HAL_TIM_MspPostInit+0x60>)
 80012b0:	f000 fb1a 	bl	80018e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012b4:	bf00      	nop
 80012b6:	3720      	adds	r7, #32
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40000400 	.word	0x40000400
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010800 	.word	0x40010800

080012c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <HAL_UART_MspInit+0x98>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d137      	bne.n	8001358 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012e8:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <HAL_UART_MspInit+0x9c>)
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <HAL_UART_MspInit+0x9c>)
 80012ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f2:	61d3      	str	r3, [r2, #28]
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <HAL_UART_MspInit+0x9c>)
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <HAL_UART_MspInit+0x9c>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a17      	ldr	r2, [pc, #92]	; (8001364 <HAL_UART_MspInit+0x9c>)
 8001306:	f043 0304 	orr.w	r3, r3, #4
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_UART_MspInit+0x9c>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001318:	2304      	movs	r3, #4
 800131a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	4619      	mov	r1, r3
 800132a:	480f      	ldr	r0, [pc, #60]	; (8001368 <HAL_UART_MspInit+0xa0>)
 800132c:	f000 fadc 	bl	80018e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001330:	2308      	movs	r3, #8
 8001332:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	4619      	mov	r1, r3
 8001342:	4809      	ldr	r0, [pc, #36]	; (8001368 <HAL_UART_MspInit+0xa0>)
 8001344:	f000 fad0 	bl	80018e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001348:	2200      	movs	r2, #0
 800134a:	2100      	movs	r1, #0
 800134c:	2026      	movs	r0, #38	; 0x26
 800134e:	f000 f9e4 	bl	800171a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001352:	2026      	movs	r0, #38	; 0x26
 8001354:	f000 f9fd 	bl	8001752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001358:	bf00      	nop
 800135a:	3720      	adds	r7, #32
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40004400 	.word	0x40004400
 8001364:	40021000 	.word	0x40021000
 8001368:	40010800 	.word	0x40010800

0800136c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <NMI_Handler+0x4>

08001372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <HardFault_Handler+0x4>

08001378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <MemManage_Handler+0x4>

0800137e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <BusFault_Handler+0x4>

08001384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <UsageFault_Handler+0x4>

0800138a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr

080013a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b2:	f000 f8bf 	bl	8001534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <TIM2_IRQHandler+0x10>)
 80013c2:	f001 f959 	bl	8002678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000190 	.word	0x20000190

080013d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <USART2_IRQHandler+0x10>)
 80013d6:	f002 f88f 	bl	80034f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200001d8 	.word	0x200001d8

080013e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ec:	4a14      	ldr	r2, [pc, #80]	; (8001440 <_sbrk+0x5c>)
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <_sbrk+0x60>)
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <_sbrk+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <_sbrk+0x64>)
 8001402:	4a12      	ldr	r2, [pc, #72]	; (800144c <_sbrk+0x68>)
 8001404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <_sbrk+0x64>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	429a      	cmp	r2, r3
 8001412:	d207      	bcs.n	8001424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001414:	f002 fc68 	bl	8003ce8 <__errno>
 8001418:	4603      	mov	r3, r0
 800141a:	220c      	movs	r2, #12
 800141c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	e009      	b.n	8001438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800142a:	4b07      	ldr	r3, [pc, #28]	; (8001448 <_sbrk+0x64>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	4a05      	ldr	r2, [pc, #20]	; (8001448 <_sbrk+0x64>)
 8001434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001436:	68fb      	ldr	r3, [r7, #12]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20005000 	.word	0x20005000
 8001444:	00000400 	.word	0x00000400
 8001448:	2000013c 	.word	0x2000013c
 800144c:	20000550 	.word	0x20000550

08001450 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800145c:	480c      	ldr	r0, [pc, #48]	; (8001490 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800145e:	490d      	ldr	r1, [pc, #52]	; (8001494 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001460:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001474:	4c0a      	ldr	r4, [pc, #40]	; (80014a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001482:	f7ff ffe5 	bl	8001450 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001486:	f002 fc35 	bl	8003cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800148a:	f7ff fb51 	bl	8000b30 <main>
  bx lr
 800148e:	4770      	bx	lr
  ldr r0, =_sdata
 8001490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001494:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001498:	08004648 	.word	0x08004648
  ldr r2, =_sbss
 800149c:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 80014a0:	20000550 	.word	0x20000550

080014a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014a4:	e7fe      	b.n	80014a4 <ADC1_2_IRQHandler>
	...

080014a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_Init+0x28>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_Init+0x28>)
 80014b2:	f043 0310 	orr.w	r3, r3, #16
 80014b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b8:	2003      	movs	r0, #3
 80014ba:	f000 f923 	bl	8001704 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014be:	200f      	movs	r0, #15
 80014c0:	f000 f808 	bl	80014d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c4:	f7ff fe64 	bl	8001190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40022000 	.word	0x40022000

080014d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_InitTick+0x54>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_InitTick+0x58>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f93b 	bl	800176e <HAL_SYSTICK_Config>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e00e      	b.n	8001520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b0f      	cmp	r3, #15
 8001506:	d80a      	bhi.n	800151e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001508:	2200      	movs	r2, #0
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f000 f903 	bl	800171a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001514:	4a06      	ldr	r2, [pc, #24]	; (8001530 <HAL_InitTick+0x5c>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	e000      	b.n	8001520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	2000004c 	.word	0x2000004c
 800152c:	20000054 	.word	0x20000054
 8001530:	20000050 	.word	0x20000050

08001534 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_IncTick+0x1c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_IncTick+0x20>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	4a03      	ldr	r2, [pc, #12]	; (8001554 <HAL_IncTick+0x20>)
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	20000054 	.word	0x20000054
 8001554:	2000053c 	.word	0x2000053c

08001558 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return uwTick;
 800155c:	4b02      	ldr	r3, [pc, #8]	; (8001568 <HAL_GetTick+0x10>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	2000053c 	.word	0x2000053c

0800156c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001588:	4013      	ands	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159e:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	60d3      	str	r3, [r2, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <__NVIC_GetPriorityGrouping+0x18>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	f003 0307 	and.w	r3, r3, #7
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db0b      	blt.n	80015fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	f003 021f 	and.w	r2, r3, #31
 80015e8:	4906      	ldr	r1, [pc, #24]	; (8001604 <__NVIC_EnableIRQ+0x34>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	2001      	movs	r0, #1
 80015f2:	fa00 f202 	lsl.w	r2, r0, r2
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	e000e100 	.word	0xe000e100

08001608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	2b00      	cmp	r3, #0
 800161a:	db0a      	blt.n	8001632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	490c      	ldr	r1, [pc, #48]	; (8001654 <__NVIC_SetPriority+0x4c>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	0112      	lsls	r2, r2, #4
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	440b      	add	r3, r1
 800162c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001630:	e00a      	b.n	8001648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4908      	ldr	r1, [pc, #32]	; (8001658 <__NVIC_SetPriority+0x50>)
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	3b04      	subs	r3, #4
 8001640:	0112      	lsls	r2, r2, #4
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	440b      	add	r3, r1
 8001646:	761a      	strb	r2, [r3, #24]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000e100 	.word	0xe000e100
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	; 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f1c3 0307 	rsb	r3, r3, #7
 8001676:	2b04      	cmp	r3, #4
 8001678:	bf28      	it	cs
 800167a:	2304      	movcs	r3, #4
 800167c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3304      	adds	r3, #4
 8001682:	2b06      	cmp	r3, #6
 8001684:	d902      	bls.n	800168c <NVIC_EncodePriority+0x30>
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3b03      	subs	r3, #3
 800168a:	e000      	b.n	800168e <NVIC_EncodePriority+0x32>
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	f04f 32ff 	mov.w	r2, #4294967295
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43da      	mvns	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	401a      	ands	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	43d9      	mvns	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	4313      	orrs	r3, r2
         );
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3724      	adds	r7, #36	; 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d0:	d301      	bcc.n	80016d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00f      	b.n	80016f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d6:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <SysTick_Config+0x40>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016de:	210f      	movs	r1, #15
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	f7ff ff90 	bl	8001608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <SysTick_Config+0x40>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <SysTick_Config+0x40>)
 80016f0:	2207      	movs	r2, #7
 80016f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	e000e010 	.word	0xe000e010

08001704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ff2d 	bl	800156c <__NVIC_SetPriorityGrouping>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800171a:	b580      	push	{r7, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800172c:	f7ff ff42 	bl	80015b4 <__NVIC_GetPriorityGrouping>
 8001730:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	68b9      	ldr	r1, [r7, #8]
 8001736:	6978      	ldr	r0, [r7, #20]
 8001738:	f7ff ff90 	bl	800165c <NVIC_EncodePriority>
 800173c:	4602      	mov	r2, r0
 800173e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff5f 	bl	8001608 <__NVIC_SetPriority>
}
 800174a:	bf00      	nop
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800175c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff35 	bl	80015d0 <__NVIC_EnableIRQ>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ffa2 	bl	80016c0 <SysTick_Config>
 800177c:	4603      	mov	r3, r0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001786:	b480      	push	{r7}
 8001788:	b085      	sub	sp, #20
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001798:	2b02      	cmp	r3, #2
 800179a:	d008      	beq.n	80017ae <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2204      	movs	r2, #4
 80017a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e020      	b.n	80017f0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 020e 	bic.w	r2, r2, #14
 80017bc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0201 	bic.w	r2, r2, #1
 80017cc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d6:	2101      	movs	r1, #1
 80017d8:	fa01 f202 	lsl.w	r2, r1, r2
 80017dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
	...

080017fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800180e:	2b02      	cmp	r3, #2
 8001810:	d005      	beq.n	800181e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2204      	movs	r2, #4
 8001816:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	e051      	b.n	80018c2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 020e 	bic.w	r2, r2, #14
 800182c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0201 	bic.w	r2, r2, #1
 800183c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a22      	ldr	r2, [pc, #136]	; (80018cc <HAL_DMA_Abort_IT+0xd0>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d029      	beq.n	800189c <HAL_DMA_Abort_IT+0xa0>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a20      	ldr	r2, [pc, #128]	; (80018d0 <HAL_DMA_Abort_IT+0xd4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d022      	beq.n	8001898 <HAL_DMA_Abort_IT+0x9c>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a1f      	ldr	r2, [pc, #124]	; (80018d4 <HAL_DMA_Abort_IT+0xd8>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d01a      	beq.n	8001892 <HAL_DMA_Abort_IT+0x96>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <HAL_DMA_Abort_IT+0xdc>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d012      	beq.n	800188c <HAL_DMA_Abort_IT+0x90>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a1c      	ldr	r2, [pc, #112]	; (80018dc <HAL_DMA_Abort_IT+0xe0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d00a      	beq.n	8001886 <HAL_DMA_Abort_IT+0x8a>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a1a      	ldr	r2, [pc, #104]	; (80018e0 <HAL_DMA_Abort_IT+0xe4>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d102      	bne.n	8001880 <HAL_DMA_Abort_IT+0x84>
 800187a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800187e:	e00e      	b.n	800189e <HAL_DMA_Abort_IT+0xa2>
 8001880:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001884:	e00b      	b.n	800189e <HAL_DMA_Abort_IT+0xa2>
 8001886:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800188a:	e008      	b.n	800189e <HAL_DMA_Abort_IT+0xa2>
 800188c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001890:	e005      	b.n	800189e <HAL_DMA_Abort_IT+0xa2>
 8001892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001896:	e002      	b.n	800189e <HAL_DMA_Abort_IT+0xa2>
 8001898:	2310      	movs	r3, #16
 800189a:	e000      	b.n	800189e <HAL_DMA_Abort_IT+0xa2>
 800189c:	2301      	movs	r3, #1
 800189e:	4a11      	ldr	r2, [pc, #68]	; (80018e4 <HAL_DMA_Abort_IT+0xe8>)
 80018a0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	4798      	blx	r3
    } 
  }
  return status;
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40020008 	.word	0x40020008
 80018d0:	4002001c 	.word	0x4002001c
 80018d4:	40020030 	.word	0x40020030
 80018d8:	40020044 	.word	0x40020044
 80018dc:	40020058 	.word	0x40020058
 80018e0:	4002006c 	.word	0x4002006c
 80018e4:	40020000 	.word	0x40020000

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b08b      	sub	sp, #44	; 0x2c
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fa:	e169      	b.n	8001bd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018fc:	2201      	movs	r2, #1
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	429a      	cmp	r2, r3
 8001916:	f040 8158 	bne.w	8001bca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	4a9a      	ldr	r2, [pc, #616]	; (8001b88 <HAL_GPIO_Init+0x2a0>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d05e      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 8001924:	4a98      	ldr	r2, [pc, #608]	; (8001b88 <HAL_GPIO_Init+0x2a0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d875      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 800192a:	4a98      	ldr	r2, [pc, #608]	; (8001b8c <HAL_GPIO_Init+0x2a4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d058      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 8001930:	4a96      	ldr	r2, [pc, #600]	; (8001b8c <HAL_GPIO_Init+0x2a4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d86f      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 8001936:	4a96      	ldr	r2, [pc, #600]	; (8001b90 <HAL_GPIO_Init+0x2a8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d052      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 800193c:	4a94      	ldr	r2, [pc, #592]	; (8001b90 <HAL_GPIO_Init+0x2a8>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d869      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 8001942:	4a94      	ldr	r2, [pc, #592]	; (8001b94 <HAL_GPIO_Init+0x2ac>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d04c      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 8001948:	4a92      	ldr	r2, [pc, #584]	; (8001b94 <HAL_GPIO_Init+0x2ac>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d863      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 800194e:	4a92      	ldr	r2, [pc, #584]	; (8001b98 <HAL_GPIO_Init+0x2b0>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d046      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 8001954:	4a90      	ldr	r2, [pc, #576]	; (8001b98 <HAL_GPIO_Init+0x2b0>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d85d      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 800195a:	2b12      	cmp	r3, #18
 800195c:	d82a      	bhi.n	80019b4 <HAL_GPIO_Init+0xcc>
 800195e:	2b12      	cmp	r3, #18
 8001960:	d859      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 8001962:	a201      	add	r2, pc, #4	; (adr r2, 8001968 <HAL_GPIO_Init+0x80>)
 8001964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001968:	080019e3 	.word	0x080019e3
 800196c:	080019bd 	.word	0x080019bd
 8001970:	080019cf 	.word	0x080019cf
 8001974:	08001a11 	.word	0x08001a11
 8001978:	08001a17 	.word	0x08001a17
 800197c:	08001a17 	.word	0x08001a17
 8001980:	08001a17 	.word	0x08001a17
 8001984:	08001a17 	.word	0x08001a17
 8001988:	08001a17 	.word	0x08001a17
 800198c:	08001a17 	.word	0x08001a17
 8001990:	08001a17 	.word	0x08001a17
 8001994:	08001a17 	.word	0x08001a17
 8001998:	08001a17 	.word	0x08001a17
 800199c:	08001a17 	.word	0x08001a17
 80019a0:	08001a17 	.word	0x08001a17
 80019a4:	08001a17 	.word	0x08001a17
 80019a8:	08001a17 	.word	0x08001a17
 80019ac:	080019c5 	.word	0x080019c5
 80019b0:	080019d9 	.word	0x080019d9
 80019b4:	4a79      	ldr	r2, [pc, #484]	; (8001b9c <HAL_GPIO_Init+0x2b4>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d013      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ba:	e02c      	b.n	8001a16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	623b      	str	r3, [r7, #32]
          break;
 80019c2:	e029      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	3304      	adds	r3, #4
 80019ca:	623b      	str	r3, [r7, #32]
          break;
 80019cc:	e024      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	3308      	adds	r3, #8
 80019d4:	623b      	str	r3, [r7, #32]
          break;
 80019d6:	e01f      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	330c      	adds	r3, #12
 80019de:	623b      	str	r3, [r7, #32]
          break;
 80019e0:	e01a      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d102      	bne.n	80019f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ea:	2304      	movs	r3, #4
 80019ec:	623b      	str	r3, [r7, #32]
          break;
 80019ee:	e013      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d105      	bne.n	8001a04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f8:	2308      	movs	r3, #8
 80019fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69fa      	ldr	r2, [r7, #28]
 8001a00:	611a      	str	r2, [r3, #16]
          break;
 8001a02:	e009      	b.n	8001a18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a04:	2308      	movs	r3, #8
 8001a06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	615a      	str	r2, [r3, #20]
          break;
 8001a0e:	e003      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
          break;
 8001a14:	e000      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          break;
 8001a16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2bff      	cmp	r3, #255	; 0xff
 8001a1c:	d801      	bhi.n	8001a22 <HAL_GPIO_Init+0x13a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	e001      	b.n	8001a26 <HAL_GPIO_Init+0x13e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3304      	adds	r3, #4
 8001a26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2bff      	cmp	r3, #255	; 0xff
 8001a2c:	d802      	bhi.n	8001a34 <HAL_GPIO_Init+0x14c>
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	e002      	b.n	8001a3a <HAL_GPIO_Init+0x152>
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	3b08      	subs	r3, #8
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	210f      	movs	r1, #15
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	6a39      	ldr	r1, [r7, #32]
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	431a      	orrs	r2, r3
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 80b1 	beq.w	8001bca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a68:	4b4d      	ldr	r3, [pc, #308]	; (8001ba0 <HAL_GPIO_Init+0x2b8>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	4a4c      	ldr	r2, [pc, #304]	; (8001ba0 <HAL_GPIO_Init+0x2b8>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6193      	str	r3, [r2, #24]
 8001a74:	4b4a      	ldr	r3, [pc, #296]	; (8001ba0 <HAL_GPIO_Init+0x2b8>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a80:	4a48      	ldr	r2, [pc, #288]	; (8001ba4 <HAL_GPIO_Init+0x2bc>)
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	089b      	lsrs	r3, r3, #2
 8001a86:	3302      	adds	r3, #2
 8001a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	220f      	movs	r2, #15
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a40      	ldr	r2, [pc, #256]	; (8001ba8 <HAL_GPIO_Init+0x2c0>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d013      	beq.n	8001ad4 <HAL_GPIO_Init+0x1ec>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a3f      	ldr	r2, [pc, #252]	; (8001bac <HAL_GPIO_Init+0x2c4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d00d      	beq.n	8001ad0 <HAL_GPIO_Init+0x1e8>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a3e      	ldr	r2, [pc, #248]	; (8001bb0 <HAL_GPIO_Init+0x2c8>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d007      	beq.n	8001acc <HAL_GPIO_Init+0x1e4>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a3d      	ldr	r2, [pc, #244]	; (8001bb4 <HAL_GPIO_Init+0x2cc>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d101      	bne.n	8001ac8 <HAL_GPIO_Init+0x1e0>
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e006      	b.n	8001ad6 <HAL_GPIO_Init+0x1ee>
 8001ac8:	2304      	movs	r3, #4
 8001aca:	e004      	b.n	8001ad6 <HAL_GPIO_Init+0x1ee>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e002      	b.n	8001ad6 <HAL_GPIO_Init+0x1ee>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <HAL_GPIO_Init+0x1ee>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad8:	f002 0203 	and.w	r2, r2, #3
 8001adc:	0092      	lsls	r2, r2, #2
 8001ade:	4093      	lsls	r3, r2
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ae6:	492f      	ldr	r1, [pc, #188]	; (8001ba4 <HAL_GPIO_Init+0x2bc>)
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	089b      	lsrs	r3, r3, #2
 8001aec:	3302      	adds	r3, #2
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b00:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	492c      	ldr	r1, [pc, #176]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b0e:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	4928      	ldr	r1, [pc, #160]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d006      	beq.n	8001b36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b28:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	4922      	ldr	r1, [pc, #136]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b36:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	491e      	ldr	r1, [pc, #120]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d006      	beq.n	8001b5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	4918      	ldr	r1, [pc, #96]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]
 8001b5c:	e006      	b.n	8001b6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b5e:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	4914      	ldr	r1, [pc, #80]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d021      	beq.n	8001bbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	490e      	ldr	r1, [pc, #56]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	60cb      	str	r3, [r1, #12]
 8001b84:	e021      	b.n	8001bca <HAL_GPIO_Init+0x2e2>
 8001b86:	bf00      	nop
 8001b88:	10320000 	.word	0x10320000
 8001b8c:	10310000 	.word	0x10310000
 8001b90:	10220000 	.word	0x10220000
 8001b94:	10210000 	.word	0x10210000
 8001b98:	10120000 	.word	0x10120000
 8001b9c:	10110000 	.word	0x10110000
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	40010800 	.word	0x40010800
 8001bac:	40010c00 	.word	0x40010c00
 8001bb0:	40011000 	.word	0x40011000
 8001bb4:	40011400 	.word	0x40011400
 8001bb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_GPIO_Init+0x304>)
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	4909      	ldr	r1, [pc, #36]	; (8001bec <HAL_GPIO_Init+0x304>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	3301      	adds	r3, #1
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f47f ae8e 	bne.w	80018fc <HAL_GPIO_Init+0x14>
  }
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	372c      	adds	r7, #44	; 0x2c
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	40010400 	.word	0x40010400

08001bf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	e001      	b.n	8001c12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr

08001c1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	460b      	mov	r3, r1
 8001c28:	807b      	strh	r3, [r7, #2]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c2e:	787b      	ldrb	r3, [r7, #1]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c34:	887a      	ldrh	r2, [r7, #2]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c3a:	e003      	b.n	8001c44 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c3c:	887b      	ldrh	r3, [r7, #2]
 8001c3e:	041a      	lsls	r2, r3, #16
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	611a      	str	r2, [r3, #16]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
	...

08001c50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e26c      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8087 	beq.w	8001d7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c70:	4b92      	ldr	r3, [pc, #584]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d00c      	beq.n	8001c96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c7c:	4b8f      	ldr	r3, [pc, #572]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d112      	bne.n	8001cae <HAL_RCC_OscConfig+0x5e>
 8001c88:	4b8c      	ldr	r3, [pc, #560]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c94:	d10b      	bne.n	8001cae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c96:	4b89      	ldr	r3, [pc, #548]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d06c      	beq.n	8001d7c <HAL_RCC_OscConfig+0x12c>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d168      	bne.n	8001d7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e246      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x76>
 8001cb8:	4b80      	ldr	r3, [pc, #512]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a7f      	ldr	r2, [pc, #508]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	e02e      	b.n	8001d24 <HAL_RCC_OscConfig+0xd4>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x98>
 8001cce:	4b7b      	ldr	r3, [pc, #492]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a7a      	ldr	r2, [pc, #488]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	4b78      	ldr	r3, [pc, #480]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a77      	ldr	r2, [pc, #476]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e01d      	b.n	8001d24 <HAL_RCC_OscConfig+0xd4>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0xbc>
 8001cf2:	4b72      	ldr	r3, [pc, #456]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a71      	ldr	r2, [pc, #452]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	4b6f      	ldr	r3, [pc, #444]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a6e      	ldr	r2, [pc, #440]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e00b      	b.n	8001d24 <HAL_RCC_OscConfig+0xd4>
 8001d0c:	4b6b      	ldr	r3, [pc, #428]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a6a      	ldr	r2, [pc, #424]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b68      	ldr	r3, [pc, #416]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a67      	ldr	r2, [pc, #412]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d013      	beq.n	8001d54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2c:	f7ff fc14 	bl	8001558 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d34:	f7ff fc10 	bl	8001558 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	; 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e1fa      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	4b5d      	ldr	r3, [pc, #372]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0xe4>
 8001d52:	e014      	b.n	8001d7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff fc00 	bl	8001558 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff fbfc 	bl	8001558 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e1e6      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6e:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x10c>
 8001d7a:	e000      	b.n	8001d7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d063      	beq.n	8001e52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d8a:	4b4c      	ldr	r3, [pc, #304]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00b      	beq.n	8001dae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d96:	4b49      	ldr	r3, [pc, #292]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d11c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x18c>
 8001da2:	4b46      	ldr	r3, [pc, #280]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d116      	bne.n	8001ddc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dae:	4b43      	ldr	r3, [pc, #268]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x176>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d001      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e1ba      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4939      	ldr	r1, [pc, #228]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dda:	e03a      	b.n	8001e52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d020      	beq.n	8001e26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de4:	4b36      	ldr	r3, [pc, #216]	; (8001ec0 <HAL_RCC_OscConfig+0x270>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7ff fbb5 	bl	8001558 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df2:	f7ff fbb1 	bl	8001558 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e19b      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e04:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e10:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	4927      	ldr	r1, [pc, #156]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	600b      	str	r3, [r1, #0]
 8001e24:	e015      	b.n	8001e52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e26:	4b26      	ldr	r3, [pc, #152]	; (8001ec0 <HAL_RCC_OscConfig+0x270>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fb94 	bl	8001558 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e34:	f7ff fb90 	bl	8001558 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e17a      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e46:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d03a      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d019      	beq.n	8001e9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e66:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x274>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6c:	f7ff fb74 	bl	8001558 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e74:	f7ff fb70 	bl	8001558 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e15a      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e86:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <HAL_RCC_OscConfig+0x26c>)
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e92:	2001      	movs	r0, #1
 8001e94:	f000 fad8 	bl	8002448 <RCC_Delay>
 8001e98:	e01c      	b.n	8001ed4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x274>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea0:	f7ff fb5a 	bl	8001558 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea6:	e00f      	b.n	8001ec8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea8:	f7ff fb56 	bl	8001558 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d908      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e140      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	42420000 	.word	0x42420000
 8001ec4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec8:	4b9e      	ldr	r3, [pc, #632]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1e9      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80a6 	beq.w	800202e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee6:	4b97      	ldr	r3, [pc, #604]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10d      	bne.n	8001f0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	4b94      	ldr	r3, [pc, #592]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4a93      	ldr	r2, [pc, #588]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efc:	61d3      	str	r3, [r2, #28]
 8001efe:	4b91      	ldr	r3, [pc, #580]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0e:	4b8e      	ldr	r3, [pc, #568]	; (8002148 <HAL_RCC_OscConfig+0x4f8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d118      	bne.n	8001f4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f1a:	4b8b      	ldr	r3, [pc, #556]	; (8002148 <HAL_RCC_OscConfig+0x4f8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a8a      	ldr	r2, [pc, #552]	; (8002148 <HAL_RCC_OscConfig+0x4f8>)
 8001f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f26:	f7ff fb17 	bl	8001558 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2e:	f7ff fb13 	bl	8001558 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b64      	cmp	r3, #100	; 0x64
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e0fd      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f40:	4b81      	ldr	r3, [pc, #516]	; (8002148 <HAL_RCC_OscConfig+0x4f8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d106      	bne.n	8001f62 <HAL_RCC_OscConfig+0x312>
 8001f54:	4b7b      	ldr	r3, [pc, #492]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	4a7a      	ldr	r2, [pc, #488]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6213      	str	r3, [r2, #32]
 8001f60:	e02d      	b.n	8001fbe <HAL_RCC_OscConfig+0x36e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x334>
 8001f6a:	4b76      	ldr	r3, [pc, #472]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a75      	ldr	r2, [pc, #468]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	f023 0301 	bic.w	r3, r3, #1
 8001f74:	6213      	str	r3, [r2, #32]
 8001f76:	4b73      	ldr	r3, [pc, #460]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	4a72      	ldr	r2, [pc, #456]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	f023 0304 	bic.w	r3, r3, #4
 8001f80:	6213      	str	r3, [r2, #32]
 8001f82:	e01c      	b.n	8001fbe <HAL_RCC_OscConfig+0x36e>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2b05      	cmp	r3, #5
 8001f8a:	d10c      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x356>
 8001f8c:	4b6d      	ldr	r3, [pc, #436]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4a6c      	ldr	r2, [pc, #432]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	6213      	str	r3, [r2, #32]
 8001f98:	4b6a      	ldr	r3, [pc, #424]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4a69      	ldr	r2, [pc, #420]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6213      	str	r3, [r2, #32]
 8001fa4:	e00b      	b.n	8001fbe <HAL_RCC_OscConfig+0x36e>
 8001fa6:	4b67      	ldr	r3, [pc, #412]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4a66      	ldr	r2, [pc, #408]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001fac:	f023 0301 	bic.w	r3, r3, #1
 8001fb0:	6213      	str	r3, [r2, #32]
 8001fb2:	4b64      	ldr	r3, [pc, #400]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4a63      	ldr	r2, [pc, #396]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	f023 0304 	bic.w	r3, r3, #4
 8001fbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d015      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc6:	f7ff fac7 	bl	8001558 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fcc:	e00a      	b.n	8001fe4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f7ff fac3 	bl	8001558 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e0ab      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe4:	4b57      	ldr	r3, [pc, #348]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0ee      	beq.n	8001fce <HAL_RCC_OscConfig+0x37e>
 8001ff0:	e014      	b.n	800201c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff fab1 	bl	8001558 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff8:	e00a      	b.n	8002010 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffa:	f7ff faad 	bl	8001558 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	f241 3288 	movw	r2, #5000	; 0x1388
 8002008:	4293      	cmp	r3, r2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e095      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002010:	4b4c      	ldr	r3, [pc, #304]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1ee      	bne.n	8001ffa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800201c:	7dfb      	ldrb	r3, [r7, #23]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d105      	bne.n	800202e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002022:	4b48      	ldr	r3, [pc, #288]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	4a47      	ldr	r2, [pc, #284]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8002028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800202c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 8081 	beq.w	800213a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002038:	4b42      	ldr	r3, [pc, #264]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 030c 	and.w	r3, r3, #12
 8002040:	2b08      	cmp	r3, #8
 8002042:	d061      	beq.n	8002108 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	2b02      	cmp	r3, #2
 800204a:	d146      	bne.n	80020da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204c:	4b3f      	ldr	r3, [pc, #252]	; (800214c <HAL_RCC_OscConfig+0x4fc>)
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7ff fa81 	bl	8001558 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205a:	f7ff fa7d 	bl	8001558 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e067      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206c:	4b35      	ldr	r3, [pc, #212]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f0      	bne.n	800205a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002080:	d108      	bne.n	8002094 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002082:	4b30      	ldr	r3, [pc, #192]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	492d      	ldr	r1, [pc, #180]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8002090:	4313      	orrs	r3, r2
 8002092:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002094:	4b2b      	ldr	r3, [pc, #172]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a19      	ldr	r1, [r3, #32]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	430b      	orrs	r3, r1
 80020a6:	4927      	ldr	r1, [pc, #156]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ac:	4b27      	ldr	r3, [pc, #156]	; (800214c <HAL_RCC_OscConfig+0x4fc>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b2:	f7ff fa51 	bl	8001558 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ba:	f7ff fa4d 	bl	8001558 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e037      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020cc:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x46a>
 80020d8:	e02f      	b.n	800213a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020da:	4b1c      	ldr	r3, [pc, #112]	; (800214c <HAL_RCC_OscConfig+0x4fc>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff fa3a 	bl	8001558 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e8:	f7ff fa36 	bl	8001558 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e020      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x498>
 8002106:	e018      	b.n	800213a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e013      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_OscConfig+0x4f4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	429a      	cmp	r2, r3
 8002126:	d106      	bne.n	8002136 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002132:	429a      	cmp	r2, r3
 8002134:	d001      	beq.n	800213a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000
 8002148:	40007000 	.word	0x40007000
 800214c:	42420060 	.word	0x42420060

08002150 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0d0      	b.n	8002306 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002164:	4b6a      	ldr	r3, [pc, #424]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d910      	bls.n	8002194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b67      	ldr	r3, [pc, #412]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 0207 	bic.w	r2, r3, #7
 800217a:	4965      	ldr	r1, [pc, #404]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b63      	ldr	r3, [pc, #396]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d001      	beq.n	8002194 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0b8      	b.n	8002306 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d020      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021ac:	4b59      	ldr	r3, [pc, #356]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4a58      	ldr	r2, [pc, #352]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021c4:	4b53      	ldr	r3, [pc, #332]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	4a52      	ldr	r2, [pc, #328]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d0:	4b50      	ldr	r3, [pc, #320]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	494d      	ldr	r1, [pc, #308]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d040      	beq.n	8002270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d107      	bne.n	8002206 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	4b47      	ldr	r3, [pc, #284]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d115      	bne.n	800222e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e07f      	b.n	8002306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d107      	bne.n	800221e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220e:	4b41      	ldr	r3, [pc, #260]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d109      	bne.n	800222e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e073      	b.n	8002306 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221e:	4b3d      	ldr	r3, [pc, #244]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e06b      	b.n	8002306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800222e:	4b39      	ldr	r3, [pc, #228]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f023 0203 	bic.w	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4936      	ldr	r1, [pc, #216]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002240:	f7ff f98a 	bl	8001558 <HAL_GetTick>
 8002244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002246:	e00a      	b.n	800225e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002248:	f7ff f986 	bl	8001558 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f241 3288 	movw	r2, #5000	; 0x1388
 8002256:	4293      	cmp	r3, r2
 8002258:	d901      	bls.n	800225e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e053      	b.n	8002306 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225e:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 020c 	and.w	r2, r3, #12
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	429a      	cmp	r2, r3
 800226e:	d1eb      	bne.n	8002248 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002270:	4b27      	ldr	r3, [pc, #156]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d210      	bcs.n	80022a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 0207 	bic.w	r2, r3, #7
 8002286:	4922      	ldr	r1, [pc, #136]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228e:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e032      	b.n	8002306 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4916      	ldr	r1, [pc, #88]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d009      	beq.n	80022de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022ca:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	490e      	ldr	r1, [pc, #56]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022de:	f000 f821 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 80022e2:	4602      	mov	r2, r0
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	091b      	lsrs	r3, r3, #4
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	490a      	ldr	r1, [pc, #40]	; (8002318 <HAL_RCC_ClockConfig+0x1c8>)
 80022f0:	5ccb      	ldrb	r3, [r1, r3]
 80022f2:	fa22 f303 	lsr.w	r3, r2, r3
 80022f6:	4a09      	ldr	r2, [pc, #36]	; (800231c <HAL_RCC_ClockConfig+0x1cc>)
 80022f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <HAL_RCC_ClockConfig+0x1d0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff f8e8 	bl	80014d4 <HAL_InitTick>

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40022000 	.word	0x40022000
 8002314:	40021000 	.word	0x40021000
 8002318:	080045f4 	.word	0x080045f4
 800231c:	2000004c 	.word	0x2000004c
 8002320:	20000050 	.word	0x20000050

08002324 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002324:	b490      	push	{r4, r7}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800232a:	4b2a      	ldr	r3, [pc, #168]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800232c:	1d3c      	adds	r4, r7, #4
 800232e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002330:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002334:	f240 2301 	movw	r3, #513	; 0x201
 8002338:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800234e:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	2b04      	cmp	r3, #4
 800235c:	d002      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0x40>
 800235e:	2b08      	cmp	r3, #8
 8002360:	d003      	beq.n	800236a <HAL_RCC_GetSysClockFreq+0x46>
 8002362:	e02d      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002364:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002366:	623b      	str	r3, [r7, #32]
      break;
 8002368:	e02d      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	0c9b      	lsrs	r3, r3, #18
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002376:	4413      	add	r3, r2
 8002378:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800237c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d013      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002388:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	0c5b      	lsrs	r3, r3, #17
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002396:	4413      	add	r3, r2
 8002398:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800239c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	4a0e      	ldr	r2, [pc, #56]	; (80023dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a2:	fb02 f203 	mul.w	r2, r2, r3
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
 80023ae:	e004      	b.n	80023ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	4a0b      	ldr	r2, [pc, #44]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023b4:	fb02 f303 	mul.w	r3, r2, r3
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	623b      	str	r3, [r7, #32]
      break;
 80023be:	e002      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80023c2:	623b      	str	r3, [r7, #32]
      break;
 80023c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023c6:	6a3b      	ldr	r3, [r7, #32]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3728      	adds	r7, #40	; 0x28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc90      	pop	{r4, r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	080045e4 	.word	0x080045e4
 80023d8:	40021000 	.word	0x40021000
 80023dc:	007a1200 	.word	0x007a1200
 80023e0:	003d0900 	.word	0x003d0900

080023e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e8:	4b02      	ldr	r3, [pc, #8]	; (80023f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	2000004c 	.word	0x2000004c

080023f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023fc:	f7ff fff2 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 8002400:	4602      	mov	r2, r0
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	4903      	ldr	r1, [pc, #12]	; (800241c <HAL_RCC_GetPCLK1Freq+0x24>)
 800240e:	5ccb      	ldrb	r3, [r1, r3]
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002414:	4618      	mov	r0, r3
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40021000 	.word	0x40021000
 800241c:	08004604 	.word	0x08004604

08002420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002424:	f7ff ffde 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 8002428:	4602      	mov	r2, r0
 800242a:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	0adb      	lsrs	r3, r3, #11
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	4903      	ldr	r1, [pc, #12]	; (8002444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002436:	5ccb      	ldrb	r3, [r1, r3]
 8002438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800243c:	4618      	mov	r0, r3
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40021000 	.word	0x40021000
 8002444:	08004604 	.word	0x08004604

08002448 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <RCC_Delay+0x34>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <RCC_Delay+0x38>)
 8002456:	fba2 2303 	umull	r2, r3, r2, r3
 800245a:	0a5b      	lsrs	r3, r3, #9
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002464:	bf00      	nop
  }
  while (Delay --);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1e5a      	subs	r2, r3, #1
 800246a:	60fa      	str	r2, [r7, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f9      	bne.n	8002464 <RCC_Delay+0x1c>
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr
 800247c:	2000004c 	.word	0x2000004c
 8002480:	10624dd3 	.word	0x10624dd3

08002484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e041      	b.n	800251a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe fea2 	bl	80011f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3304      	adds	r3, #4
 80024c0:	4619      	mov	r1, r3
 80024c2:	4610      	mov	r0, r2
 80024c4:	f000 fb86 	bl	8002bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d001      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e03a      	b.n	80025b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a18      	ldr	r2, [pc, #96]	; (80025bc <HAL_TIM_Base_Start_IT+0x98>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d00e      	beq.n	800257c <HAL_TIM_Base_Start_IT+0x58>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002566:	d009      	beq.n	800257c <HAL_TIM_Base_Start_IT+0x58>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a14      	ldr	r2, [pc, #80]	; (80025c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d004      	beq.n	800257c <HAL_TIM_Base_Start_IT+0x58>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d111      	bne.n	80025a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b06      	cmp	r3, #6
 800258c:	d010      	beq.n	80025b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 0201 	orr.w	r2, r2, #1
 800259c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800259e:	e007      	b.n	80025b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	40012c00 	.word	0x40012c00
 80025c0:	40000400 	.word	0x40000400
 80025c4:	40000800 	.word	0x40000800

080025c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e041      	b.n	800265e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f839 	bl	8002666 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3304      	adds	r3, #4
 8002604:	4619      	mov	r1, r3
 8002606:	4610      	mov	r0, r2
 8002608:	f000 fae4 	bl	8002bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b02      	cmp	r3, #2
 800268c:	d122      	bne.n	80026d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b02      	cmp	r3, #2
 800269a:	d11b      	bne.n	80026d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f06f 0202 	mvn.w	r2, #2
 80026a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fa6f 	bl	8002b9e <HAL_TIM_IC_CaptureCallback>
 80026c0:	e005      	b.n	80026ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fa62 	bl	8002b8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 fa71 	bl	8002bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d122      	bne.n	8002728 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d11b      	bne.n	8002728 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f06f 0204 	mvn.w	r2, #4
 80026f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2202      	movs	r2, #2
 80026fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 fa45 	bl	8002b9e <HAL_TIM_IC_CaptureCallback>
 8002714:	e005      	b.n	8002722 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 fa38 	bl	8002b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fa47 	bl	8002bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b08      	cmp	r3, #8
 8002734:	d122      	bne.n	800277c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b08      	cmp	r3, #8
 8002742:	d11b      	bne.n	800277c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0208 	mvn.w	r2, #8
 800274c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2204      	movs	r2, #4
 8002752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 fa1b 	bl	8002b9e <HAL_TIM_IC_CaptureCallback>
 8002768:	e005      	b.n	8002776 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 fa0e 	bl	8002b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 fa1d 	bl	8002bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	2b10      	cmp	r3, #16
 8002788:	d122      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b10      	cmp	r3, #16
 8002796:	d11b      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0210 	mvn.w	r2, #16
 80027a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2208      	movs	r2, #8
 80027a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f9f1 	bl	8002b9e <HAL_TIM_IC_CaptureCallback>
 80027bc:	e005      	b.n	80027ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f9e4 	bl	8002b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f9f3 	bl	8002bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d10e      	bne.n	80027fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d107      	bne.n	80027fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0201 	mvn.w	r2, #1
 80027f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fe fb56 	bl	8000ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002806:	2b80      	cmp	r3, #128	; 0x80
 8002808:	d10e      	bne.n	8002828 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002814:	2b80      	cmp	r3, #128	; 0x80
 8002816:	d107      	bne.n	8002828 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fd5b 	bl	80032de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002832:	2b40      	cmp	r3, #64	; 0x40
 8002834:	d10e      	bne.n	8002854 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002840:	2b40      	cmp	r3, #64	; 0x40
 8002842:	d107      	bne.n	8002854 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800284c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f9b7 	bl	8002bc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	2b20      	cmp	r3, #32
 8002860:	d10e      	bne.n	8002880 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b20      	cmp	r3, #32
 800286e:	d107      	bne.n	8002880 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f06f 0220 	mvn.w	r2, #32
 8002878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 fd26 	bl	80032cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800289e:	2302      	movs	r3, #2
 80028a0:	e0ac      	b.n	80029fc <HAL_TIM_PWM_ConfigChannel+0x174>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b0c      	cmp	r3, #12
 80028ae:	f200 809f 	bhi.w	80029f0 <HAL_TIM_PWM_ConfigChannel+0x168>
 80028b2:	a201      	add	r2, pc, #4	; (adr r2, 80028b8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80028b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b8:	080028ed 	.word	0x080028ed
 80028bc:	080029f1 	.word	0x080029f1
 80028c0:	080029f1 	.word	0x080029f1
 80028c4:	080029f1 	.word	0x080029f1
 80028c8:	0800292d 	.word	0x0800292d
 80028cc:	080029f1 	.word	0x080029f1
 80028d0:	080029f1 	.word	0x080029f1
 80028d4:	080029f1 	.word	0x080029f1
 80028d8:	0800296f 	.word	0x0800296f
 80028dc:	080029f1 	.word	0x080029f1
 80028e0:	080029f1 	.word	0x080029f1
 80028e4:	080029f1 	.word	0x080029f1
 80028e8:	080029af 	.word	0x080029af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 f9d0 	bl	8002c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0208 	orr.w	r2, r2, #8
 8002906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699a      	ldr	r2, [r3, #24]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0204 	bic.w	r2, r2, #4
 8002916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6999      	ldr	r1, [r3, #24]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	691a      	ldr	r2, [r3, #16]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	619a      	str	r2, [r3, #24]
      break;
 800292a:	e062      	b.n	80029f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fa16 	bl	8002d64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699a      	ldr	r2, [r3, #24]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699a      	ldr	r2, [r3, #24]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6999      	ldr	r1, [r3, #24]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	021a      	lsls	r2, r3, #8
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	619a      	str	r2, [r3, #24]
      break;
 800296c:	e041      	b.n	80029f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fa5f 	bl	8002e38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	69da      	ldr	r2, [r3, #28]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0208 	orr.w	r2, r2, #8
 8002988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	69da      	ldr	r2, [r3, #28]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0204 	bic.w	r2, r2, #4
 8002998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	69d9      	ldr	r1, [r3, #28]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	61da      	str	r2, [r3, #28]
      break;
 80029ac:	e021      	b.n	80029f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 faa9 	bl	8002f0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	69da      	ldr	r2, [r3, #28]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	69da      	ldr	r2, [r3, #28]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	69d9      	ldr	r1, [r3, #28]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	021a      	lsls	r2, r3, #8
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	61da      	str	r2, [r3, #28]
      break;
 80029ee:	e000      	b.n	80029f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80029f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_TIM_ConfigClockSource+0x18>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e0b3      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x180>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a54:	d03e      	beq.n	8002ad4 <HAL_TIM_ConfigClockSource+0xd0>
 8002a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a5a:	f200 8087 	bhi.w	8002b6c <HAL_TIM_ConfigClockSource+0x168>
 8002a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a62:	f000 8085 	beq.w	8002b70 <HAL_TIM_ConfigClockSource+0x16c>
 8002a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6a:	d87f      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x168>
 8002a6c:	2b70      	cmp	r3, #112	; 0x70
 8002a6e:	d01a      	beq.n	8002aa6 <HAL_TIM_ConfigClockSource+0xa2>
 8002a70:	2b70      	cmp	r3, #112	; 0x70
 8002a72:	d87b      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x168>
 8002a74:	2b60      	cmp	r3, #96	; 0x60
 8002a76:	d050      	beq.n	8002b1a <HAL_TIM_ConfigClockSource+0x116>
 8002a78:	2b60      	cmp	r3, #96	; 0x60
 8002a7a:	d877      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x168>
 8002a7c:	2b50      	cmp	r3, #80	; 0x50
 8002a7e:	d03c      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0xf6>
 8002a80:	2b50      	cmp	r3, #80	; 0x50
 8002a82:	d873      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x168>
 8002a84:	2b40      	cmp	r3, #64	; 0x40
 8002a86:	d058      	beq.n	8002b3a <HAL_TIM_ConfigClockSource+0x136>
 8002a88:	2b40      	cmp	r3, #64	; 0x40
 8002a8a:	d86f      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x168>
 8002a8c:	2b30      	cmp	r3, #48	; 0x30
 8002a8e:	d064      	beq.n	8002b5a <HAL_TIM_ConfigClockSource+0x156>
 8002a90:	2b30      	cmp	r3, #48	; 0x30
 8002a92:	d86b      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x168>
 8002a94:	2b20      	cmp	r3, #32
 8002a96:	d060      	beq.n	8002b5a <HAL_TIM_ConfigClockSource+0x156>
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d867      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x168>
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d05c      	beq.n	8002b5a <HAL_TIM_ConfigClockSource+0x156>
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	d05a      	beq.n	8002b5a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002aa4:	e062      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6818      	ldr	r0, [r3, #0]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	6899      	ldr	r1, [r3, #8]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f000 faee 	bl	8003096 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ac8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	609a      	str	r2, [r3, #8]
      break;
 8002ad2:	e04e      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	6899      	ldr	r1, [r3, #8]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f000 fad7 	bl	8003096 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002af6:	609a      	str	r2, [r3, #8]
      break;
 8002af8:	e03b      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	6859      	ldr	r1, [r3, #4]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	461a      	mov	r2, r3
 8002b08:	f000 fa4e 	bl	8002fa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2150      	movs	r1, #80	; 0x50
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 faa5 	bl	8003062 <TIM_ITRx_SetConfig>
      break;
 8002b18:	e02b      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	6859      	ldr	r1, [r3, #4]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	461a      	mov	r2, r3
 8002b28:	f000 fa6c 	bl	8003004 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2160      	movs	r1, #96	; 0x60
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fa95 	bl	8003062 <TIM_ITRx_SetConfig>
      break;
 8002b38:	e01b      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	6859      	ldr	r1, [r3, #4]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	461a      	mov	r2, r3
 8002b48:	f000 fa2e 	bl	8002fa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2140      	movs	r1, #64	; 0x40
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fa85 	bl	8003062 <TIM_ITRx_SetConfig>
      break;
 8002b58:	e00b      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4619      	mov	r1, r3
 8002b64:	4610      	mov	r0, r2
 8002b66:	f000 fa7c 	bl	8003062 <TIM_ITRx_SetConfig>
        break;
 8002b6a:	e002      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b6c:	bf00      	nop
 8002b6e:	e000      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b70:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr

08002bc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a29      	ldr	r2, [pc, #164]	; (8002c8c <TIM_Base_SetConfig+0xb8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d00b      	beq.n	8002c04 <TIM_Base_SetConfig+0x30>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf2:	d007      	beq.n	8002c04 <TIM_Base_SetConfig+0x30>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a26      	ldr	r2, [pc, #152]	; (8002c90 <TIM_Base_SetConfig+0xbc>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d003      	beq.n	8002c04 <TIM_Base_SetConfig+0x30>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a25      	ldr	r2, [pc, #148]	; (8002c94 <TIM_Base_SetConfig+0xc0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d108      	bne.n	8002c16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a1c      	ldr	r2, [pc, #112]	; (8002c8c <TIM_Base_SetConfig+0xb8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00b      	beq.n	8002c36 <TIM_Base_SetConfig+0x62>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c24:	d007      	beq.n	8002c36 <TIM_Base_SetConfig+0x62>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a19      	ldr	r2, [pc, #100]	; (8002c90 <TIM_Base_SetConfig+0xbc>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d003      	beq.n	8002c36 <TIM_Base_SetConfig+0x62>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a18      	ldr	r2, [pc, #96]	; (8002c94 <TIM_Base_SetConfig+0xc0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d108      	bne.n	8002c48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a07      	ldr	r2, [pc, #28]	; (8002c8c <TIM_Base_SetConfig+0xb8>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d103      	bne.n	8002c7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	615a      	str	r2, [r3, #20]
}
 8002c82:	bf00      	nop
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr
 8002c8c:	40012c00 	.word	0x40012c00
 8002c90:	40000400 	.word	0x40000400
 8002c94:	40000800 	.word	0x40000800

08002c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f023 0201 	bic.w	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0303 	bic.w	r3, r3, #3
 8002cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f023 0302 	bic.w	r3, r3, #2
 8002ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a1c      	ldr	r2, [pc, #112]	; (8002d60 <TIM_OC1_SetConfig+0xc8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d10c      	bne.n	8002d0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f023 0308 	bic.w	r3, r3, #8
 8002cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f023 0304 	bic.w	r3, r3, #4
 8002d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a13      	ldr	r2, [pc, #76]	; (8002d60 <TIM_OC1_SetConfig+0xc8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d111      	bne.n	8002d3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	621a      	str	r2, [r3, #32]
}
 8002d54:	bf00      	nop
 8002d56:	371c      	adds	r7, #28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40012c00 	.word	0x40012c00

08002d64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f023 0210 	bic.w	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f023 0320 	bic.w	r3, r3, #32
 8002dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a1d      	ldr	r2, [pc, #116]	; (8002e34 <TIM_OC2_SetConfig+0xd0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d10d      	bne.n	8002de0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a14      	ldr	r2, [pc, #80]	; (8002e34 <TIM_OC2_SetConfig+0xd0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d113      	bne.n	8002e10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002df6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	621a      	str	r2, [r3, #32]
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr
 8002e34:	40012c00 	.word	0x40012c00

08002e38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f023 0303 	bic.w	r3, r3, #3
 8002e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	021b      	lsls	r3, r3, #8
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a1d      	ldr	r2, [pc, #116]	; (8002f08 <TIM_OC3_SetConfig+0xd0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d10d      	bne.n	8002eb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	021b      	lsls	r3, r3, #8
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a14      	ldr	r2, [pc, #80]	; (8002f08 <TIM_OC3_SetConfig+0xd0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d113      	bne.n	8002ee2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	621a      	str	r2, [r3, #32]
}
 8002efc:	bf00      	nop
 8002efe:	371c      	adds	r7, #28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40012c00 	.word	0x40012c00

08002f0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	021b      	lsls	r3, r3, #8
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	031b      	lsls	r3, r3, #12
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a0f      	ldr	r2, [pc, #60]	; (8002fa4 <TIM_OC4_SetConfig+0x98>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d109      	bne.n	8002f80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	019b      	lsls	r3, r3, #6
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	621a      	str	r2, [r3, #32]
}
 8002f9a:	bf00      	nop
 8002f9c:	371c      	adds	r7, #28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr
 8002fa4:	40012c00 	.word	0x40012c00

08002fa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	f023 0201 	bic.w	r2, r3, #1
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f023 030a 	bic.w	r3, r3, #10
 8002fe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	621a      	str	r2, [r3, #32]
}
 8002ffa:	bf00      	nop
 8002ffc:	371c      	adds	r7, #28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	f023 0210 	bic.w	r2, r3, #16
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800302e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	031b      	lsls	r3, r3, #12
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003040:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	621a      	str	r2, [r3, #32]
}
 8003058:	bf00      	nop
 800305a:	371c      	adds	r7, #28
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr

08003062 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003062:	b480      	push	{r7}
 8003064:	b085      	sub	sp, #20
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003078:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	f043 0307 	orr.w	r3, r3, #7
 8003084:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	609a      	str	r2, [r3, #8]
}
 800308c:	bf00      	nop
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr

08003096 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003096:	b480      	push	{r7}
 8003098:	b087      	sub	sp, #28
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
 80030a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	021a      	lsls	r2, r3, #8
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	431a      	orrs	r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	4313      	orrs	r3, r2
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	609a      	str	r2, [r3, #8]
}
 80030ca:	bf00      	nop
 80030cc:	371c      	adds	r7, #28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d109      	bne.n	80030f8 <HAL_TIMEx_PWMN_Start+0x24>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e022      	b.n	800313e <HAL_TIMEx_PWMN_Start+0x6a>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d109      	bne.n	8003112 <HAL_TIMEx_PWMN_Start+0x3e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	bf14      	ite	ne
 800310a:	2301      	movne	r3, #1
 800310c:	2300      	moveq	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	e015      	b.n	800313e <HAL_TIMEx_PWMN_Start+0x6a>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b08      	cmp	r3, #8
 8003116:	d109      	bne.n	800312c <HAL_TIMEx_PWMN_Start+0x58>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b01      	cmp	r3, #1
 8003122:	bf14      	ite	ne
 8003124:	2301      	movne	r3, #1
 8003126:	2300      	moveq	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	e008      	b.n	800313e <HAL_TIMEx_PWMN_Start+0x6a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b01      	cmp	r3, #1
 8003136:	bf14      	ite	ne
 8003138:	2301      	movne	r3, #1
 800313a:	2300      	moveq	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e059      	b.n	80031fa <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d104      	bne.n	8003156 <HAL_TIMEx_PWMN_Start+0x82>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003154:	e013      	b.n	800317e <HAL_TIMEx_PWMN_Start+0xaa>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b04      	cmp	r3, #4
 800315a:	d104      	bne.n	8003166 <HAL_TIMEx_PWMN_Start+0x92>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003164:	e00b      	b.n	800317e <HAL_TIMEx_PWMN_Start+0xaa>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b08      	cmp	r3, #8
 800316a:	d104      	bne.n	8003176 <HAL_TIMEx_PWMN_Start+0xa2>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003174:	e003      	b.n	800317e <HAL_TIMEx_PWMN_Start+0xaa>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2202      	movs	r2, #2
 800317a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2204      	movs	r2, #4
 8003184:	6839      	ldr	r1, [r7, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f000 f8b2 	bl	80032f0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800319a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a18      	ldr	r2, [pc, #96]	; (8003204 <HAL_TIMEx_PWMN_Start+0x130>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00e      	beq.n	80031c4 <HAL_TIMEx_PWMN_Start+0xf0>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ae:	d009      	beq.n	80031c4 <HAL_TIMEx_PWMN_Start+0xf0>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a14      	ldr	r2, [pc, #80]	; (8003208 <HAL_TIMEx_PWMN_Start+0x134>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d004      	beq.n	80031c4 <HAL_TIMEx_PWMN_Start+0xf0>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a13      	ldr	r2, [pc, #76]	; (800320c <HAL_TIMEx_PWMN_Start+0x138>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d111      	bne.n	80031e8 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b06      	cmp	r3, #6
 80031d4:	d010      	beq.n	80031f8 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0201 	orr.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e6:	e007      	b.n	80031f8 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40012c00 	.word	0x40012c00
 8003208:	40000400 	.word	0x40000400
 800320c:	40000800 	.word	0x40000800

08003210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003224:	2302      	movs	r3, #2
 8003226:	e046      	b.n	80032b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a16      	ldr	r2, [pc, #88]	; (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d00e      	beq.n	800328a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003274:	d009      	beq.n	800328a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a12      	ldr	r2, [pc, #72]	; (80032c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d004      	beq.n	800328a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a10      	ldr	r2, [pc, #64]	; (80032c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d10c      	bne.n	80032a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003290:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	4313      	orrs	r3, r2
 800329a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr
 80032c0:	40012c00 	.word	0x40012c00
 80032c4:	40000400 	.word	0x40000400
 80032c8:	40000800 	.word	0x40000800

080032cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr

080032de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	2204      	movs	r2, #4
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a1a      	ldr	r2, [r3, #32]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	43db      	mvns	r3, r3
 8003312:	401a      	ands	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a1a      	ldr	r2, [r3, #32]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f003 031f 	and.w	r3, r3, #31
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	fa01 f303 	lsl.w	r3, r1, r3
 8003328:	431a      	orrs	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	621a      	str	r2, [r3, #32]
}
 800332e:	bf00      	nop
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr

08003338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e03f      	b.n	80033ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fd ffb2 	bl	80012c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2224      	movs	r2, #36	; 0x24
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800337a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 fc25 	bl	8003bcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b08a      	sub	sp, #40	; 0x28
 80033d6:	af02      	add	r7, sp, #8
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d17c      	bne.n	80034ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <HAL_UART_Transmit+0x2c>
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e075      	b.n	80034ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_UART_Transmit+0x3e>
 800340c:	2302      	movs	r3, #2
 800340e:	e06e      	b.n	80034ee <HAL_UART_Transmit+0x11c>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2221      	movs	r2, #33	; 0x21
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003426:	f7fe f897 	bl	8001558 <HAL_GetTick>
 800342a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	88fa      	ldrh	r2, [r7, #6]
 8003430:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	88fa      	ldrh	r2, [r7, #6]
 8003436:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003440:	d108      	bne.n	8003454 <HAL_UART_Transmit+0x82>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d104      	bne.n	8003454 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	e003      	b.n	800345c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003458:	2300      	movs	r3, #0
 800345a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003464:	e02a      	b.n	80034bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2200      	movs	r2, #0
 800346e:	2180      	movs	r1, #128	; 0x80
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 fa11 	bl	8003898 <UART_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e036      	b.n	80034ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10b      	bne.n	800349e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003494:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	3302      	adds	r3, #2
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	e007      	b.n	80034ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	3301      	adds	r3, #1
 80034ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1cf      	bne.n	8003466 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2200      	movs	r2, #0
 80034ce:	2140      	movs	r1, #64	; 0x40
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f9e1 	bl	8003898 <UART_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e006      	b.n	80034ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e000      	b.n	80034ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034ec:	2302      	movs	r3, #2
  }
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3720      	adds	r7, #32
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08a      	sub	sp, #40	; 0x28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003518:	2300      	movs	r3, #0
 800351a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10d      	bne.n	800354a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_UART_IRQHandler+0x52>
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fa99 	bl	8003a7a <UART_Receive_IT>
      return;
 8003548:	e17b      	b.n	8003842 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80b1 	beq.w	80036b4 <HAL_UART_IRQHandler+0x1bc>
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d105      	bne.n	8003568 <HAL_UART_IRQHandler+0x70>
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80a6 	beq.w	80036b4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_UART_IRQHandler+0x90>
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	f043 0201 	orr.w	r2, r3, #1
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_UART_IRQHandler+0xb0>
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	f043 0202 	orr.w	r2, r3, #2
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_UART_IRQHandler+0xd0>
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	f043 0204 	orr.w	r2, r3, #4
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00f      	beq.n	80035f2 <HAL_UART_IRQHandler+0xfa>
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d104      	bne.n	80035e6 <HAL_UART_IRQHandler+0xee>
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f043 0208 	orr.w	r2, r3, #8
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 811e 	beq.w	8003838 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	d007      	beq.n	8003616 <HAL_UART_IRQHandler+0x11e>
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fa32 	bl	8003a7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003620:	2b00      	cmp	r3, #0
 8003622:	bf14      	ite	ne
 8003624:	2301      	movne	r3, #1
 8003626:	2300      	moveq	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b00      	cmp	r3, #0
 8003636:	d102      	bne.n	800363e <HAL_UART_IRQHandler+0x146>
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d031      	beq.n	80036a2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f974 	bl	800392c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364e:	2b00      	cmp	r3, #0
 8003650:	d023      	beq.n	800369a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695a      	ldr	r2, [r3, #20]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003660:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003666:	2b00      	cmp	r3, #0
 8003668:	d013      	beq.n	8003692 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366e:	4a76      	ldr	r2, [pc, #472]	; (8003848 <HAL_UART_IRQHandler+0x350>)
 8003670:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	4618      	mov	r0, r3
 8003678:	f7fe f8c0 	bl	80017fc <HAL_DMA_Abort_IT>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d016      	beq.n	80036b0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800368c:	4610      	mov	r0, r2
 800368e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003690:	e00e      	b.n	80036b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f8ec 	bl	8003870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003698:	e00a      	b.n	80036b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f8e8 	bl	8003870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a0:	e006      	b.n	80036b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f8e4 	bl	8003870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80036ae:	e0c3      	b.n	8003838 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b0:	bf00      	nop
    return;
 80036b2:	e0c1      	b.n	8003838 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	f040 80a1 	bne.w	8003800 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 809b 	beq.w	8003800 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8095 	beq.w	8003800 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036d6:	2300      	movs	r3, #0
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d04e      	beq.n	8003798 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003704:	8a3b      	ldrh	r3, [r7, #16]
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 8098 	beq.w	800383c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003710:	8a3a      	ldrh	r2, [r7, #16]
 8003712:	429a      	cmp	r2, r3
 8003714:	f080 8092 	bcs.w	800383c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	8a3a      	ldrh	r2, [r7, #16]
 800371c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b20      	cmp	r3, #32
 8003726:	d02b      	beq.n	8003780 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003736:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0201 	bic.w	r2, r2, #1
 8003746:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003756:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0210 	bic.w	r2, r2, #16
 8003774:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377a:	4618      	mov	r0, r3
 800377c:	f7fe f803 	bl	8001786 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003788:	b29b      	uxth	r3, r3
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	b29b      	uxth	r3, r3
 800378e:	4619      	mov	r1, r3
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f876 	bl	8003882 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003796:	e051      	b.n	800383c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d047      	beq.n	8003840 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80037b0:	8a7b      	ldrh	r3, [r7, #18]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d044      	beq.n	8003840 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037c4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695a      	ldr	r2, [r3, #20]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0201 	bic.w	r2, r2, #1
 80037d4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0210 	bic.w	r2, r2, #16
 80037f2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037f4:	8a7b      	ldrh	r3, [r7, #18]
 80037f6:	4619      	mov	r1, r3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f842 	bl	8003882 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80037fe:	e01f      	b.n	8003840 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003806:	2b00      	cmp	r3, #0
 8003808:	d008      	beq.n	800381c <HAL_UART_IRQHandler+0x324>
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f8c9 	bl	80039ac <UART_Transmit_IT>
    return;
 800381a:	e012      	b.n	8003842 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00d      	beq.n	8003842 <HAL_UART_IRQHandler+0x34a>
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f90a 	bl	8003a4a <UART_EndTransmit_IT>
    return;
 8003836:	e004      	b.n	8003842 <HAL_UART_IRQHandler+0x34a>
    return;
 8003838:	bf00      	nop
 800383a:	e002      	b.n	8003842 <HAL_UART_IRQHandler+0x34a>
      return;
 800383c:	bf00      	nop
 800383e:	e000      	b.n	8003842 <HAL_UART_IRQHandler+0x34a>
      return;
 8003840:	bf00      	nop
  }
}
 8003842:	3728      	adds	r7, #40	; 0x28
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	08003985 	.word	0x08003985

0800384c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr

0800385e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr

08003870 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr

08003882 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	460b      	mov	r3, r1
 800388c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr

08003898 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	4613      	mov	r3, r2
 80038a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a8:	e02c      	b.n	8003904 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b0:	d028      	beq.n	8003904 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d007      	beq.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80038b8:	f7fd fe4e 	bl	8001558 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d21d      	bcs.n	8003904 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038d6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695a      	ldr	r2, [r3, #20]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0201 	bic.w	r2, r2, #1
 80038e6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e00f      	b.n	8003924 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	4013      	ands	r3, r2
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	429a      	cmp	r2, r3
 8003912:	bf0c      	ite	eq
 8003914:	2301      	moveq	r3, #1
 8003916:	2300      	movne	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	461a      	mov	r2, r3
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	429a      	cmp	r2, r3
 8003920:	d0c3      	beq.n	80038aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003942:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0201 	bic.w	r2, r2, #1
 8003952:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	2b01      	cmp	r3, #1
 800395a:	d107      	bne.n	800396c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0210 	bic.w	r2, r2, #16
 800396a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	631a      	str	r2, [r3, #48]	; 0x30
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr

08003984 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f7ff ff66 	bl	8003870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b21      	cmp	r3, #33	; 0x21
 80039be:	d13e      	bne.n	8003a3e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c8:	d114      	bne.n	80039f4 <UART_Transmit_IT+0x48>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d110      	bne.n	80039f4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	461a      	mov	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039e6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	1c9a      	adds	r2, r3, #2
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	621a      	str	r2, [r3, #32]
 80039f2:	e008      	b.n	8003a06 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	1c59      	adds	r1, r3, #1
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6211      	str	r1, [r2, #32]
 80039fe:	781a      	ldrb	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	4619      	mov	r1, r3
 8003a14:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10f      	bne.n	8003a3a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a28:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a38:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e000      	b.n	8003a40 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a3e:	2302      	movs	r3, #2
  }
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr

08003a4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff feee 	bl	800384c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b086      	sub	sp, #24
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b22      	cmp	r3, #34	; 0x22
 8003a8c:	f040 8099 	bne.w	8003bc2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a98:	d117      	bne.n	8003aca <UART_Receive_IT+0x50>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d113      	bne.n	8003aca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	1c9a      	adds	r2, r3, #2
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ac8:	e026      	b.n	8003b18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ace:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003adc:	d007      	beq.n	8003aee <UART_Receive_IT+0x74>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10a      	bne.n	8003afc <UART_Receive_IT+0x82>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	701a      	strb	r2, [r3, #0]
 8003afa:	e008      	b.n	8003b0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4619      	mov	r1, r3
 8003b26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d148      	bne.n	8003bbe <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0220 	bic.w	r2, r2, #32
 8003b3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0201 	bic.w	r2, r2, #1
 8003b5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d123      	bne.n	8003bb4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0210 	bic.w	r2, r2, #16
 8003b80:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d10a      	bne.n	8003ba6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003baa:	4619      	mov	r1, r3
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff fe68 	bl	8003882 <HAL_UARTEx_RxEventCallback>
 8003bb2:	e002      	b.n	8003bba <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7ff fe52 	bl	800385e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	e002      	b.n	8003bc4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e000      	b.n	8003bc4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003bc2:	2302      	movs	r3, #2
  }
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c06:	f023 030c 	bic.w	r3, r3, #12
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6812      	ldr	r2, [r2, #0]
 8003c0e:	68b9      	ldr	r1, [r7, #8]
 8003c10:	430b      	orrs	r3, r1
 8003c12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699a      	ldr	r2, [r3, #24]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a2c      	ldr	r2, [pc, #176]	; (8003ce0 <UART_SetConfig+0x114>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d103      	bne.n	8003c3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c34:	f7fe fbf4 	bl	8002420 <HAL_RCC_GetPCLK2Freq>
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	e002      	b.n	8003c42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c3c:	f7fe fbdc 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8003c40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	009a      	lsls	r2, r3, #2
 8003c4c:	441a      	add	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c58:	4a22      	ldr	r2, [pc, #136]	; (8003ce4 <UART_SetConfig+0x118>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	0119      	lsls	r1, r3, #4
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	009a      	lsls	r2, r3, #2
 8003c6c:	441a      	add	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c78:	4b1a      	ldr	r3, [pc, #104]	; (8003ce4 <UART_SetConfig+0x118>)
 8003c7a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	2064      	movs	r0, #100	; 0x64
 8003c82:	fb00 f303 	mul.w	r3, r0, r3
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	3332      	adds	r3, #50	; 0x32
 8003c8c:	4a15      	ldr	r2, [pc, #84]	; (8003ce4 <UART_SetConfig+0x118>)
 8003c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c98:	4419      	add	r1, r3
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009a      	lsls	r2, r3, #2
 8003ca4:	441a      	add	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <UART_SetConfig+0x118>)
 8003cb2:	fba3 0302 	umull	r0, r3, r3, r2
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	2064      	movs	r0, #100	; 0x64
 8003cba:	fb00 f303 	mul.w	r3, r0, r3
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	3332      	adds	r3, #50	; 0x32
 8003cc4:	4a07      	ldr	r2, [pc, #28]	; (8003ce4 <UART_SetConfig+0x118>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	f003 020f 	and.w	r2, r3, #15
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	440a      	add	r2, r1
 8003cd6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40013800 	.word	0x40013800
 8003ce4:	51eb851f 	.word	0x51eb851f

08003ce8 <__errno>:
 8003ce8:	4b01      	ldr	r3, [pc, #4]	; (8003cf0 <__errno+0x8>)
 8003cea:	6818      	ldr	r0, [r3, #0]
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	20000058 	.word	0x20000058

08003cf4 <__libc_init_array>:
 8003cf4:	b570      	push	{r4, r5, r6, lr}
 8003cf6:	2600      	movs	r6, #0
 8003cf8:	4d0c      	ldr	r5, [pc, #48]	; (8003d2c <__libc_init_array+0x38>)
 8003cfa:	4c0d      	ldr	r4, [pc, #52]	; (8003d30 <__libc_init_array+0x3c>)
 8003cfc:	1b64      	subs	r4, r4, r5
 8003cfe:	10a4      	asrs	r4, r4, #2
 8003d00:	42a6      	cmp	r6, r4
 8003d02:	d109      	bne.n	8003d18 <__libc_init_array+0x24>
 8003d04:	f000 fc5c 	bl	80045c0 <_init>
 8003d08:	2600      	movs	r6, #0
 8003d0a:	4d0a      	ldr	r5, [pc, #40]	; (8003d34 <__libc_init_array+0x40>)
 8003d0c:	4c0a      	ldr	r4, [pc, #40]	; (8003d38 <__libc_init_array+0x44>)
 8003d0e:	1b64      	subs	r4, r4, r5
 8003d10:	10a4      	asrs	r4, r4, #2
 8003d12:	42a6      	cmp	r6, r4
 8003d14:	d105      	bne.n	8003d22 <__libc_init_array+0x2e>
 8003d16:	bd70      	pop	{r4, r5, r6, pc}
 8003d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d1c:	4798      	blx	r3
 8003d1e:	3601      	adds	r6, #1
 8003d20:	e7ee      	b.n	8003d00 <__libc_init_array+0xc>
 8003d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d26:	4798      	blx	r3
 8003d28:	3601      	adds	r6, #1
 8003d2a:	e7f2      	b.n	8003d12 <__libc_init_array+0x1e>
 8003d2c:	08004640 	.word	0x08004640
 8003d30:	08004640 	.word	0x08004640
 8003d34:	08004640 	.word	0x08004640
 8003d38:	08004644 	.word	0x08004644

08003d3c <memset>:
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	4402      	add	r2, r0
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d100      	bne.n	8003d46 <memset+0xa>
 8003d44:	4770      	bx	lr
 8003d46:	f803 1b01 	strb.w	r1, [r3], #1
 8003d4a:	e7f9      	b.n	8003d40 <memset+0x4>

08003d4c <siprintf>:
 8003d4c:	b40e      	push	{r1, r2, r3}
 8003d4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d52:	b500      	push	{lr}
 8003d54:	b09c      	sub	sp, #112	; 0x70
 8003d56:	ab1d      	add	r3, sp, #116	; 0x74
 8003d58:	9002      	str	r0, [sp, #8]
 8003d5a:	9006      	str	r0, [sp, #24]
 8003d5c:	9107      	str	r1, [sp, #28]
 8003d5e:	9104      	str	r1, [sp, #16]
 8003d60:	4808      	ldr	r0, [pc, #32]	; (8003d84 <siprintf+0x38>)
 8003d62:	4909      	ldr	r1, [pc, #36]	; (8003d88 <siprintf+0x3c>)
 8003d64:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d68:	9105      	str	r1, [sp, #20]
 8003d6a:	6800      	ldr	r0, [r0, #0]
 8003d6c:	a902      	add	r1, sp, #8
 8003d6e:	9301      	str	r3, [sp, #4]
 8003d70:	f000 f868 	bl	8003e44 <_svfiprintf_r>
 8003d74:	2200      	movs	r2, #0
 8003d76:	9b02      	ldr	r3, [sp, #8]
 8003d78:	701a      	strb	r2, [r3, #0]
 8003d7a:	b01c      	add	sp, #112	; 0x70
 8003d7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d80:	b003      	add	sp, #12
 8003d82:	4770      	bx	lr
 8003d84:	20000058 	.word	0x20000058
 8003d88:	ffff0208 	.word	0xffff0208

08003d8c <__ssputs_r>:
 8003d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d90:	688e      	ldr	r6, [r1, #8]
 8003d92:	4682      	mov	sl, r0
 8003d94:	429e      	cmp	r6, r3
 8003d96:	460c      	mov	r4, r1
 8003d98:	4690      	mov	r8, r2
 8003d9a:	461f      	mov	r7, r3
 8003d9c:	d838      	bhi.n	8003e10 <__ssputs_r+0x84>
 8003d9e:	898a      	ldrh	r2, [r1, #12]
 8003da0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003da4:	d032      	beq.n	8003e0c <__ssputs_r+0x80>
 8003da6:	6825      	ldr	r5, [r4, #0]
 8003da8:	6909      	ldr	r1, [r1, #16]
 8003daa:	3301      	adds	r3, #1
 8003dac:	eba5 0901 	sub.w	r9, r5, r1
 8003db0:	6965      	ldr	r5, [r4, #20]
 8003db2:	444b      	add	r3, r9
 8003db4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003db8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003dbc:	106d      	asrs	r5, r5, #1
 8003dbe:	429d      	cmp	r5, r3
 8003dc0:	bf38      	it	cc
 8003dc2:	461d      	movcc	r5, r3
 8003dc4:	0553      	lsls	r3, r2, #21
 8003dc6:	d531      	bpl.n	8003e2c <__ssputs_r+0xa0>
 8003dc8:	4629      	mov	r1, r5
 8003dca:	f000 fb53 	bl	8004474 <_malloc_r>
 8003dce:	4606      	mov	r6, r0
 8003dd0:	b950      	cbnz	r0, 8003de8 <__ssputs_r+0x5c>
 8003dd2:	230c      	movs	r3, #12
 8003dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd8:	f8ca 3000 	str.w	r3, [sl]
 8003ddc:	89a3      	ldrh	r3, [r4, #12]
 8003dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003de2:	81a3      	strh	r3, [r4, #12]
 8003de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de8:	464a      	mov	r2, r9
 8003dea:	6921      	ldr	r1, [r4, #16]
 8003dec:	f000 face 	bl	800438c <memcpy>
 8003df0:	89a3      	ldrh	r3, [r4, #12]
 8003df2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dfa:	81a3      	strh	r3, [r4, #12]
 8003dfc:	6126      	str	r6, [r4, #16]
 8003dfe:	444e      	add	r6, r9
 8003e00:	6026      	str	r6, [r4, #0]
 8003e02:	463e      	mov	r6, r7
 8003e04:	6165      	str	r5, [r4, #20]
 8003e06:	eba5 0509 	sub.w	r5, r5, r9
 8003e0a:	60a5      	str	r5, [r4, #8]
 8003e0c:	42be      	cmp	r6, r7
 8003e0e:	d900      	bls.n	8003e12 <__ssputs_r+0x86>
 8003e10:	463e      	mov	r6, r7
 8003e12:	4632      	mov	r2, r6
 8003e14:	4641      	mov	r1, r8
 8003e16:	6820      	ldr	r0, [r4, #0]
 8003e18:	f000 fac6 	bl	80043a8 <memmove>
 8003e1c:	68a3      	ldr	r3, [r4, #8]
 8003e1e:	6822      	ldr	r2, [r4, #0]
 8003e20:	1b9b      	subs	r3, r3, r6
 8003e22:	4432      	add	r2, r6
 8003e24:	2000      	movs	r0, #0
 8003e26:	60a3      	str	r3, [r4, #8]
 8003e28:	6022      	str	r2, [r4, #0]
 8003e2a:	e7db      	b.n	8003de4 <__ssputs_r+0x58>
 8003e2c:	462a      	mov	r2, r5
 8003e2e:	f000 fb7b 	bl	8004528 <_realloc_r>
 8003e32:	4606      	mov	r6, r0
 8003e34:	2800      	cmp	r0, #0
 8003e36:	d1e1      	bne.n	8003dfc <__ssputs_r+0x70>
 8003e38:	4650      	mov	r0, sl
 8003e3a:	6921      	ldr	r1, [r4, #16]
 8003e3c:	f000 face 	bl	80043dc <_free_r>
 8003e40:	e7c7      	b.n	8003dd2 <__ssputs_r+0x46>
	...

08003e44 <_svfiprintf_r>:
 8003e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e48:	4698      	mov	r8, r3
 8003e4a:	898b      	ldrh	r3, [r1, #12]
 8003e4c:	4607      	mov	r7, r0
 8003e4e:	061b      	lsls	r3, r3, #24
 8003e50:	460d      	mov	r5, r1
 8003e52:	4614      	mov	r4, r2
 8003e54:	b09d      	sub	sp, #116	; 0x74
 8003e56:	d50e      	bpl.n	8003e76 <_svfiprintf_r+0x32>
 8003e58:	690b      	ldr	r3, [r1, #16]
 8003e5a:	b963      	cbnz	r3, 8003e76 <_svfiprintf_r+0x32>
 8003e5c:	2140      	movs	r1, #64	; 0x40
 8003e5e:	f000 fb09 	bl	8004474 <_malloc_r>
 8003e62:	6028      	str	r0, [r5, #0]
 8003e64:	6128      	str	r0, [r5, #16]
 8003e66:	b920      	cbnz	r0, 8003e72 <_svfiprintf_r+0x2e>
 8003e68:	230c      	movs	r3, #12
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e70:	e0d1      	b.n	8004016 <_svfiprintf_r+0x1d2>
 8003e72:	2340      	movs	r3, #64	; 0x40
 8003e74:	616b      	str	r3, [r5, #20]
 8003e76:	2300      	movs	r3, #0
 8003e78:	9309      	str	r3, [sp, #36]	; 0x24
 8003e7a:	2320      	movs	r3, #32
 8003e7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e80:	2330      	movs	r3, #48	; 0x30
 8003e82:	f04f 0901 	mov.w	r9, #1
 8003e86:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004030 <_svfiprintf_r+0x1ec>
 8003e8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e92:	4623      	mov	r3, r4
 8003e94:	469a      	mov	sl, r3
 8003e96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e9a:	b10a      	cbz	r2, 8003ea0 <_svfiprintf_r+0x5c>
 8003e9c:	2a25      	cmp	r2, #37	; 0x25
 8003e9e:	d1f9      	bne.n	8003e94 <_svfiprintf_r+0x50>
 8003ea0:	ebba 0b04 	subs.w	fp, sl, r4
 8003ea4:	d00b      	beq.n	8003ebe <_svfiprintf_r+0x7a>
 8003ea6:	465b      	mov	r3, fp
 8003ea8:	4622      	mov	r2, r4
 8003eaa:	4629      	mov	r1, r5
 8003eac:	4638      	mov	r0, r7
 8003eae:	f7ff ff6d 	bl	8003d8c <__ssputs_r>
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	f000 80aa 	beq.w	800400c <_svfiprintf_r+0x1c8>
 8003eb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003eba:	445a      	add	r2, fp
 8003ebc:	9209      	str	r2, [sp, #36]	; 0x24
 8003ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 80a2 	beq.w	800400c <_svfiprintf_r+0x1c8>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f04f 32ff 	mov.w	r2, #4294967295
 8003ece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ed2:	f10a 0a01 	add.w	sl, sl, #1
 8003ed6:	9304      	str	r3, [sp, #16]
 8003ed8:	9307      	str	r3, [sp, #28]
 8003eda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ede:	931a      	str	r3, [sp, #104]	; 0x68
 8003ee0:	4654      	mov	r4, sl
 8003ee2:	2205      	movs	r2, #5
 8003ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ee8:	4851      	ldr	r0, [pc, #324]	; (8004030 <_svfiprintf_r+0x1ec>)
 8003eea:	f000 fa41 	bl	8004370 <memchr>
 8003eee:	9a04      	ldr	r2, [sp, #16]
 8003ef0:	b9d8      	cbnz	r0, 8003f2a <_svfiprintf_r+0xe6>
 8003ef2:	06d0      	lsls	r0, r2, #27
 8003ef4:	bf44      	itt	mi
 8003ef6:	2320      	movmi	r3, #32
 8003ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003efc:	0711      	lsls	r1, r2, #28
 8003efe:	bf44      	itt	mi
 8003f00:	232b      	movmi	r3, #43	; 0x2b
 8003f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f06:	f89a 3000 	ldrb.w	r3, [sl]
 8003f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f0c:	d015      	beq.n	8003f3a <_svfiprintf_r+0xf6>
 8003f0e:	4654      	mov	r4, sl
 8003f10:	2000      	movs	r0, #0
 8003f12:	f04f 0c0a 	mov.w	ip, #10
 8003f16:	9a07      	ldr	r2, [sp, #28]
 8003f18:	4621      	mov	r1, r4
 8003f1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f1e:	3b30      	subs	r3, #48	; 0x30
 8003f20:	2b09      	cmp	r3, #9
 8003f22:	d94e      	bls.n	8003fc2 <_svfiprintf_r+0x17e>
 8003f24:	b1b0      	cbz	r0, 8003f54 <_svfiprintf_r+0x110>
 8003f26:	9207      	str	r2, [sp, #28]
 8003f28:	e014      	b.n	8003f54 <_svfiprintf_r+0x110>
 8003f2a:	eba0 0308 	sub.w	r3, r0, r8
 8003f2e:	fa09 f303 	lsl.w	r3, r9, r3
 8003f32:	4313      	orrs	r3, r2
 8003f34:	46a2      	mov	sl, r4
 8003f36:	9304      	str	r3, [sp, #16]
 8003f38:	e7d2      	b.n	8003ee0 <_svfiprintf_r+0x9c>
 8003f3a:	9b03      	ldr	r3, [sp, #12]
 8003f3c:	1d19      	adds	r1, r3, #4
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	9103      	str	r1, [sp, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	bfbb      	ittet	lt
 8003f46:	425b      	neglt	r3, r3
 8003f48:	f042 0202 	orrlt.w	r2, r2, #2
 8003f4c:	9307      	strge	r3, [sp, #28]
 8003f4e:	9307      	strlt	r3, [sp, #28]
 8003f50:	bfb8      	it	lt
 8003f52:	9204      	strlt	r2, [sp, #16]
 8003f54:	7823      	ldrb	r3, [r4, #0]
 8003f56:	2b2e      	cmp	r3, #46	; 0x2e
 8003f58:	d10c      	bne.n	8003f74 <_svfiprintf_r+0x130>
 8003f5a:	7863      	ldrb	r3, [r4, #1]
 8003f5c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f5e:	d135      	bne.n	8003fcc <_svfiprintf_r+0x188>
 8003f60:	9b03      	ldr	r3, [sp, #12]
 8003f62:	3402      	adds	r4, #2
 8003f64:	1d1a      	adds	r2, r3, #4
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	9203      	str	r2, [sp, #12]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	bfb8      	it	lt
 8003f6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f72:	9305      	str	r3, [sp, #20]
 8003f74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004040 <_svfiprintf_r+0x1fc>
 8003f78:	2203      	movs	r2, #3
 8003f7a:	4650      	mov	r0, sl
 8003f7c:	7821      	ldrb	r1, [r4, #0]
 8003f7e:	f000 f9f7 	bl	8004370 <memchr>
 8003f82:	b140      	cbz	r0, 8003f96 <_svfiprintf_r+0x152>
 8003f84:	2340      	movs	r3, #64	; 0x40
 8003f86:	eba0 000a 	sub.w	r0, r0, sl
 8003f8a:	fa03 f000 	lsl.w	r0, r3, r0
 8003f8e:	9b04      	ldr	r3, [sp, #16]
 8003f90:	3401      	adds	r4, #1
 8003f92:	4303      	orrs	r3, r0
 8003f94:	9304      	str	r3, [sp, #16]
 8003f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f9a:	2206      	movs	r2, #6
 8003f9c:	4825      	ldr	r0, [pc, #148]	; (8004034 <_svfiprintf_r+0x1f0>)
 8003f9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fa2:	f000 f9e5 	bl	8004370 <memchr>
 8003fa6:	2800      	cmp	r0, #0
 8003fa8:	d038      	beq.n	800401c <_svfiprintf_r+0x1d8>
 8003faa:	4b23      	ldr	r3, [pc, #140]	; (8004038 <_svfiprintf_r+0x1f4>)
 8003fac:	bb1b      	cbnz	r3, 8003ff6 <_svfiprintf_r+0x1b2>
 8003fae:	9b03      	ldr	r3, [sp, #12]
 8003fb0:	3307      	adds	r3, #7
 8003fb2:	f023 0307 	bic.w	r3, r3, #7
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	9303      	str	r3, [sp, #12]
 8003fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fbc:	4433      	add	r3, r6
 8003fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc0:	e767      	b.n	8003e92 <_svfiprintf_r+0x4e>
 8003fc2:	460c      	mov	r4, r1
 8003fc4:	2001      	movs	r0, #1
 8003fc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fca:	e7a5      	b.n	8003f18 <_svfiprintf_r+0xd4>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f04f 0c0a 	mov.w	ip, #10
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	3401      	adds	r4, #1
 8003fd6:	9305      	str	r3, [sp, #20]
 8003fd8:	4620      	mov	r0, r4
 8003fda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fde:	3a30      	subs	r2, #48	; 0x30
 8003fe0:	2a09      	cmp	r2, #9
 8003fe2:	d903      	bls.n	8003fec <_svfiprintf_r+0x1a8>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0c5      	beq.n	8003f74 <_svfiprintf_r+0x130>
 8003fe8:	9105      	str	r1, [sp, #20]
 8003fea:	e7c3      	b.n	8003f74 <_svfiprintf_r+0x130>
 8003fec:	4604      	mov	r4, r0
 8003fee:	2301      	movs	r3, #1
 8003ff0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ff4:	e7f0      	b.n	8003fd8 <_svfiprintf_r+0x194>
 8003ff6:	ab03      	add	r3, sp, #12
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	462a      	mov	r2, r5
 8003ffc:	4638      	mov	r0, r7
 8003ffe:	4b0f      	ldr	r3, [pc, #60]	; (800403c <_svfiprintf_r+0x1f8>)
 8004000:	a904      	add	r1, sp, #16
 8004002:	f3af 8000 	nop.w
 8004006:	1c42      	adds	r2, r0, #1
 8004008:	4606      	mov	r6, r0
 800400a:	d1d6      	bne.n	8003fba <_svfiprintf_r+0x176>
 800400c:	89ab      	ldrh	r3, [r5, #12]
 800400e:	065b      	lsls	r3, r3, #25
 8004010:	f53f af2c 	bmi.w	8003e6c <_svfiprintf_r+0x28>
 8004014:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004016:	b01d      	add	sp, #116	; 0x74
 8004018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800401c:	ab03      	add	r3, sp, #12
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	462a      	mov	r2, r5
 8004022:	4638      	mov	r0, r7
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <_svfiprintf_r+0x1f8>)
 8004026:	a904      	add	r1, sp, #16
 8004028:	f000 f87c 	bl	8004124 <_printf_i>
 800402c:	e7eb      	b.n	8004006 <_svfiprintf_r+0x1c2>
 800402e:	bf00      	nop
 8004030:	0800460c 	.word	0x0800460c
 8004034:	08004616 	.word	0x08004616
 8004038:	00000000 	.word	0x00000000
 800403c:	08003d8d 	.word	0x08003d8d
 8004040:	08004612 	.word	0x08004612

08004044 <_printf_common>:
 8004044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004048:	4616      	mov	r6, r2
 800404a:	4699      	mov	r9, r3
 800404c:	688a      	ldr	r2, [r1, #8]
 800404e:	690b      	ldr	r3, [r1, #16]
 8004050:	4607      	mov	r7, r0
 8004052:	4293      	cmp	r3, r2
 8004054:	bfb8      	it	lt
 8004056:	4613      	movlt	r3, r2
 8004058:	6033      	str	r3, [r6, #0]
 800405a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800405e:	460c      	mov	r4, r1
 8004060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004064:	b10a      	cbz	r2, 800406a <_printf_common+0x26>
 8004066:	3301      	adds	r3, #1
 8004068:	6033      	str	r3, [r6, #0]
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	0699      	lsls	r1, r3, #26
 800406e:	bf42      	ittt	mi
 8004070:	6833      	ldrmi	r3, [r6, #0]
 8004072:	3302      	addmi	r3, #2
 8004074:	6033      	strmi	r3, [r6, #0]
 8004076:	6825      	ldr	r5, [r4, #0]
 8004078:	f015 0506 	ands.w	r5, r5, #6
 800407c:	d106      	bne.n	800408c <_printf_common+0x48>
 800407e:	f104 0a19 	add.w	sl, r4, #25
 8004082:	68e3      	ldr	r3, [r4, #12]
 8004084:	6832      	ldr	r2, [r6, #0]
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	42ab      	cmp	r3, r5
 800408a:	dc28      	bgt.n	80040de <_printf_common+0x9a>
 800408c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004090:	1e13      	subs	r3, r2, #0
 8004092:	6822      	ldr	r2, [r4, #0]
 8004094:	bf18      	it	ne
 8004096:	2301      	movne	r3, #1
 8004098:	0692      	lsls	r2, r2, #26
 800409a:	d42d      	bmi.n	80040f8 <_printf_common+0xb4>
 800409c:	4649      	mov	r1, r9
 800409e:	4638      	mov	r0, r7
 80040a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040a4:	47c0      	blx	r8
 80040a6:	3001      	adds	r0, #1
 80040a8:	d020      	beq.n	80040ec <_printf_common+0xa8>
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	68e5      	ldr	r5, [r4, #12]
 80040ae:	f003 0306 	and.w	r3, r3, #6
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	bf18      	it	ne
 80040b6:	2500      	movne	r5, #0
 80040b8:	6832      	ldr	r2, [r6, #0]
 80040ba:	f04f 0600 	mov.w	r6, #0
 80040be:	68a3      	ldr	r3, [r4, #8]
 80040c0:	bf08      	it	eq
 80040c2:	1aad      	subeq	r5, r5, r2
 80040c4:	6922      	ldr	r2, [r4, #16]
 80040c6:	bf08      	it	eq
 80040c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040cc:	4293      	cmp	r3, r2
 80040ce:	bfc4      	itt	gt
 80040d0:	1a9b      	subgt	r3, r3, r2
 80040d2:	18ed      	addgt	r5, r5, r3
 80040d4:	341a      	adds	r4, #26
 80040d6:	42b5      	cmp	r5, r6
 80040d8:	d11a      	bne.n	8004110 <_printf_common+0xcc>
 80040da:	2000      	movs	r0, #0
 80040dc:	e008      	b.n	80040f0 <_printf_common+0xac>
 80040de:	2301      	movs	r3, #1
 80040e0:	4652      	mov	r2, sl
 80040e2:	4649      	mov	r1, r9
 80040e4:	4638      	mov	r0, r7
 80040e6:	47c0      	blx	r8
 80040e8:	3001      	adds	r0, #1
 80040ea:	d103      	bne.n	80040f4 <_printf_common+0xb0>
 80040ec:	f04f 30ff 	mov.w	r0, #4294967295
 80040f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040f4:	3501      	adds	r5, #1
 80040f6:	e7c4      	b.n	8004082 <_printf_common+0x3e>
 80040f8:	2030      	movs	r0, #48	; 0x30
 80040fa:	18e1      	adds	r1, r4, r3
 80040fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004106:	4422      	add	r2, r4
 8004108:	3302      	adds	r3, #2
 800410a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800410e:	e7c5      	b.n	800409c <_printf_common+0x58>
 8004110:	2301      	movs	r3, #1
 8004112:	4622      	mov	r2, r4
 8004114:	4649      	mov	r1, r9
 8004116:	4638      	mov	r0, r7
 8004118:	47c0      	blx	r8
 800411a:	3001      	adds	r0, #1
 800411c:	d0e6      	beq.n	80040ec <_printf_common+0xa8>
 800411e:	3601      	adds	r6, #1
 8004120:	e7d9      	b.n	80040d6 <_printf_common+0x92>
	...

08004124 <_printf_i>:
 8004124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004128:	460c      	mov	r4, r1
 800412a:	7e27      	ldrb	r7, [r4, #24]
 800412c:	4691      	mov	r9, r2
 800412e:	2f78      	cmp	r7, #120	; 0x78
 8004130:	4680      	mov	r8, r0
 8004132:	469a      	mov	sl, r3
 8004134:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004136:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800413a:	d807      	bhi.n	800414c <_printf_i+0x28>
 800413c:	2f62      	cmp	r7, #98	; 0x62
 800413e:	d80a      	bhi.n	8004156 <_printf_i+0x32>
 8004140:	2f00      	cmp	r7, #0
 8004142:	f000 80d9 	beq.w	80042f8 <_printf_i+0x1d4>
 8004146:	2f58      	cmp	r7, #88	; 0x58
 8004148:	f000 80a4 	beq.w	8004294 <_printf_i+0x170>
 800414c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004154:	e03a      	b.n	80041cc <_printf_i+0xa8>
 8004156:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800415a:	2b15      	cmp	r3, #21
 800415c:	d8f6      	bhi.n	800414c <_printf_i+0x28>
 800415e:	a001      	add	r0, pc, #4	; (adr r0, 8004164 <_printf_i+0x40>)
 8004160:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004164:	080041bd 	.word	0x080041bd
 8004168:	080041d1 	.word	0x080041d1
 800416c:	0800414d 	.word	0x0800414d
 8004170:	0800414d 	.word	0x0800414d
 8004174:	0800414d 	.word	0x0800414d
 8004178:	0800414d 	.word	0x0800414d
 800417c:	080041d1 	.word	0x080041d1
 8004180:	0800414d 	.word	0x0800414d
 8004184:	0800414d 	.word	0x0800414d
 8004188:	0800414d 	.word	0x0800414d
 800418c:	0800414d 	.word	0x0800414d
 8004190:	080042df 	.word	0x080042df
 8004194:	08004201 	.word	0x08004201
 8004198:	080042c1 	.word	0x080042c1
 800419c:	0800414d 	.word	0x0800414d
 80041a0:	0800414d 	.word	0x0800414d
 80041a4:	08004301 	.word	0x08004301
 80041a8:	0800414d 	.word	0x0800414d
 80041ac:	08004201 	.word	0x08004201
 80041b0:	0800414d 	.word	0x0800414d
 80041b4:	0800414d 	.word	0x0800414d
 80041b8:	080042c9 	.word	0x080042c9
 80041bc:	680b      	ldr	r3, [r1, #0]
 80041be:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041c2:	1d1a      	adds	r2, r3, #4
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	600a      	str	r2, [r1, #0]
 80041c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0a4      	b.n	800431a <_printf_i+0x1f6>
 80041d0:	6825      	ldr	r5, [r4, #0]
 80041d2:	6808      	ldr	r0, [r1, #0]
 80041d4:	062e      	lsls	r6, r5, #24
 80041d6:	f100 0304 	add.w	r3, r0, #4
 80041da:	d50a      	bpl.n	80041f2 <_printf_i+0xce>
 80041dc:	6805      	ldr	r5, [r0, #0]
 80041de:	600b      	str	r3, [r1, #0]
 80041e0:	2d00      	cmp	r5, #0
 80041e2:	da03      	bge.n	80041ec <_printf_i+0xc8>
 80041e4:	232d      	movs	r3, #45	; 0x2d
 80041e6:	426d      	negs	r5, r5
 80041e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ec:	230a      	movs	r3, #10
 80041ee:	485e      	ldr	r0, [pc, #376]	; (8004368 <_printf_i+0x244>)
 80041f0:	e019      	b.n	8004226 <_printf_i+0x102>
 80041f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80041f6:	6805      	ldr	r5, [r0, #0]
 80041f8:	600b      	str	r3, [r1, #0]
 80041fa:	bf18      	it	ne
 80041fc:	b22d      	sxthne	r5, r5
 80041fe:	e7ef      	b.n	80041e0 <_printf_i+0xbc>
 8004200:	680b      	ldr	r3, [r1, #0]
 8004202:	6825      	ldr	r5, [r4, #0]
 8004204:	1d18      	adds	r0, r3, #4
 8004206:	6008      	str	r0, [r1, #0]
 8004208:	0628      	lsls	r0, r5, #24
 800420a:	d501      	bpl.n	8004210 <_printf_i+0xec>
 800420c:	681d      	ldr	r5, [r3, #0]
 800420e:	e002      	b.n	8004216 <_printf_i+0xf2>
 8004210:	0669      	lsls	r1, r5, #25
 8004212:	d5fb      	bpl.n	800420c <_printf_i+0xe8>
 8004214:	881d      	ldrh	r5, [r3, #0]
 8004216:	2f6f      	cmp	r7, #111	; 0x6f
 8004218:	bf0c      	ite	eq
 800421a:	2308      	moveq	r3, #8
 800421c:	230a      	movne	r3, #10
 800421e:	4852      	ldr	r0, [pc, #328]	; (8004368 <_printf_i+0x244>)
 8004220:	2100      	movs	r1, #0
 8004222:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004226:	6866      	ldr	r6, [r4, #4]
 8004228:	2e00      	cmp	r6, #0
 800422a:	bfa8      	it	ge
 800422c:	6821      	ldrge	r1, [r4, #0]
 800422e:	60a6      	str	r6, [r4, #8]
 8004230:	bfa4      	itt	ge
 8004232:	f021 0104 	bicge.w	r1, r1, #4
 8004236:	6021      	strge	r1, [r4, #0]
 8004238:	b90d      	cbnz	r5, 800423e <_printf_i+0x11a>
 800423a:	2e00      	cmp	r6, #0
 800423c:	d04d      	beq.n	80042da <_printf_i+0x1b6>
 800423e:	4616      	mov	r6, r2
 8004240:	fbb5 f1f3 	udiv	r1, r5, r3
 8004244:	fb03 5711 	mls	r7, r3, r1, r5
 8004248:	5dc7      	ldrb	r7, [r0, r7]
 800424a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800424e:	462f      	mov	r7, r5
 8004250:	42bb      	cmp	r3, r7
 8004252:	460d      	mov	r5, r1
 8004254:	d9f4      	bls.n	8004240 <_printf_i+0x11c>
 8004256:	2b08      	cmp	r3, #8
 8004258:	d10b      	bne.n	8004272 <_printf_i+0x14e>
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	07df      	lsls	r7, r3, #31
 800425e:	d508      	bpl.n	8004272 <_printf_i+0x14e>
 8004260:	6923      	ldr	r3, [r4, #16]
 8004262:	6861      	ldr	r1, [r4, #4]
 8004264:	4299      	cmp	r1, r3
 8004266:	bfde      	ittt	le
 8004268:	2330      	movle	r3, #48	; 0x30
 800426a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800426e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004272:	1b92      	subs	r2, r2, r6
 8004274:	6122      	str	r2, [r4, #16]
 8004276:	464b      	mov	r3, r9
 8004278:	4621      	mov	r1, r4
 800427a:	4640      	mov	r0, r8
 800427c:	f8cd a000 	str.w	sl, [sp]
 8004280:	aa03      	add	r2, sp, #12
 8004282:	f7ff fedf 	bl	8004044 <_printf_common>
 8004286:	3001      	adds	r0, #1
 8004288:	d14c      	bne.n	8004324 <_printf_i+0x200>
 800428a:	f04f 30ff 	mov.w	r0, #4294967295
 800428e:	b004      	add	sp, #16
 8004290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004294:	4834      	ldr	r0, [pc, #208]	; (8004368 <_printf_i+0x244>)
 8004296:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800429a:	680e      	ldr	r6, [r1, #0]
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	f856 5b04 	ldr.w	r5, [r6], #4
 80042a2:	061f      	lsls	r7, r3, #24
 80042a4:	600e      	str	r6, [r1, #0]
 80042a6:	d514      	bpl.n	80042d2 <_printf_i+0x1ae>
 80042a8:	07d9      	lsls	r1, r3, #31
 80042aa:	bf44      	itt	mi
 80042ac:	f043 0320 	orrmi.w	r3, r3, #32
 80042b0:	6023      	strmi	r3, [r4, #0]
 80042b2:	b91d      	cbnz	r5, 80042bc <_printf_i+0x198>
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	f023 0320 	bic.w	r3, r3, #32
 80042ba:	6023      	str	r3, [r4, #0]
 80042bc:	2310      	movs	r3, #16
 80042be:	e7af      	b.n	8004220 <_printf_i+0xfc>
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	f043 0320 	orr.w	r3, r3, #32
 80042c6:	6023      	str	r3, [r4, #0]
 80042c8:	2378      	movs	r3, #120	; 0x78
 80042ca:	4828      	ldr	r0, [pc, #160]	; (800436c <_printf_i+0x248>)
 80042cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042d0:	e7e3      	b.n	800429a <_printf_i+0x176>
 80042d2:	065e      	lsls	r6, r3, #25
 80042d4:	bf48      	it	mi
 80042d6:	b2ad      	uxthmi	r5, r5
 80042d8:	e7e6      	b.n	80042a8 <_printf_i+0x184>
 80042da:	4616      	mov	r6, r2
 80042dc:	e7bb      	b.n	8004256 <_printf_i+0x132>
 80042de:	680b      	ldr	r3, [r1, #0]
 80042e0:	6826      	ldr	r6, [r4, #0]
 80042e2:	1d1d      	adds	r5, r3, #4
 80042e4:	6960      	ldr	r0, [r4, #20]
 80042e6:	600d      	str	r5, [r1, #0]
 80042e8:	0635      	lsls	r5, r6, #24
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	d501      	bpl.n	80042f2 <_printf_i+0x1ce>
 80042ee:	6018      	str	r0, [r3, #0]
 80042f0:	e002      	b.n	80042f8 <_printf_i+0x1d4>
 80042f2:	0671      	lsls	r1, r6, #25
 80042f4:	d5fb      	bpl.n	80042ee <_printf_i+0x1ca>
 80042f6:	8018      	strh	r0, [r3, #0]
 80042f8:	2300      	movs	r3, #0
 80042fa:	4616      	mov	r6, r2
 80042fc:	6123      	str	r3, [r4, #16]
 80042fe:	e7ba      	b.n	8004276 <_printf_i+0x152>
 8004300:	680b      	ldr	r3, [r1, #0]
 8004302:	1d1a      	adds	r2, r3, #4
 8004304:	600a      	str	r2, [r1, #0]
 8004306:	681e      	ldr	r6, [r3, #0]
 8004308:	2100      	movs	r1, #0
 800430a:	4630      	mov	r0, r6
 800430c:	6862      	ldr	r2, [r4, #4]
 800430e:	f000 f82f 	bl	8004370 <memchr>
 8004312:	b108      	cbz	r0, 8004318 <_printf_i+0x1f4>
 8004314:	1b80      	subs	r0, r0, r6
 8004316:	6060      	str	r0, [r4, #4]
 8004318:	6863      	ldr	r3, [r4, #4]
 800431a:	6123      	str	r3, [r4, #16]
 800431c:	2300      	movs	r3, #0
 800431e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004322:	e7a8      	b.n	8004276 <_printf_i+0x152>
 8004324:	4632      	mov	r2, r6
 8004326:	4649      	mov	r1, r9
 8004328:	4640      	mov	r0, r8
 800432a:	6923      	ldr	r3, [r4, #16]
 800432c:	47d0      	blx	sl
 800432e:	3001      	adds	r0, #1
 8004330:	d0ab      	beq.n	800428a <_printf_i+0x166>
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	079b      	lsls	r3, r3, #30
 8004336:	d413      	bmi.n	8004360 <_printf_i+0x23c>
 8004338:	68e0      	ldr	r0, [r4, #12]
 800433a:	9b03      	ldr	r3, [sp, #12]
 800433c:	4298      	cmp	r0, r3
 800433e:	bfb8      	it	lt
 8004340:	4618      	movlt	r0, r3
 8004342:	e7a4      	b.n	800428e <_printf_i+0x16a>
 8004344:	2301      	movs	r3, #1
 8004346:	4632      	mov	r2, r6
 8004348:	4649      	mov	r1, r9
 800434a:	4640      	mov	r0, r8
 800434c:	47d0      	blx	sl
 800434e:	3001      	adds	r0, #1
 8004350:	d09b      	beq.n	800428a <_printf_i+0x166>
 8004352:	3501      	adds	r5, #1
 8004354:	68e3      	ldr	r3, [r4, #12]
 8004356:	9903      	ldr	r1, [sp, #12]
 8004358:	1a5b      	subs	r3, r3, r1
 800435a:	42ab      	cmp	r3, r5
 800435c:	dcf2      	bgt.n	8004344 <_printf_i+0x220>
 800435e:	e7eb      	b.n	8004338 <_printf_i+0x214>
 8004360:	2500      	movs	r5, #0
 8004362:	f104 0619 	add.w	r6, r4, #25
 8004366:	e7f5      	b.n	8004354 <_printf_i+0x230>
 8004368:	0800461d 	.word	0x0800461d
 800436c:	0800462e 	.word	0x0800462e

08004370 <memchr>:
 8004370:	4603      	mov	r3, r0
 8004372:	b510      	push	{r4, lr}
 8004374:	b2c9      	uxtb	r1, r1
 8004376:	4402      	add	r2, r0
 8004378:	4293      	cmp	r3, r2
 800437a:	4618      	mov	r0, r3
 800437c:	d101      	bne.n	8004382 <memchr+0x12>
 800437e:	2000      	movs	r0, #0
 8004380:	e003      	b.n	800438a <memchr+0x1a>
 8004382:	7804      	ldrb	r4, [r0, #0]
 8004384:	3301      	adds	r3, #1
 8004386:	428c      	cmp	r4, r1
 8004388:	d1f6      	bne.n	8004378 <memchr+0x8>
 800438a:	bd10      	pop	{r4, pc}

0800438c <memcpy>:
 800438c:	440a      	add	r2, r1
 800438e:	4291      	cmp	r1, r2
 8004390:	f100 33ff 	add.w	r3, r0, #4294967295
 8004394:	d100      	bne.n	8004398 <memcpy+0xc>
 8004396:	4770      	bx	lr
 8004398:	b510      	push	{r4, lr}
 800439a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800439e:	4291      	cmp	r1, r2
 80043a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043a4:	d1f9      	bne.n	800439a <memcpy+0xe>
 80043a6:	bd10      	pop	{r4, pc}

080043a8 <memmove>:
 80043a8:	4288      	cmp	r0, r1
 80043aa:	b510      	push	{r4, lr}
 80043ac:	eb01 0402 	add.w	r4, r1, r2
 80043b0:	d902      	bls.n	80043b8 <memmove+0x10>
 80043b2:	4284      	cmp	r4, r0
 80043b4:	4623      	mov	r3, r4
 80043b6:	d807      	bhi.n	80043c8 <memmove+0x20>
 80043b8:	1e43      	subs	r3, r0, #1
 80043ba:	42a1      	cmp	r1, r4
 80043bc:	d008      	beq.n	80043d0 <memmove+0x28>
 80043be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043c6:	e7f8      	b.n	80043ba <memmove+0x12>
 80043c8:	4601      	mov	r1, r0
 80043ca:	4402      	add	r2, r0
 80043cc:	428a      	cmp	r2, r1
 80043ce:	d100      	bne.n	80043d2 <memmove+0x2a>
 80043d0:	bd10      	pop	{r4, pc}
 80043d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043da:	e7f7      	b.n	80043cc <memmove+0x24>

080043dc <_free_r>:
 80043dc:	b538      	push	{r3, r4, r5, lr}
 80043de:	4605      	mov	r5, r0
 80043e0:	2900      	cmp	r1, #0
 80043e2:	d043      	beq.n	800446c <_free_r+0x90>
 80043e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043e8:	1f0c      	subs	r4, r1, #4
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	bfb8      	it	lt
 80043ee:	18e4      	addlt	r4, r4, r3
 80043f0:	f000 f8d0 	bl	8004594 <__malloc_lock>
 80043f4:	4a1e      	ldr	r2, [pc, #120]	; (8004470 <_free_r+0x94>)
 80043f6:	6813      	ldr	r3, [r2, #0]
 80043f8:	4610      	mov	r0, r2
 80043fa:	b933      	cbnz	r3, 800440a <_free_r+0x2e>
 80043fc:	6063      	str	r3, [r4, #4]
 80043fe:	6014      	str	r4, [r2, #0]
 8004400:	4628      	mov	r0, r5
 8004402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004406:	f000 b8cb 	b.w	80045a0 <__malloc_unlock>
 800440a:	42a3      	cmp	r3, r4
 800440c:	d90a      	bls.n	8004424 <_free_r+0x48>
 800440e:	6821      	ldr	r1, [r4, #0]
 8004410:	1862      	adds	r2, r4, r1
 8004412:	4293      	cmp	r3, r2
 8004414:	bf01      	itttt	eq
 8004416:	681a      	ldreq	r2, [r3, #0]
 8004418:	685b      	ldreq	r3, [r3, #4]
 800441a:	1852      	addeq	r2, r2, r1
 800441c:	6022      	streq	r2, [r4, #0]
 800441e:	6063      	str	r3, [r4, #4]
 8004420:	6004      	str	r4, [r0, #0]
 8004422:	e7ed      	b.n	8004400 <_free_r+0x24>
 8004424:	461a      	mov	r2, r3
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	b10b      	cbz	r3, 800442e <_free_r+0x52>
 800442a:	42a3      	cmp	r3, r4
 800442c:	d9fa      	bls.n	8004424 <_free_r+0x48>
 800442e:	6811      	ldr	r1, [r2, #0]
 8004430:	1850      	adds	r0, r2, r1
 8004432:	42a0      	cmp	r0, r4
 8004434:	d10b      	bne.n	800444e <_free_r+0x72>
 8004436:	6820      	ldr	r0, [r4, #0]
 8004438:	4401      	add	r1, r0
 800443a:	1850      	adds	r0, r2, r1
 800443c:	4283      	cmp	r3, r0
 800443e:	6011      	str	r1, [r2, #0]
 8004440:	d1de      	bne.n	8004400 <_free_r+0x24>
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	4401      	add	r1, r0
 8004448:	6011      	str	r1, [r2, #0]
 800444a:	6053      	str	r3, [r2, #4]
 800444c:	e7d8      	b.n	8004400 <_free_r+0x24>
 800444e:	d902      	bls.n	8004456 <_free_r+0x7a>
 8004450:	230c      	movs	r3, #12
 8004452:	602b      	str	r3, [r5, #0]
 8004454:	e7d4      	b.n	8004400 <_free_r+0x24>
 8004456:	6820      	ldr	r0, [r4, #0]
 8004458:	1821      	adds	r1, r4, r0
 800445a:	428b      	cmp	r3, r1
 800445c:	bf01      	itttt	eq
 800445e:	6819      	ldreq	r1, [r3, #0]
 8004460:	685b      	ldreq	r3, [r3, #4]
 8004462:	1809      	addeq	r1, r1, r0
 8004464:	6021      	streq	r1, [r4, #0]
 8004466:	6063      	str	r3, [r4, #4]
 8004468:	6054      	str	r4, [r2, #4]
 800446a:	e7c9      	b.n	8004400 <_free_r+0x24>
 800446c:	bd38      	pop	{r3, r4, r5, pc}
 800446e:	bf00      	nop
 8004470:	20000140 	.word	0x20000140

08004474 <_malloc_r>:
 8004474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004476:	1ccd      	adds	r5, r1, #3
 8004478:	f025 0503 	bic.w	r5, r5, #3
 800447c:	3508      	adds	r5, #8
 800447e:	2d0c      	cmp	r5, #12
 8004480:	bf38      	it	cc
 8004482:	250c      	movcc	r5, #12
 8004484:	2d00      	cmp	r5, #0
 8004486:	4606      	mov	r6, r0
 8004488:	db01      	blt.n	800448e <_malloc_r+0x1a>
 800448a:	42a9      	cmp	r1, r5
 800448c:	d903      	bls.n	8004496 <_malloc_r+0x22>
 800448e:	230c      	movs	r3, #12
 8004490:	6033      	str	r3, [r6, #0]
 8004492:	2000      	movs	r0, #0
 8004494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004496:	f000 f87d 	bl	8004594 <__malloc_lock>
 800449a:	4921      	ldr	r1, [pc, #132]	; (8004520 <_malloc_r+0xac>)
 800449c:	680a      	ldr	r2, [r1, #0]
 800449e:	4614      	mov	r4, r2
 80044a0:	b99c      	cbnz	r4, 80044ca <_malloc_r+0x56>
 80044a2:	4f20      	ldr	r7, [pc, #128]	; (8004524 <_malloc_r+0xb0>)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	b923      	cbnz	r3, 80044b2 <_malloc_r+0x3e>
 80044a8:	4621      	mov	r1, r4
 80044aa:	4630      	mov	r0, r6
 80044ac:	f000 f862 	bl	8004574 <_sbrk_r>
 80044b0:	6038      	str	r0, [r7, #0]
 80044b2:	4629      	mov	r1, r5
 80044b4:	4630      	mov	r0, r6
 80044b6:	f000 f85d 	bl	8004574 <_sbrk_r>
 80044ba:	1c43      	adds	r3, r0, #1
 80044bc:	d123      	bne.n	8004506 <_malloc_r+0x92>
 80044be:	230c      	movs	r3, #12
 80044c0:	4630      	mov	r0, r6
 80044c2:	6033      	str	r3, [r6, #0]
 80044c4:	f000 f86c 	bl	80045a0 <__malloc_unlock>
 80044c8:	e7e3      	b.n	8004492 <_malloc_r+0x1e>
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	1b5b      	subs	r3, r3, r5
 80044ce:	d417      	bmi.n	8004500 <_malloc_r+0x8c>
 80044d0:	2b0b      	cmp	r3, #11
 80044d2:	d903      	bls.n	80044dc <_malloc_r+0x68>
 80044d4:	6023      	str	r3, [r4, #0]
 80044d6:	441c      	add	r4, r3
 80044d8:	6025      	str	r5, [r4, #0]
 80044da:	e004      	b.n	80044e6 <_malloc_r+0x72>
 80044dc:	6863      	ldr	r3, [r4, #4]
 80044de:	42a2      	cmp	r2, r4
 80044e0:	bf0c      	ite	eq
 80044e2:	600b      	streq	r3, [r1, #0]
 80044e4:	6053      	strne	r3, [r2, #4]
 80044e6:	4630      	mov	r0, r6
 80044e8:	f000 f85a 	bl	80045a0 <__malloc_unlock>
 80044ec:	f104 000b 	add.w	r0, r4, #11
 80044f0:	1d23      	adds	r3, r4, #4
 80044f2:	f020 0007 	bic.w	r0, r0, #7
 80044f6:	1ac2      	subs	r2, r0, r3
 80044f8:	d0cc      	beq.n	8004494 <_malloc_r+0x20>
 80044fa:	1a1b      	subs	r3, r3, r0
 80044fc:	50a3      	str	r3, [r4, r2]
 80044fe:	e7c9      	b.n	8004494 <_malloc_r+0x20>
 8004500:	4622      	mov	r2, r4
 8004502:	6864      	ldr	r4, [r4, #4]
 8004504:	e7cc      	b.n	80044a0 <_malloc_r+0x2c>
 8004506:	1cc4      	adds	r4, r0, #3
 8004508:	f024 0403 	bic.w	r4, r4, #3
 800450c:	42a0      	cmp	r0, r4
 800450e:	d0e3      	beq.n	80044d8 <_malloc_r+0x64>
 8004510:	1a21      	subs	r1, r4, r0
 8004512:	4630      	mov	r0, r6
 8004514:	f000 f82e 	bl	8004574 <_sbrk_r>
 8004518:	3001      	adds	r0, #1
 800451a:	d1dd      	bne.n	80044d8 <_malloc_r+0x64>
 800451c:	e7cf      	b.n	80044be <_malloc_r+0x4a>
 800451e:	bf00      	nop
 8004520:	20000140 	.word	0x20000140
 8004524:	20000144 	.word	0x20000144

08004528 <_realloc_r>:
 8004528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452a:	4607      	mov	r7, r0
 800452c:	4614      	mov	r4, r2
 800452e:	460e      	mov	r6, r1
 8004530:	b921      	cbnz	r1, 800453c <_realloc_r+0x14>
 8004532:	4611      	mov	r1, r2
 8004534:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004538:	f7ff bf9c 	b.w	8004474 <_malloc_r>
 800453c:	b922      	cbnz	r2, 8004548 <_realloc_r+0x20>
 800453e:	f7ff ff4d 	bl	80043dc <_free_r>
 8004542:	4625      	mov	r5, r4
 8004544:	4628      	mov	r0, r5
 8004546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004548:	f000 f830 	bl	80045ac <_malloc_usable_size_r>
 800454c:	42a0      	cmp	r0, r4
 800454e:	d20f      	bcs.n	8004570 <_realloc_r+0x48>
 8004550:	4621      	mov	r1, r4
 8004552:	4638      	mov	r0, r7
 8004554:	f7ff ff8e 	bl	8004474 <_malloc_r>
 8004558:	4605      	mov	r5, r0
 800455a:	2800      	cmp	r0, #0
 800455c:	d0f2      	beq.n	8004544 <_realloc_r+0x1c>
 800455e:	4631      	mov	r1, r6
 8004560:	4622      	mov	r2, r4
 8004562:	f7ff ff13 	bl	800438c <memcpy>
 8004566:	4631      	mov	r1, r6
 8004568:	4638      	mov	r0, r7
 800456a:	f7ff ff37 	bl	80043dc <_free_r>
 800456e:	e7e9      	b.n	8004544 <_realloc_r+0x1c>
 8004570:	4635      	mov	r5, r6
 8004572:	e7e7      	b.n	8004544 <_realloc_r+0x1c>

08004574 <_sbrk_r>:
 8004574:	b538      	push	{r3, r4, r5, lr}
 8004576:	2300      	movs	r3, #0
 8004578:	4d05      	ldr	r5, [pc, #20]	; (8004590 <_sbrk_r+0x1c>)
 800457a:	4604      	mov	r4, r0
 800457c:	4608      	mov	r0, r1
 800457e:	602b      	str	r3, [r5, #0]
 8004580:	f7fc ff30 	bl	80013e4 <_sbrk>
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	d102      	bne.n	800458e <_sbrk_r+0x1a>
 8004588:	682b      	ldr	r3, [r5, #0]
 800458a:	b103      	cbz	r3, 800458e <_sbrk_r+0x1a>
 800458c:	6023      	str	r3, [r4, #0]
 800458e:	bd38      	pop	{r3, r4, r5, pc}
 8004590:	20000540 	.word	0x20000540

08004594 <__malloc_lock>:
 8004594:	4801      	ldr	r0, [pc, #4]	; (800459c <__malloc_lock+0x8>)
 8004596:	f000 b811 	b.w	80045bc <__retarget_lock_acquire_recursive>
 800459a:	bf00      	nop
 800459c:	20000548 	.word	0x20000548

080045a0 <__malloc_unlock>:
 80045a0:	4801      	ldr	r0, [pc, #4]	; (80045a8 <__malloc_unlock+0x8>)
 80045a2:	f000 b80c 	b.w	80045be <__retarget_lock_release_recursive>
 80045a6:	bf00      	nop
 80045a8:	20000548 	.word	0x20000548

080045ac <_malloc_usable_size_r>:
 80045ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045b0:	1f18      	subs	r0, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	bfbc      	itt	lt
 80045b6:	580b      	ldrlt	r3, [r1, r0]
 80045b8:	18c0      	addlt	r0, r0, r3
 80045ba:	4770      	bx	lr

080045bc <__retarget_lock_acquire_recursive>:
 80045bc:	4770      	bx	lr

080045be <__retarget_lock_release_recursive>:
 80045be:	4770      	bx	lr

080045c0 <_init>:
 80045c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c2:	bf00      	nop
 80045c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045c6:	bc08      	pop	{r3}
 80045c8:	469e      	mov	lr, r3
 80045ca:	4770      	bx	lr

080045cc <_fini>:
 80045cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ce:	bf00      	nop
 80045d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045d2:	bc08      	pop	{r3}
 80045d4:	469e      	mov	lr, r3
 80045d6:	4770      	bx	lr
