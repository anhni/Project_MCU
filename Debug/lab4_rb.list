
lab4_rb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003874  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003980  08003980  00013980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039a8  080039a8  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  080039a8  080039a8  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039a8  080039a8  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039a8  080039a8  000139a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039ac  080039ac  000139ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  080039b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20000058  08003a08  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08003a08  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2aa  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f59  00000000  00000000  0002c32b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  0002e288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  0002efd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d4a  00000000  00000000  0002fc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7ac  00000000  00000000  00047982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008abd4  00000000  00000000  0005512e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dfd02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035f0  00000000  00000000  000dfd58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08003968 	.word	0x08003968

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08003968 	.word	0x08003968

0800014c <is_Button1_Pressed>:
int TimeOutForKeyPress_1 = 300;
int TimeOutForKeyPress_2 = 100;
int TimeOutForKeyPress_3 = 100;
int TimeOutForKeyPress_4 = 100;
////////////press////////////
int is_Button1_Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <is_Button1_Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <is_Button1_Pressed+0x16>
	{
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <is_Button1_Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <is_Button1_Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000074 	.word	0x20000074

08000170 <is_Button1_Pressed_3s>:
int is_Button1_Pressed_3s(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button1_3s_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <is_Button1_Pressed_3s+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <is_Button1_Pressed_3s+0x16>
	{
		button1_3s_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <is_Button1_Pressed_3s+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <is_Button1_Pressed_3s+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000078 	.word	0x20000078

08000194 <is_Button2_Pressed>:
int is_Button2_Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button2_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <is_Button2_Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <is_Button2_Pressed+0x16>
	{
		button2_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <is_Button2_Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <is_Button2_Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000007c 	.word	0x2000007c

080001b8 <is_Button3_Pressed>:
int is_Button3_Pressed(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if(button3_flag == 1)
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <is_Button3_Pressed+0x20>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <is_Button3_Pressed+0x16>
	{
		button3_flag =0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <is_Button3_Pressed+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <is_Button3_Pressed+0x18>
	}
	return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	20000080 	.word	0x20000080

080001dc <is_Button4_Pressed>:
int is_Button4_Pressed(){
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
	if(button4_flag == 1)
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <is_Button4_Pressed+0x20>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d104      	bne.n	80001f2 <is_Button4_Pressed+0x16>
	{
		button4_flag =0;
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <is_Button4_Pressed+0x20>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
		return 1;
 80001ee:	2301      	movs	r3, #1
 80001f0:	e000      	b.n	80001f4 <is_Button4_Pressed+0x18>
	}
	return 0;
 80001f2:	2300      	movs	r3, #0
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	20000084 	.word	0x20000084

08000200 <subKeyProcess_1>:
///////////subkey////////////

void subKeyProcess_1(){
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	button1_flag=1;
 8000204:	4b03      	ldr	r3, [pc, #12]	; (8000214 <subKeyProcess_1+0x14>)
 8000206:	2201      	movs	r2, #1
 8000208:	601a      	str	r2, [r3, #0]
}
 800020a:	bf00      	nop
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	20000074 	.word	0x20000074

08000218 <subKeyProcess_3s_1>:
void subKeyProcess_3s_1(){
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	button1_3s_flag=1;
 800021c:	4b03      	ldr	r3, [pc, #12]	; (800022c <subKeyProcess_3s_1+0x14>)
 800021e:	2201      	movs	r2, #1
 8000220:	601a      	str	r2, [r3, #0]
}
 8000222:	bf00      	nop
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000078 	.word	0x20000078

08000230 <getKeyInput_1>:
	button3_flag=1;
}
void subKeyProcess_4(){
	button4_flag=1;
}
void getKeyInput_1(){
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  KeyReg10 = KeyReg9;
 8000234:	4b20      	ldr	r3, [pc, #128]	; (80002b8 <getKeyInput_1+0x88>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a20      	ldr	r2, [pc, #128]	; (80002bc <getKeyInput_1+0x8c>)
 800023a:	6013      	str	r3, [r2, #0]
  KeyReg9 = KeyReg8;
 800023c:	4b20      	ldr	r3, [pc, #128]	; (80002c0 <getKeyInput_1+0x90>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a1d      	ldr	r2, [pc, #116]	; (80002b8 <getKeyInput_1+0x88>)
 8000242:	6013      	str	r3, [r2, #0]
  KeyReg8 = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 8000244:	2102      	movs	r1, #2
 8000246:	481f      	ldr	r0, [pc, #124]	; (80002c4 <getKeyInput_1+0x94>)
 8000248:	f001 fbc2 	bl	80019d0 <HAL_GPIO_ReadPin>
 800024c:	4603      	mov	r3, r0
 800024e:	461a      	mov	r2, r3
 8000250:	4b1b      	ldr	r3, [pc, #108]	; (80002c0 <getKeyInput_1+0x90>)
 8000252:	601a      	str	r2, [r3, #0]
  if ((KeyReg9 == KeyReg8) && (KeyReg9 == KeyReg10)){
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <getKeyInput_1+0x88>)
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	4b19      	ldr	r3, [pc, #100]	; (80002c0 <getKeyInput_1+0x90>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	429a      	cmp	r2, r3
 800025e:	d129      	bne.n	80002b4 <getKeyInput_1+0x84>
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <getKeyInput_1+0x88>)
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	4b15      	ldr	r3, [pc, #84]	; (80002bc <getKeyInput_1+0x8c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	429a      	cmp	r2, r3
 800026a:	d123      	bne.n	80002b4 <getKeyInput_1+0x84>
    if (KeyReg10 != KeyReg11){
 800026c:	4b13      	ldr	r3, [pc, #76]	; (80002bc <getKeyInput_1+0x8c>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <getKeyInput_1+0x98>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	429a      	cmp	r2, r3
 8000276:	d00e      	beq.n	8000296 <getKeyInput_1+0x66>
      KeyReg11 = KeyReg10;
 8000278:	4b10      	ldr	r3, [pc, #64]	; (80002bc <getKeyInput_1+0x8c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a12      	ldr	r2, [pc, #72]	; (80002c8 <getKeyInput_1+0x98>)
 800027e:	6013      	str	r3, [r2, #0]

      if (KeyReg10 == PRESSED_STATE){
 8000280:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <getKeyInput_1+0x8c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d115      	bne.n	80002b4 <getKeyInput_1+0x84>
        TimeOutForKeyPress_1 = 300;
 8000288:	4b10      	ldr	r3, [pc, #64]	; (80002cc <getKeyInput_1+0x9c>)
 800028a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800028e:	601a      	str	r2, [r3, #0]
        subKeyProcess_1();
 8000290:	f7ff ffb6 	bl	8000200 <subKeyProcess_1>
//        	TimeOutForKeyPress_1 = 100;

        }
    }
  }
}
 8000294:	e00e      	b.n	80002b4 <getKeyInput_1+0x84>
       TimeOutForKeyPress_1 --;
 8000296:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <getKeyInput_1+0x9c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	3b01      	subs	r3, #1
 800029c:	4a0b      	ldr	r2, [pc, #44]	; (80002cc <getKeyInput_1+0x9c>)
 800029e:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress_1 == 0){
 80002a0:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <getKeyInput_1+0x9c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d105      	bne.n	80002b4 <getKeyInput_1+0x84>
        	if (KeyReg10 == PRESSED_STATE){
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <getKeyInput_1+0x8c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d101      	bne.n	80002b4 <getKeyInput_1+0x84>
        		subKeyProcess_3s_1();
 80002b0:	f7ff ffb2 	bl	8000218 <subKeyProcess_3s_1>
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000024 	.word	0x20000024
 80002bc:	20000028 	.word	0x20000028
 80002c0:	20000020 	.word	0x20000020
 80002c4:	40010800 	.word	0x40010800
 80002c8:	2000002c 	.word	0x2000002c
 80002cc:	20000030 	.word	0x20000030

080002d0 <getKeyInput_2>:
void getKeyInput_2(){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  KeyReg2 = KeyReg1;
 80002d4:	4b23      	ldr	r3, [pc, #140]	; (8000364 <getKeyInput_2+0x94>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a23      	ldr	r2, [pc, #140]	; (8000368 <getKeyInput_2+0x98>)
 80002da:	6013      	str	r3, [r2, #0]
  KeyReg1 = KeyReg0;
 80002dc:	4b23      	ldr	r3, [pc, #140]	; (800036c <getKeyInput_2+0x9c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a20      	ldr	r2, [pc, #128]	; (8000364 <getKeyInput_2+0x94>)
 80002e2:	6013      	str	r3, [r2, #0]
  KeyReg0 = HAL_GPIO_ReadPin(A2_GPIO_Port, A2_Pin);
 80002e4:	2110      	movs	r1, #16
 80002e6:	4822      	ldr	r0, [pc, #136]	; (8000370 <getKeyInput_2+0xa0>)
 80002e8:	f001 fb72 	bl	80019d0 <HAL_GPIO_ReadPin>
 80002ec:	4603      	mov	r3, r0
 80002ee:	461a      	mov	r2, r3
 80002f0:	4b1e      	ldr	r3, [pc, #120]	; (800036c <getKeyInput_2+0x9c>)
 80002f2:	601a      	str	r2, [r3, #0]
  if ((KeyReg1 == KeyReg0) && (KeyReg1 == KeyReg2)){
 80002f4:	4b1b      	ldr	r3, [pc, #108]	; (8000364 <getKeyInput_2+0x94>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	4b1c      	ldr	r3, [pc, #112]	; (800036c <getKeyInput_2+0x9c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d12e      	bne.n	800035e <getKeyInput_2+0x8e>
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <getKeyInput_2+0x94>)
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <getKeyInput_2+0x98>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	429a      	cmp	r2, r3
 800030a:	d128      	bne.n	800035e <getKeyInput_2+0x8e>
	if (KeyReg2 != KeyReg3){
 800030c:	4b16      	ldr	r3, [pc, #88]	; (8000368 <getKeyInput_2+0x98>)
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	4b18      	ldr	r3, [pc, #96]	; (8000374 <getKeyInput_2+0xa4>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	429a      	cmp	r2, r3
 8000316:	d00f      	beq.n	8000338 <getKeyInput_2+0x68>
		KeyReg3 = KeyReg2;
 8000318:	4b13      	ldr	r3, [pc, #76]	; (8000368 <getKeyInput_2+0x98>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a15      	ldr	r2, [pc, #84]	; (8000374 <getKeyInput_2+0xa4>)
 800031e:	6013      	str	r3, [r2, #0]
		if (KeyReg2 == PRESSED_STATE){
 8000320:	4b11      	ldr	r3, [pc, #68]	; (8000368 <getKeyInput_2+0x98>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d11a      	bne.n	800035e <getKeyInput_2+0x8e>
			button2_flag = 1;
 8000328:	4b13      	ldr	r3, [pc, #76]	; (8000378 <getKeyInput_2+0xa8>)
 800032a:	2201      	movs	r2, #1
 800032c:	601a      	str	r2, [r3, #0]
			TimeOutForKeyPress_2 = 300;
 800032e:	4b13      	ldr	r3, [pc, #76]	; (800037c <getKeyInput_2+0xac>)
 8000330:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000334:	601a      	str	r2, [r3, #0]
    		if(KeyReg2 == PRESSED_STATE) button2_flag = 1;
    		TimeOutForKeyPress_2 = 100;
    	}
	}
  }
}
 8000336:	e012      	b.n	800035e <getKeyInput_2+0x8e>
    	TimeOutForKeyPress_2 --;
 8000338:	4b10      	ldr	r3, [pc, #64]	; (800037c <getKeyInput_2+0xac>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3b01      	subs	r3, #1
 800033e:	4a0f      	ldr	r2, [pc, #60]	; (800037c <getKeyInput_2+0xac>)
 8000340:	6013      	str	r3, [r2, #0]
    	if (TimeOutForKeyPress_2 == 0){
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <getKeyInput_2+0xac>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d109      	bne.n	800035e <getKeyInput_2+0x8e>
    		if(KeyReg2 == PRESSED_STATE) button2_flag = 1;
 800034a:	4b07      	ldr	r3, [pc, #28]	; (8000368 <getKeyInput_2+0x98>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d102      	bne.n	8000358 <getKeyInput_2+0x88>
 8000352:	4b09      	ldr	r3, [pc, #36]	; (8000378 <getKeyInput_2+0xa8>)
 8000354:	2201      	movs	r2, #1
 8000356:	601a      	str	r2, [r3, #0]
    		TimeOutForKeyPress_2 = 100;
 8000358:	4b08      	ldr	r3, [pc, #32]	; (800037c <getKeyInput_2+0xac>)
 800035a:	2264      	movs	r2, #100	; 0x64
 800035c:	601a      	str	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000004 	.word	0x20000004
 8000368:	20000008 	.word	0x20000008
 800036c:	20000000 	.word	0x20000000
 8000370:	40010800 	.word	0x40010800
 8000374:	2000000c 	.word	0x2000000c
 8000378:	2000007c 	.word	0x2000007c
 800037c:	20000034 	.word	0x20000034

08000380 <getKeyInput_3>:


void getKeyInput_3(){
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  KeyReg6 = KeyReg5;
 8000384:	4b23      	ldr	r3, [pc, #140]	; (8000414 <getKeyInput_3+0x94>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a23      	ldr	r2, [pc, #140]	; (8000418 <getKeyInput_3+0x98>)
 800038a:	6013      	str	r3, [r2, #0]
  KeyReg5 = KeyReg4;
 800038c:	4b23      	ldr	r3, [pc, #140]	; (800041c <getKeyInput_3+0x9c>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a20      	ldr	r2, [pc, #128]	; (8000414 <getKeyInput_3+0x94>)
 8000392:	6013      	str	r3, [r2, #0]
  KeyReg4 = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin);
 8000394:	2101      	movs	r1, #1
 8000396:	4822      	ldr	r0, [pc, #136]	; (8000420 <getKeyInput_3+0xa0>)
 8000398:	f001 fb1a 	bl	80019d0 <HAL_GPIO_ReadPin>
 800039c:	4603      	mov	r3, r0
 800039e:	461a      	mov	r2, r3
 80003a0:	4b1e      	ldr	r3, [pc, #120]	; (800041c <getKeyInput_3+0x9c>)
 80003a2:	601a      	str	r2, [r3, #0]
  if ((KeyReg5 == KeyReg4) && (KeyReg5 == KeyReg6)){
 80003a4:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <getKeyInput_3+0x94>)
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	4b1c      	ldr	r3, [pc, #112]	; (800041c <getKeyInput_3+0x9c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d12e      	bne.n	800040e <getKeyInput_3+0x8e>
 80003b0:	4b18      	ldr	r3, [pc, #96]	; (8000414 <getKeyInput_3+0x94>)
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	4b18      	ldr	r3, [pc, #96]	; (8000418 <getKeyInput_3+0x98>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d128      	bne.n	800040e <getKeyInput_3+0x8e>
	  if (KeyReg6 != KeyReg7){
 80003bc:	4b16      	ldr	r3, [pc, #88]	; (8000418 <getKeyInput_3+0x98>)
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	4b18      	ldr	r3, [pc, #96]	; (8000424 <getKeyInput_3+0xa4>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	429a      	cmp	r2, r3
 80003c6:	d00f      	beq.n	80003e8 <getKeyInput_3+0x68>
		  KeyReg7 = KeyReg6;
 80003c8:	4b13      	ldr	r3, [pc, #76]	; (8000418 <getKeyInput_3+0x98>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a15      	ldr	r2, [pc, #84]	; (8000424 <getKeyInput_3+0xa4>)
 80003ce:	6013      	str	r3, [r2, #0]
		  if (KeyReg6 == PRESSED_STATE){
 80003d0:	4b11      	ldr	r3, [pc, #68]	; (8000418 <getKeyInput_3+0x98>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d11a      	bne.n	800040e <getKeyInput_3+0x8e>
			  button3_flag = 1;
 80003d8:	4b13      	ldr	r3, [pc, #76]	; (8000428 <getKeyInput_3+0xa8>)
 80003da:	2201      	movs	r2, #1
 80003dc:	601a      	str	r2, [r3, #0]
			  TimeOutForKeyPress_3 = 300;
 80003de:	4b13      	ldr	r3, [pc, #76]	; (800042c <getKeyInput_3+0xac>)
 80003e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003e4:	601a      	str	r2, [r3, #0]
		      	if(KeyReg6 == PRESSED_STATE)button3_flag = 1;
		      	TimeOutForKeyPress_3 = 100;
		  }
	  }
  }
}
 80003e6:	e012      	b.n	800040e <getKeyInput_3+0x8e>
		  TimeOutForKeyPress_3 --;
 80003e8:	4b10      	ldr	r3, [pc, #64]	; (800042c <getKeyInput_3+0xac>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	3b01      	subs	r3, #1
 80003ee:	4a0f      	ldr	r2, [pc, #60]	; (800042c <getKeyInput_3+0xac>)
 80003f0:	6013      	str	r3, [r2, #0]
		  if (TimeOutForKeyPress_3 == 0){
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <getKeyInput_3+0xac>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d109      	bne.n	800040e <getKeyInput_3+0x8e>
		      	if(KeyReg6 == PRESSED_STATE)button3_flag = 1;
 80003fa:	4b07      	ldr	r3, [pc, #28]	; (8000418 <getKeyInput_3+0x98>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d102      	bne.n	8000408 <getKeyInput_3+0x88>
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <getKeyInput_3+0xa8>)
 8000404:	2201      	movs	r2, #1
 8000406:	601a      	str	r2, [r3, #0]
		      	TimeOutForKeyPress_3 = 100;
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <getKeyInput_3+0xac>)
 800040a:	2264      	movs	r2, #100	; 0x64
 800040c:	601a      	str	r2, [r3, #0]
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000014 	.word	0x20000014
 8000418:	20000018 	.word	0x20000018
 800041c:	20000010 	.word	0x20000010
 8000420:	40010c00 	.word	0x40010c00
 8000424:	2000001c 	.word	0x2000001c
 8000428:	20000080 	.word	0x20000080
 800042c:	20000038 	.word	0x20000038

08000430 <fsm_simple_buttons_run>:
#include "software_timer.h"
#include "button.h"
#include "main.h"


void fsm_simple_buttons_run () {
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	switch(mode){
 8000434:	4bb5      	ldr	r3, [pc, #724]	; (800070c <fsm_simple_buttons_run+0x2dc>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b04      	cmp	r3, #4
 800043a:	f200 8182 	bhi.w	8000742 <fsm_simple_buttons_run+0x312>
 800043e:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <fsm_simple_buttons_run+0x14>)
 8000440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000444:	08000459 	.word	0x08000459
 8000448:	08000469 	.word	0x08000469
 800044c:	080004dd 	.word	0x080004dd
 8000450:	08000597 	.word	0x08000597
 8000454:	0800064f 	.word	0x0800064f
		case MODE_INIT:
			setTimer0(1000);
 8000458:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800045c:	f000 fcd2 	bl	8000e04 <setTimer0>
			mode = MODE_1;
 8000460:	4baa      	ldr	r3, [pc, #680]	; (800070c <fsm_simple_buttons_run+0x2dc>)
 8000462:	2201      	movs	r2, #1
 8000464:	601a      	str	r2, [r3, #0]
		break;
 8000466:	e16c      	b.n	8000742 <fsm_simple_buttons_run+0x312>
		case MODE_1:
			fsm_led1_run();
 8000468:	f000 f96e 	bl	8000748 <fsm_led1_run>
			fsm_led2_run();
 800046c:	f000 fa06 	bl	800087c <fsm_led2_run>
			if(timer0_flag == 1){
 8000470:	4ba7      	ldr	r3, [pc, #668]	; (8000710 <fsm_simple_buttons_run+0x2e0>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d10f      	bne.n	8000498 <fsm_simple_buttons_run+0x68>
				if(counter > 0){
 8000478:	4ba6      	ldr	r3, [pc, #664]	; (8000714 <fsm_simple_buttons_run+0x2e4>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	dd08      	ble.n	8000492 <fsm_simple_buttons_run+0x62>
					counter--;
 8000480:	4ba4      	ldr	r3, [pc, #656]	; (8000714 <fsm_simple_buttons_run+0x2e4>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	3b01      	subs	r3, #1
 8000486:	4aa3      	ldr	r2, [pc, #652]	; (8000714 <fsm_simple_buttons_run+0x2e4>)
 8000488:	6013      	str	r3, [r2, #0]
					//print time();
					setTimer0(1000);
 800048a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800048e:	f000 fcb9 	bl	8000e04 <setTimer0>
				}
				time_flag = 1;
 8000492:	4ba1      	ldr	r3, [pc, #644]	; (8000718 <fsm_simple_buttons_run+0x2e8>)
 8000494:	2201      	movs	r2, #1
 8000496:	601a      	str	r2, [r3, #0]
			}
			if(is_Button1_Pressed()){
 8000498:	f7ff fe58 	bl	800014c <is_Button1_Pressed>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d00a      	beq.n	80004b8 <fsm_simple_buttons_run+0x88>
				setTimer0(10000);
 80004a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80004a6:	f000 fcad 	bl	8000e04 <setTimer0>
				setTimer3(1000);
 80004aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ae:	f000 fcf7 	bl	8000ea0 <setTimer3>
				mode = 2;
 80004b2:	4b96      	ldr	r3, [pc, #600]	; (800070c <fsm_simple_buttons_run+0x2dc>)
 80004b4:	2202      	movs	r2, #2
 80004b6:	601a      	str	r2, [r3, #0]
//			}
//			if(is_Button3_Pressed()){
//				setTimer0(10000);
//				mode = 2;
//			}
			if(is_Button4_Pressed()){
 80004b8:	f7ff fe90 	bl	80001dc <is_Button4_Pressed>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	f000 8121 	beq.w	8000706 <fsm_simple_buttons_run+0x2d6>
				setTimer4(1000);
 80004c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c8:	f000 fd04 	bl	8000ed4 <setTimer4>
				setTimer3(10000);
 80004cc:	f242 7010 	movw	r0, #10000	; 0x2710
 80004d0:	f000 fce6 	bl	8000ea0 <setTimer3>
				buzz_flag = 1;
 80004d4:	4b91      	ldr	r3, [pc, #580]	; (800071c <fsm_simple_buttons_run+0x2ec>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	601a      	str	r2, [r3, #0]
			}
		break;
 80004da:	e114      	b.n	8000706 <fsm_simple_buttons_run+0x2d6>
		case MODE_2:
			//setting led red time
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80004dc:	2201      	movs	r2, #1
 80004de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e2:	488f      	ldr	r0, [pc, #572]	; (8000720 <fsm_simple_buttons_run+0x2f0>)
 80004e4:	f001 fa8b 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2108      	movs	r1, #8
 80004ec:	488d      	ldr	r0, [pc, #564]	; (8000724 <fsm_simple_buttons_run+0x2f4>)
 80004ee:	f001 fa86 	bl	80019fe <HAL_GPIO_WritePin>
			//counter
			if(timer3_flag == 1){
 80004f2:	4b8d      	ldr	r3, [pc, #564]	; (8000728 <fsm_simple_buttons_run+0x2f8>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d106      	bne.n	8000508 <fsm_simple_buttons_run+0xd8>
				time_flag = 1;
 80004fa:	4b87      	ldr	r3, [pc, #540]	; (8000718 <fsm_simple_buttons_run+0x2e8>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	601a      	str	r2, [r3, #0]
				setTimer3(1000);
 8000500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000504:	f000 fccc 	bl	8000ea0 <setTimer3>
			}

			if(is_Button1_Pressed()){
 8000508:	f7ff fe20 	bl	800014c <is_Button1_Pressed>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d006      	beq.n	8000520 <fsm_simple_buttons_run+0xf0>
//				counter = 0;
				mode = MODE_3;
 8000512:	4b7e      	ldr	r3, [pc, #504]	; (800070c <fsm_simple_buttons_run+0x2dc>)
 8000514:	2203      	movs	r2, #3
 8000516:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 8000518:	f242 7010 	movw	r0, #10000	; 0x2710
 800051c:	f000 fc72 	bl	8000e04 <setTimer0>
			}

			if(is_Button1_Pressed_3s()){
 8000520:	f7ff fe26 	bl	8000170 <is_Button1_Pressed_3s>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <fsm_simple_buttons_run+0x100>
			//	counter = 0;
				mode = MODE_INIT;
 800052a:	4b78      	ldr	r3, [pc, #480]	; (800070c <fsm_simple_buttons_run+0x2dc>)
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
			}
			if(is_Button2_Pressed()){
 8000530:	f7ff fe30 	bl	8000194 <is_Button2_Pressed>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d00f      	beq.n	800055a <fsm_simple_buttons_run+0x12a>
				led_red++;
 800053a:	4b7c      	ldr	r3, [pc, #496]	; (800072c <fsm_simple_buttons_run+0x2fc>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	3301      	adds	r3, #1
 8000540:	4a7a      	ldr	r2, [pc, #488]	; (800072c <fsm_simple_buttons_run+0x2fc>)
 8000542:	6013      	str	r3, [r2, #0]
				if(led_red > 99) led_red = 0;
 8000544:	4b79      	ldr	r3, [pc, #484]	; (800072c <fsm_simple_buttons_run+0x2fc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b63      	cmp	r3, #99	; 0x63
 800054a:	dd02      	ble.n	8000552 <fsm_simple_buttons_run+0x122>
 800054c:	4b77      	ldr	r3, [pc, #476]	; (800072c <fsm_simple_buttons_run+0x2fc>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 8000552:	f242 7010 	movw	r0, #10000	; 0x2710
 8000556:	f000 fc55 	bl	8000e04 <setTimer0>
			}
			if(is_Button3_Pressed()){
 800055a:	f7ff fe2d 	bl	80001b8 <is_Button3_Pressed>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00f      	beq.n	8000584 <fsm_simple_buttons_run+0x154>
				led_red--;
 8000564:	4b71      	ldr	r3, [pc, #452]	; (800072c <fsm_simple_buttons_run+0x2fc>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	3b01      	subs	r3, #1
 800056a:	4a70      	ldr	r2, [pc, #448]	; (800072c <fsm_simple_buttons_run+0x2fc>)
 800056c:	6013      	str	r3, [r2, #0]
				if(led_red < 0) led_red = 99;
 800056e:	4b6f      	ldr	r3, [pc, #444]	; (800072c <fsm_simple_buttons_run+0x2fc>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	da02      	bge.n	800057c <fsm_simple_buttons_run+0x14c>
 8000576:	4b6d      	ldr	r3, [pc, #436]	; (800072c <fsm_simple_buttons_run+0x2fc>)
 8000578:	2263      	movs	r2, #99	; 0x63
 800057a:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 800057c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000580:	f000 fc40 	bl	8000e04 <setTimer0>
			}
			if(timer0_flag == 1){
 8000584:	4b62      	ldr	r3, [pc, #392]	; (8000710 <fsm_simple_buttons_run+0x2e0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b01      	cmp	r3, #1
 800058a:	f040 80d5 	bne.w	8000738 <fsm_simple_buttons_run+0x308>
				mode = MODE_INIT;
 800058e:	4b5f      	ldr	r3, [pc, #380]	; (800070c <fsm_simple_buttons_run+0x2dc>)
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
			}
		break;
 8000594:	e0d0      	b.n	8000738 <fsm_simple_buttons_run+0x308>
		case MODE_3:
			//setting led green time
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800059c:	4860      	ldr	r0, [pc, #384]	; (8000720 <fsm_simple_buttons_run+0x2f0>)
 800059e:	f001 fa2e 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2108      	movs	r1, #8
 80005a6:	485f      	ldr	r0, [pc, #380]	; (8000724 <fsm_simple_buttons_run+0x2f4>)
 80005a8:	f001 fa29 	bl	80019fe <HAL_GPIO_WritePin>
			//counter
			if(timer3_flag == 1){
 80005ac:	4b5e      	ldr	r3, [pc, #376]	; (8000728 <fsm_simple_buttons_run+0x2f8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d106      	bne.n	80005c2 <fsm_simple_buttons_run+0x192>
				time_flag = 1;
 80005b4:	4b58      	ldr	r3, [pc, #352]	; (8000718 <fsm_simple_buttons_run+0x2e8>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	601a      	str	r2, [r3, #0]
				setTimer3(1000);
 80005ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005be:	f000 fc6f 	bl	8000ea0 <setTimer3>
			}
			if(is_Button1_Pressed()){
 80005c2:	f7ff fdc3 	bl	800014c <is_Button1_Pressed>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d006      	beq.n	80005da <fsm_simple_buttons_run+0x1aa>
//				counter = 0;
				mode = MODE_4;
 80005cc:	4b4f      	ldr	r3, [pc, #316]	; (800070c <fsm_simple_buttons_run+0x2dc>)
 80005ce:	2204      	movs	r2, #4
 80005d0:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 80005d2:	f242 7010 	movw	r0, #10000	; 0x2710
 80005d6:	f000 fc15 	bl	8000e04 <setTimer0>
			}

			if(is_Button1_Pressed_3s()){
 80005da:	f7ff fdc9 	bl	8000170 <is_Button1_Pressed_3s>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d002      	beq.n	80005ea <fsm_simple_buttons_run+0x1ba>
			//	counter = 0;
				mode = MODE_INIT;
 80005e4:	4b49      	ldr	r3, [pc, #292]	; (800070c <fsm_simple_buttons_run+0x2dc>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
			}
			if(is_Button2_Pressed()){
 80005ea:	f7ff fdd3 	bl	8000194 <is_Button2_Pressed>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d00f      	beq.n	8000614 <fsm_simple_buttons_run+0x1e4>
				led_green++;
 80005f4:	4b4e      	ldr	r3, [pc, #312]	; (8000730 <fsm_simple_buttons_run+0x300>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	4a4d      	ldr	r2, [pc, #308]	; (8000730 <fsm_simple_buttons_run+0x300>)
 80005fc:	6013      	str	r3, [r2, #0]
				if(led_green > 99) led_green = 0;
 80005fe:	4b4c      	ldr	r3, [pc, #304]	; (8000730 <fsm_simple_buttons_run+0x300>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b63      	cmp	r3, #99	; 0x63
 8000604:	dd02      	ble.n	800060c <fsm_simple_buttons_run+0x1dc>
 8000606:	4b4a      	ldr	r3, [pc, #296]	; (8000730 <fsm_simple_buttons_run+0x300>)
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 800060c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000610:	f000 fbf8 	bl	8000e04 <setTimer0>
			}
			if(is_Button3_Pressed()){
 8000614:	f7ff fdd0 	bl	80001b8 <is_Button3_Pressed>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d00f      	beq.n	800063e <fsm_simple_buttons_run+0x20e>
				led_green--;
 800061e:	4b44      	ldr	r3, [pc, #272]	; (8000730 <fsm_simple_buttons_run+0x300>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	3b01      	subs	r3, #1
 8000624:	4a42      	ldr	r2, [pc, #264]	; (8000730 <fsm_simple_buttons_run+0x300>)
 8000626:	6013      	str	r3, [r2, #0]
				if(led_green < 0) led_green = 99;
 8000628:	4b41      	ldr	r3, [pc, #260]	; (8000730 <fsm_simple_buttons_run+0x300>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	da02      	bge.n	8000636 <fsm_simple_buttons_run+0x206>
 8000630:	4b3f      	ldr	r3, [pc, #252]	; (8000730 <fsm_simple_buttons_run+0x300>)
 8000632:	2263      	movs	r2, #99	; 0x63
 8000634:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 8000636:	f242 7010 	movw	r0, #10000	; 0x2710
 800063a:	f000 fbe3 	bl	8000e04 <setTimer0>
			}
			if(timer0_flag == 1){
 800063e:	4b34      	ldr	r3, [pc, #208]	; (8000710 <fsm_simple_buttons_run+0x2e0>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d17a      	bne.n	800073c <fsm_simple_buttons_run+0x30c>
				mode = MODE_INIT;
 8000646:	4b31      	ldr	r3, [pc, #196]	; (800070c <fsm_simple_buttons_run+0x2dc>)
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
			}
		break;
 800064c:	e076      	b.n	800073c <fsm_simple_buttons_run+0x30c>
		case MODE_4:
			//setting led yellow time
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 800064e:	2201      	movs	r2, #1
 8000650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000654:	4832      	ldr	r0, [pc, #200]	; (8000720 <fsm_simple_buttons_run+0x2f0>)
 8000656:	f001 f9d2 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 800065a:	2201      	movs	r2, #1
 800065c:	2108      	movs	r1, #8
 800065e:	4831      	ldr	r0, [pc, #196]	; (8000724 <fsm_simple_buttons_run+0x2f4>)
 8000660:	f001 f9cd 	bl	80019fe <HAL_GPIO_WritePin>
			//counter
			if(timer3_flag == 1){
 8000664:	4b30      	ldr	r3, [pc, #192]	; (8000728 <fsm_simple_buttons_run+0x2f8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d106      	bne.n	800067a <fsm_simple_buttons_run+0x24a>
				time_flag = 1;
 800066c:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <fsm_simple_buttons_run+0x2e8>)
 800066e:	2201      	movs	r2, #1
 8000670:	601a      	str	r2, [r3, #0]
				setTimer3(1000);
 8000672:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000676:	f000 fc13 	bl	8000ea0 <setTimer3>
			}
			if(is_Button1_Pressed()){
 800067a:	f7ff fd67 	bl	800014c <is_Button1_Pressed>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d006      	beq.n	8000692 <fsm_simple_buttons_run+0x262>
//				counter = 0;
				mode = MODE_INIT;
 8000684:	4b21      	ldr	r3, [pc, #132]	; (800070c <fsm_simple_buttons_run+0x2dc>)
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 800068a:	f242 7010 	movw	r0, #10000	; 0x2710
 800068e:	f000 fbb9 	bl	8000e04 <setTimer0>
			}
			if(is_Button1_Pressed_3s()){
 8000692:	f7ff fd6d 	bl	8000170 <is_Button1_Pressed_3s>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <fsm_simple_buttons_run+0x272>
				//	counter = 0;
				mode = MODE_INIT;
 800069c:	4b1b      	ldr	r3, [pc, #108]	; (800070c <fsm_simple_buttons_run+0x2dc>)
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
			}
			if(is_Button2_Pressed()){
 80006a2:	f7ff fd77 	bl	8000194 <is_Button2_Pressed>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d00f      	beq.n	80006cc <fsm_simple_buttons_run+0x29c>
				led_yellow++;
 80006ac:	4b21      	ldr	r3, [pc, #132]	; (8000734 <fsm_simple_buttons_run+0x304>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	4a20      	ldr	r2, [pc, #128]	; (8000734 <fsm_simple_buttons_run+0x304>)
 80006b4:	6013      	str	r3, [r2, #0]
				if(led_yellow > 99) led_yellow = 0;
 80006b6:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <fsm_simple_buttons_run+0x304>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b63      	cmp	r3, #99	; 0x63
 80006bc:	dd02      	ble.n	80006c4 <fsm_simple_buttons_run+0x294>
 80006be:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <fsm_simple_buttons_run+0x304>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 80006c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80006c8:	f000 fb9c 	bl	8000e04 <setTimer0>
			}
			if(is_Button3_Pressed()){
 80006cc:	f7ff fd74 	bl	80001b8 <is_Button3_Pressed>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d00f      	beq.n	80006f6 <fsm_simple_buttons_run+0x2c6>
				led_yellow--;
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <fsm_simple_buttons_run+0x304>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3b01      	subs	r3, #1
 80006dc:	4a15      	ldr	r2, [pc, #84]	; (8000734 <fsm_simple_buttons_run+0x304>)
 80006de:	6013      	str	r3, [r2, #0]
				if(led_yellow < 0) led_yellow = 99;
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <fsm_simple_buttons_run+0x304>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	da02      	bge.n	80006ee <fsm_simple_buttons_run+0x2be>
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <fsm_simple_buttons_run+0x304>)
 80006ea:	2263      	movs	r2, #99	; 0x63
 80006ec:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 80006ee:	f242 7010 	movw	r0, #10000	; 0x2710
 80006f2:	f000 fb87 	bl	8000e04 <setTimer0>
			}
			if(timer0_flag == 1){
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <fsm_simple_buttons_run+0x2e0>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d120      	bne.n	8000740 <fsm_simple_buttons_run+0x310>
				mode = MODE_INIT;
 80006fe:	4b03      	ldr	r3, [pc, #12]	; (800070c <fsm_simple_buttons_run+0x2dc>)
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
			}
			break;
 8000704:	e01c      	b.n	8000740 <fsm_simple_buttons_run+0x310>
		break;
 8000706:	bf00      	nop
 8000708:	e01b      	b.n	8000742 <fsm_simple_buttons_run+0x312>
 800070a:	bf00      	nop
 800070c:	2000008c 	.word	0x2000008c
 8000710:	200000a0 	.word	0x200000a0
 8000714:	20000088 	.word	0x20000088
 8000718:	20000098 	.word	0x20000098
 800071c:	2000009c 	.word	0x2000009c
 8000720:	40010800 	.word	0x40010800
 8000724:	40010c00 	.word	0x40010c00
 8000728:	200000b8 	.word	0x200000b8
 800072c:	20000040 	.word	0x20000040
 8000730:	20000044 	.word	0x20000044
 8000734:	20000048 	.word	0x20000048
		break;
 8000738:	bf00      	nop
 800073a:	e002      	b.n	8000742 <fsm_simple_buttons_run+0x312>
		break;
 800073c:	bf00      	nop
 800073e:	e000      	b.n	8000742 <fsm_simple_buttons_run+0x312>
			break;
 8000740:	bf00      	nop
	}
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop

08000748 <fsm_led1_run>:
void fsm_led1_run(){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	switch(mode_led1){
 800074c:	4b43      	ldr	r3, [pc, #268]	; (800085c <fsm_led1_run+0x114>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b03      	cmp	r3, #3
 8000752:	f200 8081 	bhi.w	8000858 <fsm_led1_run+0x110>
 8000756:	a201      	add	r2, pc, #4	; (adr r2, 800075c <fsm_led1_run+0x14>)
 8000758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075c:	0800076d 	.word	0x0800076d
 8000760:	0800078f 	.word	0x0800078f
 8000764:	080007cf 	.word	0x080007cf
 8000768:	0800080f 	.word	0x0800080f
		case MODE_LED_INIT:
			setTimer1(led_red*1000);
 800076c:	4b3c      	ldr	r3, [pc, #240]	; (8000860 <fsm_led1_run+0x118>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000774:	fb02 f303 	mul.w	r3, r2, r3
 8000778:	4618      	mov	r0, r3
 800077a:	f000 fb5d 	bl	8000e38 <setTimer1>
			counter = led_red;
 800077e:	4b38      	ldr	r3, [pc, #224]	; (8000860 <fsm_led1_run+0x118>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a38      	ldr	r2, [pc, #224]	; (8000864 <fsm_led1_run+0x11c>)
 8000784:	6013      	str	r3, [r2, #0]
			mode_led1 = MODE_LED_1;
 8000786:	4b35      	ldr	r3, [pc, #212]	; (800085c <fsm_led1_run+0x114>)
 8000788:	2201      	movs	r2, #1
 800078a:	601a      	str	r2, [r3, #0]
		break;
 800078c:	e064      	b.n	8000858 <fsm_led1_run+0x110>
		case MODE_LED_1:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000794:	4834      	ldr	r0, [pc, #208]	; (8000868 <fsm_led1_run+0x120>)
 8000796:	f001 f932 	bl	80019fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2108      	movs	r1, #8
 800079e:	4833      	ldr	r0, [pc, #204]	; (800086c <fsm_led1_run+0x124>)
 80007a0:	f001 f92d 	bl	80019fe <HAL_GPIO_WritePin>
		if(timer1_flag == 1){
 80007a4:	4b32      	ldr	r3, [pc, #200]	; (8000870 <fsm_led1_run+0x128>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d150      	bne.n	800084e <fsm_led1_run+0x106>
			mode_led1 = MODE_LED_2;
 80007ac:	4b2b      	ldr	r3, [pc, #172]	; (800085c <fsm_led1_run+0x114>)
 80007ae:	2202      	movs	r2, #2
 80007b0:	601a      	str	r2, [r3, #0]
			counter = led_green;
 80007b2:	4b30      	ldr	r3, [pc, #192]	; (8000874 <fsm_led1_run+0x12c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a2b      	ldr	r2, [pc, #172]	; (8000864 <fsm_led1_run+0x11c>)
 80007b8:	6013      	str	r3, [r2, #0]
			setTimer1(led_green*1000);
 80007ba:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <fsm_led1_run+0x12c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007c2:	fb02 f303 	mul.w	r3, r2, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fb36 	bl	8000e38 <setTimer1>
		}
		break;
 80007cc:	e03f      	b.n	800084e <fsm_led1_run+0x106>
		case MODE_LED_2:
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d4:	4824      	ldr	r0, [pc, #144]	; (8000868 <fsm_led1_run+0x120>)
 80007d6:	f001 f912 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	2108      	movs	r1, #8
 80007de:	4823      	ldr	r0, [pc, #140]	; (800086c <fsm_led1_run+0x124>)
 80007e0:	f001 f90d 	bl	80019fe <HAL_GPIO_WritePin>
			if(timer1_flag == 1){
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <fsm_led1_run+0x128>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d132      	bne.n	8000852 <fsm_led1_run+0x10a>
				mode_led1 = MODE_LED_3;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <fsm_led1_run+0x114>)
 80007ee:	2203      	movs	r2, #3
 80007f0:	601a      	str	r2, [r3, #0]
				counter = led_yellow;
 80007f2:	4b21      	ldr	r3, [pc, #132]	; (8000878 <fsm_led1_run+0x130>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <fsm_led1_run+0x11c>)
 80007f8:	6013      	str	r3, [r2, #0]
				setTimer1(led_yellow*1000);
 80007fa:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <fsm_led1_run+0x130>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000802:	fb02 f303 	mul.w	r3, r2, r3
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fb16 	bl	8000e38 <setTimer1>
			}
		break;
 800080c:	e021      	b.n	8000852 <fsm_led1_run+0x10a>
		case MODE_LED_3:
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000814:	4814      	ldr	r0, [pc, #80]	; (8000868 <fsm_led1_run+0x120>)
 8000816:	f001 f8f2 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 800081a:	2201      	movs	r2, #1
 800081c:	2108      	movs	r1, #8
 800081e:	4813      	ldr	r0, [pc, #76]	; (800086c <fsm_led1_run+0x124>)
 8000820:	f001 f8ed 	bl	80019fe <HAL_GPIO_WritePin>
			if(timer1_flag == 1){
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <fsm_led1_run+0x128>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d114      	bne.n	8000856 <fsm_led1_run+0x10e>
				mode_led1 = MODE_LED_1;
 800082c:	4b0b      	ldr	r3, [pc, #44]	; (800085c <fsm_led1_run+0x114>)
 800082e:	2201      	movs	r2, #1
 8000830:	601a      	str	r2, [r3, #0]
				counter = led_red;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <fsm_led1_run+0x118>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a0b      	ldr	r2, [pc, #44]	; (8000864 <fsm_led1_run+0x11c>)
 8000838:	6013      	str	r3, [r2, #0]
				setTimer1(led_red*1000);
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <fsm_led1_run+0x118>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000842:	fb02 f303 	mul.w	r3, r2, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f000 faf6 	bl	8000e38 <setTimer1>
			}
		break;
 800084c:	e003      	b.n	8000856 <fsm_led1_run+0x10e>
		break;
 800084e:	bf00      	nop
 8000850:	e002      	b.n	8000858 <fsm_led1_run+0x110>
		break;
 8000852:	bf00      	nop
 8000854:	e000      	b.n	8000858 <fsm_led1_run+0x110>
		break;
 8000856:	bf00      	nop
	}
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000090 	.word	0x20000090
 8000860:	20000040 	.word	0x20000040
 8000864:	20000088 	.word	0x20000088
 8000868:	40010800 	.word	0x40010800
 800086c:	40010c00 	.word	0x40010c00
 8000870:	200000a8 	.word	0x200000a8
 8000874:	20000044 	.word	0x20000044
 8000878:	20000048 	.word	0x20000048

0800087c <fsm_led2_run>:

void fsm_led2_run(){
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	switch(mode_led2){
 8000880:	4b3a      	ldr	r3, [pc, #232]	; (800096c <fsm_led2_run+0xf0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b03      	cmp	r3, #3
 8000886:	d86e      	bhi.n	8000966 <fsm_led2_run+0xea>
 8000888:	a201      	add	r2, pc, #4	; (adr r2, 8000890 <fsm_led2_run+0x14>)
 800088a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088e:	bf00      	nop
 8000890:	080008a1 	.word	0x080008a1
 8000894:	080008bb 	.word	0x080008bb
 8000898:	080008f1 	.word	0x080008f1
 800089c:	08000927 	.word	0x08000927
		case MODE_LED_INIT:
			setTimer2(led_green*1000);
 80008a0:	4b33      	ldr	r3, [pc, #204]	; (8000970 <fsm_led2_run+0xf4>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008a8:	fb02 f303 	mul.w	r3, r2, r3
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 fadd 	bl	8000e6c <setTimer2>
			mode_led2 = MODE_LED_2;
 80008b2:	4b2e      	ldr	r3, [pc, #184]	; (800096c <fsm_led2_run+0xf0>)
 80008b4:	2202      	movs	r2, #2
 80008b6:	601a      	str	r2, [r3, #0]
		break;
 80008b8:	e055      	b.n	8000966 <fsm_led2_run+0xea>
		case MODE_LED_1:
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	2120      	movs	r1, #32
 80008be:	482d      	ldr	r0, [pc, #180]	; (8000974 <fsm_led2_run+0xf8>)
 80008c0:	f001 f89d 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2110      	movs	r1, #16
 80008c8:	482a      	ldr	r0, [pc, #168]	; (8000974 <fsm_led2_run+0xf8>)
 80008ca:	f001 f898 	bl	80019fe <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 80008ce:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <fsm_led2_run+0xfc>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d142      	bne.n	800095c <fsm_led2_run+0xe0>
				mode_led2 = MODE_LED_2;
 80008d6:	4b25      	ldr	r3, [pc, #148]	; (800096c <fsm_led2_run+0xf0>)
 80008d8:	2202      	movs	r2, #2
 80008da:	601a      	str	r2, [r3, #0]
				setTimer2(led_green*1000);
 80008dc:	4b24      	ldr	r3, [pc, #144]	; (8000970 <fsm_led2_run+0xf4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008e4:	fb02 f303 	mul.w	r3, r2, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 fabf 	bl	8000e6c <setTimer2>
			}
		break;
 80008ee:	e035      	b.n	800095c <fsm_led2_run+0xe0>
		case MODE_LED_2:
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2120      	movs	r1, #32
 80008f4:	481f      	ldr	r0, [pc, #124]	; (8000974 <fsm_led2_run+0xf8>)
 80008f6:	f001 f882 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	2110      	movs	r1, #16
 80008fe:	481d      	ldr	r0, [pc, #116]	; (8000974 <fsm_led2_run+0xf8>)
 8000900:	f001 f87d 	bl	80019fe <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 8000904:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <fsm_led2_run+0xfc>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d129      	bne.n	8000960 <fsm_led2_run+0xe4>
				mode_led2 = MODE_LED_3;
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <fsm_led2_run+0xf0>)
 800090e:	2203      	movs	r2, #3
 8000910:	601a      	str	r2, [r3, #0]
				setTimer2(led_yellow*1000);
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <fsm_led2_run+0x100>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800091a:	fb02 f303 	mul.w	r3, r2, r3
 800091e:	4618      	mov	r0, r3
 8000920:	f000 faa4 	bl	8000e6c <setTimer2>
			}
		break;
 8000924:	e01c      	b.n	8000960 <fsm_led2_run+0xe4>
		case MODE_LED_3:
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000926:	2201      	movs	r2, #1
 8000928:	2120      	movs	r1, #32
 800092a:	4812      	ldr	r0, [pc, #72]	; (8000974 <fsm_led2_run+0xf8>)
 800092c:	f001 f867 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000930:	2201      	movs	r2, #1
 8000932:	2110      	movs	r1, #16
 8000934:	480f      	ldr	r0, [pc, #60]	; (8000974 <fsm_led2_run+0xf8>)
 8000936:	f001 f862 	bl	80019fe <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <fsm_led2_run+0xfc>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d110      	bne.n	8000964 <fsm_led2_run+0xe8>
				mode_led2 = MODE_LED_1;
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <fsm_led2_run+0xf0>)
 8000944:	2201      	movs	r2, #1
 8000946:	601a      	str	r2, [r3, #0]
				setTimer2(led_red*1000);
 8000948:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <fsm_led2_run+0x104>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000950:	fb02 f303 	mul.w	r3, r2, r3
 8000954:	4618      	mov	r0, r3
 8000956:	f000 fa89 	bl	8000e6c <setTimer2>
			}
		break;
 800095a:	e003      	b.n	8000964 <fsm_led2_run+0xe8>
		break;
 800095c:	bf00      	nop
 800095e:	e002      	b.n	8000966 <fsm_led2_run+0xea>
		break;
 8000960:	bf00      	nop
 8000962:	e000      	b.n	8000966 <fsm_led2_run+0xea>
		break;
 8000964:	bf00      	nop
	}
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000094 	.word	0x20000094
 8000970:	20000044 	.word	0x20000044
 8000974:	40010c00 	.word	0x40010c00
 8000978:	200000b0 	.word	0x200000b0
 800097c:	20000048 	.word	0x20000048
 8000980:	20000040 	.word	0x20000040

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000988:	f000 fc7e 	bl	8001288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098c:	f000 f816 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000990:	f000 f942 	bl	8000c18 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000994:	f000 f8a0 	bl	8000ad8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000998:	f000 f852 	bl	8000a40 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800099c:	f000 f912 	bl	8000bc4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80009a0:	4804      	ldr	r0, [pc, #16]	; (80009b4 <main+0x30>)
 80009a2:	f001 fcaf 	bl	8002304 <HAL_TIM_Base_Start_IT>
  HAL_TIMEx_PWMN_Start(&htim3, TIM_CHANNEL_1);
 80009a6:	2100      	movs	r1, #0
 80009a8:	4803      	ldr	r0, [pc, #12]	; (80009b8 <main+0x34>)
 80009aa:	f002 fa83 	bl	8002eb4 <HAL_TIMEx_PWMN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 fsm_simple_buttons_run();
 80009ae:	f7ff fd3f 	bl	8000430 <fsm_simple_buttons_run>
 80009b2:	e7fc      	b.n	80009ae <main+0x2a>
 80009b4:	20000110 	.word	0x20000110
 80009b8:	200000c8 	.word	0x200000c8

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b090      	sub	sp, #64	; 0x40
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 0318 	add.w	r3, r7, #24
 80009c6:	2228      	movs	r2, #40	; 0x28
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 ffc4 	bl	8003958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009de:	2302      	movs	r3, #2
 80009e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e2:	2301      	movs	r3, #1
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e6:	2310      	movs	r3, #16
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ea:	2302      	movs	r3, #2
 80009ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80009ee:	2300      	movs	r3, #0
 80009f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80009f2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80009f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f8:	f107 0318 	add.w	r3, r7, #24
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 f817 	bl	8001a30 <HAL_RCC_OscConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a08:	f000 f986 	bl	8000d18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a10:	2302      	movs	r3, #2
 8000a12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2102      	movs	r1, #2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 fa82 	bl	8001f30 <HAL_RCC_ClockConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000a32:	f000 f971 	bl	8000d18 <Error_Handler>
  }
}
 8000a36:	bf00      	nop
 8000a38:	3740      	adds	r7, #64	; 0x40
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a54:	463b      	mov	r3, r7
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <MX_TIM2_Init+0x94>)
 8000a5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <MX_TIM2_Init+0x94>)
 8000a66:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <MX_TIM2_Init+0x94>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_TIM2_Init+0x94>)
 8000a74:	224f      	movs	r2, #79	; 0x4f
 8000a76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a78:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <MX_TIM2_Init+0x94>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_TIM2_Init+0x94>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a84:	4813      	ldr	r0, [pc, #76]	; (8000ad4 <MX_TIM2_Init+0x94>)
 8000a86:	f001 fbed 	bl	8002264 <HAL_TIM_Base_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a90:	f000 f942 	bl	8000d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <MX_TIM2_Init+0x94>)
 8000aa2:	f001 fe9f 	bl	80027e4 <HAL_TIM_ConfigClockSource>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000aac:	f000 f934 	bl	8000d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ab8:	463b      	mov	r3, r7
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_TIM2_Init+0x94>)
 8000abe:	f002 fa97 	bl	8002ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ac8:	f000 f926 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000110 	.word	0x20000110

08000ad8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08e      	sub	sp, #56	; 0x38
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aec:	f107 0320 	add.w	r3, r7, #32
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
 8000b04:	615a      	str	r2, [r3, #20]
 8000b06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b08:	4b2c      	ldr	r3, [pc, #176]	; (8000bbc <MX_TIM3_Init+0xe4>)
 8000b0a:	4a2d      	ldr	r2, [pc, #180]	; (8000bc0 <MX_TIM3_Init+0xe8>)
 8000b0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000b0e:	4b2b      	ldr	r3, [pc, #172]	; (8000bbc <MX_TIM3_Init+0xe4>)
 8000b10:	223f      	movs	r2, #63	; 0x3f
 8000b12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b14:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <MX_TIM3_Init+0xe4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000b1a:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <MX_TIM3_Init+0xe4>)
 8000b1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b22:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <MX_TIM3_Init+0xe4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b28:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <MX_TIM3_Init+0xe4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b2e:	4823      	ldr	r0, [pc, #140]	; (8000bbc <MX_TIM3_Init+0xe4>)
 8000b30:	f001 fb98 	bl	8002264 <HAL_TIM_Base_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b3a:	f000 f8ed 	bl	8000d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	481c      	ldr	r0, [pc, #112]	; (8000bbc <MX_TIM3_Init+0xe4>)
 8000b4c:	f001 fe4a 	bl	80027e4 <HAL_TIM_ConfigClockSource>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b56:	f000 f8df 	bl	8000d18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b5a:	4818      	ldr	r0, [pc, #96]	; (8000bbc <MX_TIM3_Init+0xe4>)
 8000b5c:	f001 fc24 	bl	80023a8 <HAL_TIM_PWM_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b66:	f000 f8d7 	bl	8000d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b72:	f107 0320 	add.w	r3, r7, #32
 8000b76:	4619      	mov	r1, r3
 8000b78:	4810      	ldr	r0, [pc, #64]	; (8000bbc <MX_TIM3_Init+0xe4>)
 8000b7a:	f002 fa39 	bl	8002ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b84:	f000 f8c8 	bl	8000d18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b88:	2360      	movs	r3, #96	; 0x60
 8000b8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4807      	ldr	r0, [pc, #28]	; (8000bbc <MX_TIM3_Init+0xe4>)
 8000ba0:	f001 fd62 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000baa:	f000 f8b5 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bae:	4803      	ldr	r0, [pc, #12]	; (8000bbc <MX_TIM3_Init+0xe4>)
 8000bb0:	f000 fa7e 	bl	80010b0 <HAL_TIM_MspPostInit>

}
 8000bb4:	bf00      	nop
 8000bb6:	3738      	adds	r7, #56	; 0x38
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200000c8 	.word	0x200000c8
 8000bc0:	40000400 	.word	0x40000400

08000bc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <MX_USART2_UART_Init+0x50>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bfc:	f002 fa8c 	bl	8003118 <HAL_UART_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c06:	f000 f887 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000158 	.word	0x20000158
 8000c14:	40004400 	.word	0x40004400

08000c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <MX_GPIO_Init+0xd0>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a2d      	ldr	r2, [pc, #180]	; (8000ce8 <MX_GPIO_Init+0xd0>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <MX_GPIO_Init+0xd0>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c44:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <MX_GPIO_Init+0xd0>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a27      	ldr	r2, [pc, #156]	; (8000ce8 <MX_GPIO_Init+0xd0>)
 8000c4a:	f043 0308 	orr.w	r3, r3, #8
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <MX_GPIO_Init+0xd0>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0308 	and.w	r3, r3, #8
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000c62:	4822      	ldr	r0, [pc, #136]	; (8000cec <MX_GPIO_Init+0xd4>)
 8000c64:	f000 fecb 	bl	80019fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000c6e:	4820      	ldr	r0, [pc, #128]	; (8000cf0 <MX_GPIO_Init+0xd8>)
 8000c70:	f000 fec5 	bl	80019fe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8000c74:	2313      	movs	r3, #19
 8000c76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	4619      	mov	r1, r3
 8000c86:	481a      	ldr	r0, [pc, #104]	; (8000cf0 <MX_GPIO_Init+0xd8>)
 8000c88:	f000 fd1e 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4813      	ldr	r0, [pc, #76]	; (8000cec <MX_GPIO_Init+0xd4>)
 8000ca0:	f000 fd12 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000ca4:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000ca8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480b      	ldr	r0, [pc, #44]	; (8000cec <MX_GPIO_Init+0xd4>)
 8000cbe:	f000 fd03 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8000cc2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000cc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0308 	add.w	r3, r7, #8
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_GPIO_Init+0xd8>)
 8000cdc:	f000 fcf4 	bl	80016c8 <HAL_GPIO_Init>

}
 8000ce0:	bf00      	nop
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010c00 	.word	0x40010c00
 8000cf0:	40010800 	.word	0x40010800

08000cf4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000cfc:	f000 f812 	bl	8000d24 <SCH_Update>
	timerRun();
 8000d00:	f000 f902 	bl	8000f08 <timerRun>
	getKeyInput_1();
 8000d04:	f7ff fa94 	bl	8000230 <getKeyInput_1>
	getKeyInput_2();
 8000d08:	f7ff fae2 	bl	80002d0 <getKeyInput_2>
	getKeyInput_3();
 8000d0c:	f7ff fb38 	bl	8000380 <getKeyInput_3>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <Error_Handler+0x8>
	...

08000d24 <SCH_Update>:
	SCH_tasks_G[Index].TaskID = Index;

	return Index;
}

void SCH_Update(void){
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
	unsigned char Index ;
	// NOTE: calculations are in *TICKS* (not milliseconds)
	for( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	71fb      	strb	r3, [r7, #7]
 8000d2e:	e05d      	b.n	8000dec <SCH_Update+0xc8>
		// Check i f there is a task at this location
		if(SCH_tasks_G[Index].pTask ) {
 8000d30:	79fa      	ldrb	r2, [r7, #7]
 8000d32:	4933      	ldr	r1, [pc, #204]	; (8000e00 <SCH_Update+0xdc>)
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d050      	beq.n	8000de6 <SCH_Update+0xc2>
			if(SCH_tasks_G[Index].Delay == 0 ) {
 8000d44:	79fa      	ldrb	r2, [r7, #7]
 8000d46:	492e      	ldr	r1, [pc, #184]	; (8000e00 <SCH_Update+0xdc>)
 8000d48:	4613      	mov	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	440b      	add	r3, r1
 8000d52:	3304      	adds	r3, #4
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d132      	bne.n	8000dc0 <SCH_Update+0x9c>
				// The task i s due to run
				// Inc . the ’RunMe’ flag
				SCH_tasks_G[Index].RunMe += 1;
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	4928      	ldr	r1, [pc, #160]	; (8000e00 <SCH_Update+0xdc>)
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	440b      	add	r3, r1
 8000d68:	330c      	adds	r3, #12
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	79fa      	ldrb	r2, [r7, #7]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	b2d8      	uxtb	r0, r3
 8000d72:	4923      	ldr	r1, [pc, #140]	; (8000e00 <SCH_Update+0xdc>)
 8000d74:	4613      	mov	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4413      	add	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	330c      	adds	r3, #12
 8000d80:	4602      	mov	r2, r0
 8000d82:	701a      	strb	r2, [r3, #0]
				if(SCH_tasks_G [Index].Period ) {
 8000d84:	79fa      	ldrb	r2, [r7, #7]
 8000d86:	491e      	ldr	r1, [pc, #120]	; (8000e00 <SCH_Update+0xdc>)
 8000d88:	4613      	mov	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	440b      	add	r3, r1
 8000d92:	3308      	adds	r3, #8
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d025      	beq.n	8000de6 <SCH_Update+0xc2>
					// Schedule periodic tasks to run again
					SCH_tasks_G [Index].Delay = SCH_tasks_G[Index].Period ;
 8000d9a:	79f9      	ldrb	r1, [r7, #7]
 8000d9c:	79fa      	ldrb	r2, [r7, #7]
 8000d9e:	4818      	ldr	r0, [pc, #96]	; (8000e00 <SCH_Update+0xdc>)
 8000da0:	460b      	mov	r3, r1
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	440b      	add	r3, r1
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4403      	add	r3, r0
 8000daa:	3308      	adds	r3, #8
 8000dac:	6819      	ldr	r1, [r3, #0]
 8000dae:	4814      	ldr	r0, [pc, #80]	; (8000e00 <SCH_Update+0xdc>)
 8000db0:	4613      	mov	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4403      	add	r3, r0
 8000dba:	3304      	adds	r3, #4
 8000dbc:	6019      	str	r1, [r3, #0]
 8000dbe:	e012      	b.n	8000de6 <SCH_Update+0xc2>
				}
			}else{
				// Not yet ready to run : just decrement the delay
				SCH_tasks_G [Index].Delay -= 1;
 8000dc0:	79fa      	ldrb	r2, [r7, #7]
 8000dc2:	490f      	ldr	r1, [pc, #60]	; (8000e00 <SCH_Update+0xdc>)
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	440b      	add	r3, r1
 8000dce:	3304      	adds	r3, #4
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	79fa      	ldrb	r2, [r7, #7]
 8000dd4:	1e59      	subs	r1, r3, #1
 8000dd6:	480a      	ldr	r0, [pc, #40]	; (8000e00 <SCH_Update+0xdc>)
 8000dd8:	4613      	mov	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4403      	add	r3, r0
 8000de2:	3304      	adds	r3, #4
 8000de4:	6019      	str	r1, [r3, #0]
	for( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	3301      	adds	r3, #1
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	2b27      	cmp	r3, #39	; 0x27
 8000df0:	d99e      	bls.n	8000d30 <SCH_Update+0xc>
//		}else{
//			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
//			SCH_tasks_G[i].RunMe+=1;
//		}
//	}
}
 8000df2:	bf00      	nop
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	2000019c 	.word	0x2000019c

08000e04 <setTimer0>:
int timer3_flag = 0;
int timer3_counter = 0;
int timer4_flag = 0;
int timer4_counter = 0;

void setTimer0(int duration) {
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE ;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <setTimer0+0x28>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e16:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <setTimer0+0x2c>)
 8000e18:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <setTimer0+0x30>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	2000003c 	.word	0x2000003c
 8000e30:	200000a4 	.word	0x200000a4
 8000e34:	200000a0 	.word	0x200000a0

08000e38 <setTimer1>:
void setTimer1(int duration){
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE ;
 8000e40:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <setTimer1+0x28>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e4a:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <setTimer1+0x2c>)
 8000e4c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <setTimer1+0x30>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	2000003c 	.word	0x2000003c
 8000e64:	200000ac 	.word	0x200000ac
 8000e68:	200000a8 	.word	0x200000a8

08000e6c <setTimer2>:
void setTimer2(int duration){
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE ;
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <setTimer2+0x28>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e7e:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <setTimer2+0x2c>)
 8000e80:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <setTimer2+0x30>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	2000003c 	.word	0x2000003c
 8000e98:	200000b4 	.word	0x200000b4
 8000e9c:	200000b0 	.word	0x200000b0

08000ea0 <setTimer3>:
void setTimer3(int duration) {
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE ;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <setTimer3+0x28>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	fb92 f3f3 	sdiv	r3, r2, r3
 8000eb2:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <setTimer3+0x2c>)
 8000eb4:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <setTimer3+0x30>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	2000003c 	.word	0x2000003c
 8000ecc:	200000bc 	.word	0x200000bc
 8000ed0:	200000b8 	.word	0x200000b8

08000ed4 <setTimer4>:
void setTimer4(int duration) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE ;
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <setTimer4+0x28>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ee6:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <setTimer4+0x2c>)
 8000ee8:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <setTimer4+0x30>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	2000003c 	.word	0x2000003c
 8000f00:	200000c4 	.word	0x200000c4
 8000f04:	200000c0 	.word	0x200000c0

08000f08 <timerRun>:


void timerRun(){
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 8000f0c:	4b29      	ldr	r3, [pc, #164]	; (8000fb4 <timerRun+0xac>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	dd0b      	ble.n	8000f2c <timerRun+0x24>
		timer0_counter--;
 8000f14:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <timerRun+0xac>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	4a26      	ldr	r2, [pc, #152]	; (8000fb4 <timerRun+0xac>)
 8000f1c:	6013      	str	r3, [r2, #0]
		if(timer0_counter <= 0){
 8000f1e:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <timerRun+0xac>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	dc02      	bgt.n	8000f2c <timerRun+0x24>
			timer0_flag = 1;
 8000f26:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <timerRun+0xb0>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer1_counter > 0){
 8000f2c:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <timerRun+0xb4>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	dd0b      	ble.n	8000f4c <timerRun+0x44>
		timer1_counter--;
 8000f34:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <timerRun+0xb4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	4a20      	ldr	r2, [pc, #128]	; (8000fbc <timerRun+0xb4>)
 8000f3c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <timerRun+0xb4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	dc02      	bgt.n	8000f4c <timerRun+0x44>
			timer1_flag = 1;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <timerRun+0xb8>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <timerRun+0xbc>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	dd0b      	ble.n	8000f6c <timerRun+0x64>
		timer2_counter--;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <timerRun+0xbc>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	4a1a      	ldr	r2, [pc, #104]	; (8000fc4 <timerRun+0xbc>)
 8000f5c:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <timerRun+0xbc>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	dc02      	bgt.n	8000f6c <timerRun+0x64>
			timer2_flag = 1;
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <timerRun+0xc0>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8000f6c:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <timerRun+0xc4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd0b      	ble.n	8000f8c <timerRun+0x84>
		timer3_counter--;
 8000f74:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <timerRun+0xc4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <timerRun+0xc4>)
 8000f7c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8000f7e:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <timerRun+0xc4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	dc02      	bgt.n	8000f8c <timerRun+0x84>
			timer3_flag = 1;
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <timerRun+0xc8>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <timerRun+0xcc>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	dd0b      	ble.n	8000fac <timerRun+0xa4>
		timer4_counter--;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <timerRun+0xcc>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <timerRun+0xcc>)
 8000f9c:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <timerRun+0xcc>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	dc02      	bgt.n	8000fac <timerRun+0xa4>
			timer4_flag = 1;
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <timerRun+0xd0>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	200000a4 	.word	0x200000a4
 8000fb8:	200000a0 	.word	0x200000a0
 8000fbc:	200000ac 	.word	0x200000ac
 8000fc0:	200000a8 	.word	0x200000a8
 8000fc4:	200000b4 	.word	0x200000b4
 8000fc8:	200000b0 	.word	0x200000b0
 8000fcc:	200000bc 	.word	0x200000bc
 8000fd0:	200000b8 	.word	0x200000b8
 8000fd4:	200000c4 	.word	0x200000c4
 8000fd8:	200000c0 	.word	0x200000c0

08000fdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HAL_MspInit+0x5c>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	4a14      	ldr	r2, [pc, #80]	; (8001038 <HAL_MspInit+0x5c>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6193      	str	r3, [r2, #24]
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_MspInit+0x5c>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <HAL_MspInit+0x5c>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <HAL_MspInit+0x5c>)
 8001000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001004:	61d3      	str	r3, [r2, #28]
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <HAL_MspInit+0x5c>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_MspInit+0x60>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <HAL_MspInit+0x60>)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	40021000 	.word	0x40021000
 800103c:	40010000 	.word	0x40010000

08001040 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001050:	d114      	bne.n	800107c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <HAL_TIM_Base_MspInit+0x68>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <HAL_TIM_Base_MspInit+0x68>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	61d3      	str	r3, [r2, #28]
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_TIM_Base_MspInit+0x68>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	201c      	movs	r0, #28
 8001070:	f000 fa43 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001074:	201c      	movs	r0, #28
 8001076:	f000 fa5c 	bl	8001532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800107a:	e010      	b.n	800109e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <HAL_TIM_Base_MspInit+0x6c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d10b      	bne.n	800109e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_TIM_Base_MspInit+0x68>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <HAL_TIM_Base_MspInit+0x68>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	61d3      	str	r3, [r2, #28]
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_TIM_Base_MspInit+0x68>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40000400 	.word	0x40000400

080010b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <HAL_TIM_MspPostInit+0x58>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d117      	bne.n	8001100 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_TIM_MspPostInit+0x5c>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a0d      	ldr	r2, [pc, #52]	; (800110c <HAL_TIM_MspPostInit+0x5c>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6193      	str	r3, [r2, #24]
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_TIM_MspPostInit+0x5c>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010e8:	2340      	movs	r3, #64	; 0x40
 80010ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	4619      	mov	r1, r3
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <HAL_TIM_MspPostInit+0x60>)
 80010fc:	f000 fae4 	bl	80016c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001100:	bf00      	nop
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40000400 	.word	0x40000400
 800110c:	40021000 	.word	0x40021000
 8001110:	40010800 	.word	0x40010800

08001114 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a1f      	ldr	r2, [pc, #124]	; (80011ac <HAL_UART_MspInit+0x98>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d137      	bne.n	80011a4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001134:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <HAL_UART_MspInit+0x9c>)
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	4a1d      	ldr	r2, [pc, #116]	; (80011b0 <HAL_UART_MspInit+0x9c>)
 800113a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113e:	61d3      	str	r3, [r2, #28]
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <HAL_UART_MspInit+0x9c>)
 8001142:	69db      	ldr	r3, [r3, #28]
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_UART_MspInit+0x9c>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	4a17      	ldr	r2, [pc, #92]	; (80011b0 <HAL_UART_MspInit+0x9c>)
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	6193      	str	r3, [r2, #24]
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_UART_MspInit+0x9c>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001164:	2304      	movs	r3, #4
 8001166:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	4619      	mov	r1, r3
 8001176:	480f      	ldr	r0, [pc, #60]	; (80011b4 <HAL_UART_MspInit+0xa0>)
 8001178:	f000 faa6 	bl	80016c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800117c:	2308      	movs	r3, #8
 800117e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	4619      	mov	r1, r3
 800118e:	4809      	ldr	r0, [pc, #36]	; (80011b4 <HAL_UART_MspInit+0xa0>)
 8001190:	f000 fa9a 	bl	80016c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2100      	movs	r1, #0
 8001198:	2026      	movs	r0, #38	; 0x26
 800119a:	f000 f9ae 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800119e:	2026      	movs	r0, #38	; 0x26
 80011a0:	f000 f9c7 	bl	8001532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40004400 	.word	0x40004400
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010800 	.word	0x40010800

080011b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <NMI_Handler+0x4>

080011be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <HardFault_Handler+0x4>

080011c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <MemManage_Handler+0x4>

080011ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <BusFault_Handler+0x4>

080011d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <UsageFault_Handler+0x4>

080011d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr

080011ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr

080011fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011fe:	f000 f889 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <TIM2_IRQHandler+0x10>)
 800120e:	f001 f923 	bl	8002458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000110 	.word	0x20000110

0800121c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <USART2_IRQHandler+0x10>)
 8001222:	f001 ffc7 	bl	80031b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000158 	.word	0x20000158

08001230 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800123c:	480c      	ldr	r0, [pc, #48]	; (8001270 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800123e:	490d      	ldr	r1, [pc, #52]	; (8001274 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001240:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001244:	e002      	b.n	800124c <LoopCopyDataInit>

08001246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124a:	3304      	adds	r3, #4

0800124c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800124c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001250:	d3f9      	bcc.n	8001246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001254:	4c0a      	ldr	r4, [pc, #40]	; (8001280 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001258:	e001      	b.n	800125e <LoopFillZerobss>

0800125a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800125c:	3204      	adds	r2, #4

0800125e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001260:	d3fb      	bcc.n	800125a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001262:	f7ff ffe5 	bl	8001230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001266:	f002 fb53 	bl	8003910 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800126a:	f7ff fb8b 	bl	8000984 <main>
  bx lr
 800126e:	4770      	bx	lr
  ldr r0, =_sdata
 8001270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001274:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001278:	080039b0 	.word	0x080039b0
  ldr r2, =_sbss
 800127c:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001280:	200004c0 	.word	0x200004c0

08001284 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC1_2_IRQHandler>
	...

08001288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_Init+0x28>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <HAL_Init+0x28>)
 8001292:	f043 0310 	orr.w	r3, r3, #16
 8001296:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001298:	2003      	movs	r0, #3
 800129a:	f000 f923 	bl	80014e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129e:	200f      	movs	r0, #15
 80012a0:	f000 f808 	bl	80012b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a4:	f7ff fe9a 	bl	8000fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40022000 	.word	0x40022000

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x54>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_InitTick+0x58>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f93b 	bl	800154e <HAL_SYSTICK_Config>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e00e      	b.n	8001300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d80a      	bhi.n	80012fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f000 f903 	bl	80014fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <HAL_InitTick+0x5c>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	2000004c 	.word	0x2000004c
 800130c:	20000054 	.word	0x20000054
 8001310:	20000050 	.word	0x20000050

08001314 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_IncTick+0x1c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_IncTick+0x20>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a03      	ldr	r2, [pc, #12]	; (8001334 <HAL_IncTick+0x20>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	20000054 	.word	0x20000054
 8001334:	200004bc 	.word	0x200004bc

08001338 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b02      	ldr	r3, [pc, #8]	; (8001348 <HAL_GetTick+0x10>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	200004bc 	.word	0x200004bc

0800134c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001368:	4013      	ands	r3, r2
 800136a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800137c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137e:	4a04      	ldr	r2, [pc, #16]	; (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	60d3      	str	r3, [r2, #12]
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <__NVIC_GetPriorityGrouping+0x18>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	f003 0307 	and.w	r3, r3, #7
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db0b      	blt.n	80013da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f003 021f 	and.w	r2, r3, #31
 80013c8:	4906      	ldr	r1, [pc, #24]	; (80013e4 <__NVIC_EnableIRQ+0x34>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	095b      	lsrs	r3, r3, #5
 80013d0:	2001      	movs	r0, #1
 80013d2:	fa00 f202 	lsl.w	r2, r0, r2
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	e000e100 	.word	0xe000e100

080013e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	db0a      	blt.n	8001412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	490c      	ldr	r1, [pc, #48]	; (8001434 <__NVIC_SetPriority+0x4c>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	440b      	add	r3, r1
 800140c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001410:	e00a      	b.n	8001428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4908      	ldr	r1, [pc, #32]	; (8001438 <__NVIC_SetPriority+0x50>)
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	3b04      	subs	r3, #4
 8001420:	0112      	lsls	r2, r2, #4
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	440b      	add	r3, r1
 8001426:	761a      	strb	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000e100 	.word	0xe000e100
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	; 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f1c3 0307 	rsb	r3, r3, #7
 8001456:	2b04      	cmp	r3, #4
 8001458:	bf28      	it	cs
 800145a:	2304      	movcs	r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3304      	adds	r3, #4
 8001462:	2b06      	cmp	r3, #6
 8001464:	d902      	bls.n	800146c <NVIC_EncodePriority+0x30>
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3b03      	subs	r3, #3
 800146a:	e000      	b.n	800146e <NVIC_EncodePriority+0x32>
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	f04f 32ff 	mov.w	r2, #4294967295
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43da      	mvns	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	401a      	ands	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001484:	f04f 31ff 	mov.w	r1, #4294967295
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43d9      	mvns	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	4313      	orrs	r3, r2
         );
}
 8001496:	4618      	mov	r0, r3
 8001498:	3724      	adds	r7, #36	; 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b0:	d301      	bcc.n	80014b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00f      	b.n	80014d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <SysTick_Config+0x40>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014be:	210f      	movs	r1, #15
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	f7ff ff90 	bl	80013e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <SysTick_Config+0x40>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <SysTick_Config+0x40>)
 80014d0:	2207      	movs	r2, #7
 80014d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	e000e010 	.word	0xe000e010

080014e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff2d 	bl	800134c <__NVIC_SetPriorityGrouping>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800150c:	f7ff ff42 	bl	8001394 <__NVIC_GetPriorityGrouping>
 8001510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	6978      	ldr	r0, [r7, #20]
 8001518:	f7ff ff90 	bl	800143c <NVIC_EncodePriority>
 800151c:	4602      	mov	r2, r0
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff5f 	bl	80013e8 <__NVIC_SetPriority>
}
 800152a:	bf00      	nop
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff35 	bl	80013b0 <__NVIC_EnableIRQ>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ffa2 	bl	80014a0 <SysTick_Config>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001566:	b480      	push	{r7}
 8001568:	b085      	sub	sp, #20
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001578:	2b02      	cmp	r3, #2
 800157a:	d008      	beq.n	800158e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2204      	movs	r2, #4
 8001580:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e020      	b.n	80015d0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 020e 	bic.w	r2, r2, #14
 800159c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0201 	bic.w	r2, r2, #1
 80015ac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b6:	2101      	movs	r1, #1
 80015b8:	fa01 f202 	lsl.w	r2, r1, r2
 80015bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
	...

080015dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d005      	beq.n	80015fe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2204      	movs	r2, #4
 80015f6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	e051      	b.n	80016a2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 020e 	bic.w	r2, r2, #14
 800160c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a22      	ldr	r2, [pc, #136]	; (80016ac <HAL_DMA_Abort_IT+0xd0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d029      	beq.n	800167c <HAL_DMA_Abort_IT+0xa0>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a20      	ldr	r2, [pc, #128]	; (80016b0 <HAL_DMA_Abort_IT+0xd4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d022      	beq.n	8001678 <HAL_DMA_Abort_IT+0x9c>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a1f      	ldr	r2, [pc, #124]	; (80016b4 <HAL_DMA_Abort_IT+0xd8>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d01a      	beq.n	8001672 <HAL_DMA_Abort_IT+0x96>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <HAL_DMA_Abort_IT+0xdc>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d012      	beq.n	800166c <HAL_DMA_Abort_IT+0x90>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a1c      	ldr	r2, [pc, #112]	; (80016bc <HAL_DMA_Abort_IT+0xe0>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d00a      	beq.n	8001666 <HAL_DMA_Abort_IT+0x8a>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1a      	ldr	r2, [pc, #104]	; (80016c0 <HAL_DMA_Abort_IT+0xe4>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d102      	bne.n	8001660 <HAL_DMA_Abort_IT+0x84>
 800165a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800165e:	e00e      	b.n	800167e <HAL_DMA_Abort_IT+0xa2>
 8001660:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001664:	e00b      	b.n	800167e <HAL_DMA_Abort_IT+0xa2>
 8001666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800166a:	e008      	b.n	800167e <HAL_DMA_Abort_IT+0xa2>
 800166c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001670:	e005      	b.n	800167e <HAL_DMA_Abort_IT+0xa2>
 8001672:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001676:	e002      	b.n	800167e <HAL_DMA_Abort_IT+0xa2>
 8001678:	2310      	movs	r3, #16
 800167a:	e000      	b.n	800167e <HAL_DMA_Abort_IT+0xa2>
 800167c:	2301      	movs	r3, #1
 800167e:	4a11      	ldr	r2, [pc, #68]	; (80016c4 <HAL_DMA_Abort_IT+0xe8>)
 8001680:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	4798      	blx	r3
    } 
  }
  return status;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40020008 	.word	0x40020008
 80016b0:	4002001c 	.word	0x4002001c
 80016b4:	40020030 	.word	0x40020030
 80016b8:	40020044 	.word	0x40020044
 80016bc:	40020058 	.word	0x40020058
 80016c0:	4002006c 	.word	0x4002006c
 80016c4:	40020000 	.word	0x40020000

080016c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b08b      	sub	sp, #44	; 0x2c
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016da:	e169      	b.n	80019b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016dc:	2201      	movs	r2, #1
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	f040 8158 	bne.w	80019aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4a9a      	ldr	r2, [pc, #616]	; (8001968 <HAL_GPIO_Init+0x2a0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d05e      	beq.n	80017c2 <HAL_GPIO_Init+0xfa>
 8001704:	4a98      	ldr	r2, [pc, #608]	; (8001968 <HAL_GPIO_Init+0x2a0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d875      	bhi.n	80017f6 <HAL_GPIO_Init+0x12e>
 800170a:	4a98      	ldr	r2, [pc, #608]	; (800196c <HAL_GPIO_Init+0x2a4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d058      	beq.n	80017c2 <HAL_GPIO_Init+0xfa>
 8001710:	4a96      	ldr	r2, [pc, #600]	; (800196c <HAL_GPIO_Init+0x2a4>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d86f      	bhi.n	80017f6 <HAL_GPIO_Init+0x12e>
 8001716:	4a96      	ldr	r2, [pc, #600]	; (8001970 <HAL_GPIO_Init+0x2a8>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d052      	beq.n	80017c2 <HAL_GPIO_Init+0xfa>
 800171c:	4a94      	ldr	r2, [pc, #592]	; (8001970 <HAL_GPIO_Init+0x2a8>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d869      	bhi.n	80017f6 <HAL_GPIO_Init+0x12e>
 8001722:	4a94      	ldr	r2, [pc, #592]	; (8001974 <HAL_GPIO_Init+0x2ac>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d04c      	beq.n	80017c2 <HAL_GPIO_Init+0xfa>
 8001728:	4a92      	ldr	r2, [pc, #584]	; (8001974 <HAL_GPIO_Init+0x2ac>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d863      	bhi.n	80017f6 <HAL_GPIO_Init+0x12e>
 800172e:	4a92      	ldr	r2, [pc, #584]	; (8001978 <HAL_GPIO_Init+0x2b0>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d046      	beq.n	80017c2 <HAL_GPIO_Init+0xfa>
 8001734:	4a90      	ldr	r2, [pc, #576]	; (8001978 <HAL_GPIO_Init+0x2b0>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d85d      	bhi.n	80017f6 <HAL_GPIO_Init+0x12e>
 800173a:	2b12      	cmp	r3, #18
 800173c:	d82a      	bhi.n	8001794 <HAL_GPIO_Init+0xcc>
 800173e:	2b12      	cmp	r3, #18
 8001740:	d859      	bhi.n	80017f6 <HAL_GPIO_Init+0x12e>
 8001742:	a201      	add	r2, pc, #4	; (adr r2, 8001748 <HAL_GPIO_Init+0x80>)
 8001744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001748:	080017c3 	.word	0x080017c3
 800174c:	0800179d 	.word	0x0800179d
 8001750:	080017af 	.word	0x080017af
 8001754:	080017f1 	.word	0x080017f1
 8001758:	080017f7 	.word	0x080017f7
 800175c:	080017f7 	.word	0x080017f7
 8001760:	080017f7 	.word	0x080017f7
 8001764:	080017f7 	.word	0x080017f7
 8001768:	080017f7 	.word	0x080017f7
 800176c:	080017f7 	.word	0x080017f7
 8001770:	080017f7 	.word	0x080017f7
 8001774:	080017f7 	.word	0x080017f7
 8001778:	080017f7 	.word	0x080017f7
 800177c:	080017f7 	.word	0x080017f7
 8001780:	080017f7 	.word	0x080017f7
 8001784:	080017f7 	.word	0x080017f7
 8001788:	080017f7 	.word	0x080017f7
 800178c:	080017a5 	.word	0x080017a5
 8001790:	080017b9 	.word	0x080017b9
 8001794:	4a79      	ldr	r2, [pc, #484]	; (800197c <HAL_GPIO_Init+0x2b4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d013      	beq.n	80017c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800179a:	e02c      	b.n	80017f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	623b      	str	r3, [r7, #32]
          break;
 80017a2:	e029      	b.n	80017f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	3304      	adds	r3, #4
 80017aa:	623b      	str	r3, [r7, #32]
          break;
 80017ac:	e024      	b.n	80017f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	3308      	adds	r3, #8
 80017b4:	623b      	str	r3, [r7, #32]
          break;
 80017b6:	e01f      	b.n	80017f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	330c      	adds	r3, #12
 80017be:	623b      	str	r3, [r7, #32]
          break;
 80017c0:	e01a      	b.n	80017f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d102      	bne.n	80017d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ca:	2304      	movs	r3, #4
 80017cc:	623b      	str	r3, [r7, #32]
          break;
 80017ce:	e013      	b.n	80017f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d105      	bne.n	80017e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d8:	2308      	movs	r3, #8
 80017da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	611a      	str	r2, [r3, #16]
          break;
 80017e2:	e009      	b.n	80017f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017e4:	2308      	movs	r3, #8
 80017e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	615a      	str	r2, [r3, #20]
          break;
 80017ee:	e003      	b.n	80017f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017f0:	2300      	movs	r3, #0
 80017f2:	623b      	str	r3, [r7, #32]
          break;
 80017f4:	e000      	b.n	80017f8 <HAL_GPIO_Init+0x130>
          break;
 80017f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	2bff      	cmp	r3, #255	; 0xff
 80017fc:	d801      	bhi.n	8001802 <HAL_GPIO_Init+0x13a>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	e001      	b.n	8001806 <HAL_GPIO_Init+0x13e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3304      	adds	r3, #4
 8001806:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	2bff      	cmp	r3, #255	; 0xff
 800180c:	d802      	bhi.n	8001814 <HAL_GPIO_Init+0x14c>
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	e002      	b.n	800181a <HAL_GPIO_Init+0x152>
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	3b08      	subs	r3, #8
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	210f      	movs	r1, #15
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	401a      	ands	r2, r3
 800182c:	6a39      	ldr	r1, [r7, #32]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	fa01 f303 	lsl.w	r3, r1, r3
 8001834:	431a      	orrs	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 80b1 	beq.w	80019aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001848:	4b4d      	ldr	r3, [pc, #308]	; (8001980 <HAL_GPIO_Init+0x2b8>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a4c      	ldr	r2, [pc, #304]	; (8001980 <HAL_GPIO_Init+0x2b8>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	4b4a      	ldr	r3, [pc, #296]	; (8001980 <HAL_GPIO_Init+0x2b8>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001860:	4a48      	ldr	r2, [pc, #288]	; (8001984 <HAL_GPIO_Init+0x2bc>)
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	3302      	adds	r3, #2
 8001868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	220f      	movs	r2, #15
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	4013      	ands	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a40      	ldr	r2, [pc, #256]	; (8001988 <HAL_GPIO_Init+0x2c0>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d013      	beq.n	80018b4 <HAL_GPIO_Init+0x1ec>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a3f      	ldr	r2, [pc, #252]	; (800198c <HAL_GPIO_Init+0x2c4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d00d      	beq.n	80018b0 <HAL_GPIO_Init+0x1e8>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a3e      	ldr	r2, [pc, #248]	; (8001990 <HAL_GPIO_Init+0x2c8>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d007      	beq.n	80018ac <HAL_GPIO_Init+0x1e4>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a3d      	ldr	r2, [pc, #244]	; (8001994 <HAL_GPIO_Init+0x2cc>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d101      	bne.n	80018a8 <HAL_GPIO_Init+0x1e0>
 80018a4:	2303      	movs	r3, #3
 80018a6:	e006      	b.n	80018b6 <HAL_GPIO_Init+0x1ee>
 80018a8:	2304      	movs	r3, #4
 80018aa:	e004      	b.n	80018b6 <HAL_GPIO_Init+0x1ee>
 80018ac:	2302      	movs	r3, #2
 80018ae:	e002      	b.n	80018b6 <HAL_GPIO_Init+0x1ee>
 80018b0:	2301      	movs	r3, #1
 80018b2:	e000      	b.n	80018b6 <HAL_GPIO_Init+0x1ee>
 80018b4:	2300      	movs	r3, #0
 80018b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b8:	f002 0203 	and.w	r2, r2, #3
 80018bc:	0092      	lsls	r2, r2, #2
 80018be:	4093      	lsls	r3, r2
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018c6:	492f      	ldr	r1, [pc, #188]	; (8001984 <HAL_GPIO_Init+0x2bc>)
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	089b      	lsrs	r3, r3, #2
 80018cc:	3302      	adds	r3, #2
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d006      	beq.n	80018ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018e0:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <HAL_GPIO_Init+0x2d0>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	492c      	ldr	r1, [pc, #176]	; (8001998 <HAL_GPIO_Init+0x2d0>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	600b      	str	r3, [r1, #0]
 80018ec:	e006      	b.n	80018fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018ee:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <HAL_GPIO_Init+0x2d0>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	4928      	ldr	r1, [pc, #160]	; (8001998 <HAL_GPIO_Init+0x2d0>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d006      	beq.n	8001916 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001908:	4b23      	ldr	r3, [pc, #140]	; (8001998 <HAL_GPIO_Init+0x2d0>)
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	4922      	ldr	r1, [pc, #136]	; (8001998 <HAL_GPIO_Init+0x2d0>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	604b      	str	r3, [r1, #4]
 8001914:	e006      	b.n	8001924 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001916:	4b20      	ldr	r3, [pc, #128]	; (8001998 <HAL_GPIO_Init+0x2d0>)
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	43db      	mvns	r3, r3
 800191e:	491e      	ldr	r1, [pc, #120]	; (8001998 <HAL_GPIO_Init+0x2d0>)
 8001920:	4013      	ands	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d006      	beq.n	800193e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_GPIO_Init+0x2d0>)
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	4918      	ldr	r1, [pc, #96]	; (8001998 <HAL_GPIO_Init+0x2d0>)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	4313      	orrs	r3, r2
 800193a:	608b      	str	r3, [r1, #8]
 800193c:	e006      	b.n	800194c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <HAL_GPIO_Init+0x2d0>)
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	43db      	mvns	r3, r3
 8001946:	4914      	ldr	r1, [pc, #80]	; (8001998 <HAL_GPIO_Init+0x2d0>)
 8001948:	4013      	ands	r3, r2
 800194a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d021      	beq.n	800199c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <HAL_GPIO_Init+0x2d0>)
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	490e      	ldr	r1, [pc, #56]	; (8001998 <HAL_GPIO_Init+0x2d0>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	60cb      	str	r3, [r1, #12]
 8001964:	e021      	b.n	80019aa <HAL_GPIO_Init+0x2e2>
 8001966:	bf00      	nop
 8001968:	10320000 	.word	0x10320000
 800196c:	10310000 	.word	0x10310000
 8001970:	10220000 	.word	0x10220000
 8001974:	10210000 	.word	0x10210000
 8001978:	10120000 	.word	0x10120000
 800197c:	10110000 	.word	0x10110000
 8001980:	40021000 	.word	0x40021000
 8001984:	40010000 	.word	0x40010000
 8001988:	40010800 	.word	0x40010800
 800198c:	40010c00 	.word	0x40010c00
 8001990:	40011000 	.word	0x40011000
 8001994:	40011400 	.word	0x40011400
 8001998:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_GPIO_Init+0x304>)
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	4909      	ldr	r1, [pc, #36]	; (80019cc <HAL_GPIO_Init+0x304>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	3301      	adds	r3, #1
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f47f ae8e 	bne.w	80016dc <HAL_GPIO_Init+0x14>
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	372c      	adds	r7, #44	; 0x2c
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	40010400 	.word	0x40010400

080019d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	887b      	ldrh	r3, [r7, #2]
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d002      	beq.n	80019ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
 80019ec:	e001      	b.n	80019f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	460b      	mov	r3, r1
 8001a08:	807b      	strh	r3, [r7, #2]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a0e:	787b      	ldrb	r3, [r7, #1]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a14:	887a      	ldrh	r2, [r7, #2]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a1a:	e003      	b.n	8001a24 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a1c:	887b      	ldrh	r3, [r7, #2]
 8001a1e:	041a      	lsls	r2, r3, #16
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	611a      	str	r2, [r3, #16]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
	...

08001a30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e26c      	b.n	8001f1c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 8087 	beq.w	8001b5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a50:	4b92      	ldr	r3, [pc, #584]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 030c 	and.w	r3, r3, #12
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d00c      	beq.n	8001a76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a5c:	4b8f      	ldr	r3, [pc, #572]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d112      	bne.n	8001a8e <HAL_RCC_OscConfig+0x5e>
 8001a68:	4b8c      	ldr	r3, [pc, #560]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a74:	d10b      	bne.n	8001a8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a76:	4b89      	ldr	r3, [pc, #548]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d06c      	beq.n	8001b5c <HAL_RCC_OscConfig+0x12c>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d168      	bne.n	8001b5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e246      	b.n	8001f1c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a96:	d106      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x76>
 8001a98:	4b80      	ldr	r3, [pc, #512]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a7f      	ldr	r2, [pc, #508]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	e02e      	b.n	8001b04 <HAL_RCC_OscConfig+0xd4>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x98>
 8001aae:	4b7b      	ldr	r3, [pc, #492]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a7a      	ldr	r2, [pc, #488]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	4b78      	ldr	r3, [pc, #480]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a77      	ldr	r2, [pc, #476]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e01d      	b.n	8001b04 <HAL_RCC_OscConfig+0xd4>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad0:	d10c      	bne.n	8001aec <HAL_RCC_OscConfig+0xbc>
 8001ad2:	4b72      	ldr	r3, [pc, #456]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a71      	ldr	r2, [pc, #452]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	4b6f      	ldr	r3, [pc, #444]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a6e      	ldr	r2, [pc, #440]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e00b      	b.n	8001b04 <HAL_RCC_OscConfig+0xd4>
 8001aec:	4b6b      	ldr	r3, [pc, #428]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a6a      	ldr	r2, [pc, #424]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	4b68      	ldr	r3, [pc, #416]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a67      	ldr	r2, [pc, #412]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d013      	beq.n	8001b34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fc14 	bl	8001338 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b14:	f7ff fc10 	bl	8001338 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b64      	cmp	r3, #100	; 0x64
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e1fa      	b.n	8001f1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	4b5d      	ldr	r3, [pc, #372]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCC_OscConfig+0xe4>
 8001b32:	e014      	b.n	8001b5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff fc00 	bl	8001338 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7ff fbfc 	bl	8001338 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	; 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e1e6      	b.n	8001f1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4e:	4b53      	ldr	r3, [pc, #332]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x10c>
 8001b5a:	e000      	b.n	8001b5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d063      	beq.n	8001c32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b6a:	4b4c      	ldr	r3, [pc, #304]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00b      	beq.n	8001b8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b76:	4b49      	ldr	r3, [pc, #292]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d11c      	bne.n	8001bbc <HAL_RCC_OscConfig+0x18c>
 8001b82:	4b46      	ldr	r3, [pc, #280]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d116      	bne.n	8001bbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8e:	4b43      	ldr	r3, [pc, #268]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d005      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x176>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d001      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e1ba      	b.n	8001f1c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba6:	4b3d      	ldr	r3, [pc, #244]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4939      	ldr	r1, [pc, #228]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bba:	e03a      	b.n	8001c32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d020      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bc4:	4b36      	ldr	r3, [pc, #216]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bca:	f7ff fbb5 	bl	8001338 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd2:	f7ff fbb1 	bl	8001338 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e19b      	b.n	8001f1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be4:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4927      	ldr	r1, [pc, #156]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	600b      	str	r3, [r1, #0]
 8001c04:	e015      	b.n	8001c32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c06:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fb94 	bl	8001338 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c14:	f7ff fb90 	bl	8001338 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e17a      	b.n	8001f1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c26:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d03a      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d019      	beq.n	8001c7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c46:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <HAL_RCC_OscConfig+0x274>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4c:	f7ff fb74 	bl	8001338 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c54:	f7ff fb70 	bl	8001338 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e15a      	b.n	8001f1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c72:	2001      	movs	r0, #1
 8001c74:	f000 fad8 	bl	8002228 <RCC_Delay>
 8001c78:	e01c      	b.n	8001cb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c80:	f7ff fb5a 	bl	8001338 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c86:	e00f      	b.n	8001ca8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c88:	f7ff fb56 	bl	8001338 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d908      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e140      	b.n	8001f1c <HAL_RCC_OscConfig+0x4ec>
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	42420000 	.word	0x42420000
 8001ca4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca8:	4b9e      	ldr	r3, [pc, #632]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1e9      	bne.n	8001c88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80a6 	beq.w	8001e0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc6:	4b97      	ldr	r3, [pc, #604]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10d      	bne.n	8001cee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	4b94      	ldr	r3, [pc, #592]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	4a93      	ldr	r2, [pc, #588]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	61d3      	str	r3, [r2, #28]
 8001cde:	4b91      	ldr	r3, [pc, #580]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cea:	2301      	movs	r3, #1
 8001cec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cee:	4b8e      	ldr	r3, [pc, #568]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d118      	bne.n	8001d2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cfa:	4b8b      	ldr	r3, [pc, #556]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a8a      	ldr	r2, [pc, #552]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d06:	f7ff fb17 	bl	8001338 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0e:	f7ff fb13 	bl	8001338 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b64      	cmp	r3, #100	; 0x64
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e0fd      	b.n	8001f1c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d20:	4b81      	ldr	r3, [pc, #516]	; (8001f28 <HAL_RCC_OscConfig+0x4f8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d106      	bne.n	8001d42 <HAL_RCC_OscConfig+0x312>
 8001d34:	4b7b      	ldr	r3, [pc, #492]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	4a7a      	ldr	r2, [pc, #488]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	6213      	str	r3, [r2, #32]
 8001d40:	e02d      	b.n	8001d9e <HAL_RCC_OscConfig+0x36e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x334>
 8001d4a:	4b76      	ldr	r3, [pc, #472]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001d50:	f023 0301 	bic.w	r3, r3, #1
 8001d54:	6213      	str	r3, [r2, #32]
 8001d56:	4b73      	ldr	r3, [pc, #460]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	4a72      	ldr	r2, [pc, #456]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	f023 0304 	bic.w	r3, r3, #4
 8001d60:	6213      	str	r3, [r2, #32]
 8001d62:	e01c      	b.n	8001d9e <HAL_RCC_OscConfig+0x36e>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b05      	cmp	r3, #5
 8001d6a:	d10c      	bne.n	8001d86 <HAL_RCC_OscConfig+0x356>
 8001d6c:	4b6d      	ldr	r3, [pc, #436]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	4a6c      	ldr	r2, [pc, #432]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001d72:	f043 0304 	orr.w	r3, r3, #4
 8001d76:	6213      	str	r3, [r2, #32]
 8001d78:	4b6a      	ldr	r3, [pc, #424]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6213      	str	r3, [r2, #32]
 8001d84:	e00b      	b.n	8001d9e <HAL_RCC_OscConfig+0x36e>
 8001d86:	4b67      	ldr	r3, [pc, #412]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4a66      	ldr	r2, [pc, #408]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	6213      	str	r3, [r2, #32]
 8001d92:	4b64      	ldr	r3, [pc, #400]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4a63      	ldr	r2, [pc, #396]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	f023 0304 	bic.w	r3, r3, #4
 8001d9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d015      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da6:	f7ff fac7 	bl	8001338 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dac:	e00a      	b.n	8001dc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dae:	f7ff fac3 	bl	8001338 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e0ab      	b.n	8001f1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc4:	4b57      	ldr	r3, [pc, #348]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0ee      	beq.n	8001dae <HAL_RCC_OscConfig+0x37e>
 8001dd0:	e014      	b.n	8001dfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd2:	f7ff fab1 	bl	8001338 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd8:	e00a      	b.n	8001df0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dda:	f7ff faad 	bl	8001338 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e095      	b.n	8001f1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df0:	4b4c      	ldr	r3, [pc, #304]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1ee      	bne.n	8001dda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d105      	bne.n	8001e0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e02:	4b48      	ldr	r3, [pc, #288]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	4a47      	ldr	r2, [pc, #284]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8081 	beq.w	8001f1a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e18:	4b42      	ldr	r3, [pc, #264]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d061      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d146      	bne.n	8001eba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2c:	4b3f      	ldr	r3, [pc, #252]	; (8001f2c <HAL_RCC_OscConfig+0x4fc>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e32:	f7ff fa81 	bl	8001338 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3a:	f7ff fa7d 	bl	8001338 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e067      	b.n	8001f1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4c:	4b35      	ldr	r3, [pc, #212]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f0      	bne.n	8001e3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e60:	d108      	bne.n	8001e74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e62:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	492d      	ldr	r1, [pc, #180]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e74:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a19      	ldr	r1, [r3, #32]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	430b      	orrs	r3, r1
 8001e86:	4927      	ldr	r1, [pc, #156]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <HAL_RCC_OscConfig+0x4fc>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e92:	f7ff fa51 	bl	8001338 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9a:	f7ff fa4d 	bl	8001338 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e037      	b.n	8001f1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eac:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x46a>
 8001eb8:	e02f      	b.n	8001f1a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eba:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <HAL_RCC_OscConfig+0x4fc>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fa3a 	bl	8001338 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec8:	f7ff fa36 	bl	8001338 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e020      	b.n	8001f1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eda:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x498>
 8001ee6:	e018      	b.n	8001f1a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e013      	b.n	8001f1c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_RCC_OscConfig+0x4f4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d106      	bne.n	8001f16 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d001      	beq.n	8001f1a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40007000 	.word	0x40007000
 8001f2c:	42420060 	.word	0x42420060

08001f30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0d0      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f44:	4b6a      	ldr	r3, [pc, #424]	; (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d910      	bls.n	8001f74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f52:	4b67      	ldr	r3, [pc, #412]	; (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 0207 	bic.w	r2, r3, #7
 8001f5a:	4965      	ldr	r1, [pc, #404]	; (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f62:	4b63      	ldr	r3, [pc, #396]	; (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0b8      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d020      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f8c:	4b59      	ldr	r3, [pc, #356]	; (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4a58      	ldr	r2, [pc, #352]	; (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fa4:	4b53      	ldr	r3, [pc, #332]	; (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4a52      	ldr	r2, [pc, #328]	; (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb0:	4b50      	ldr	r3, [pc, #320]	; (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	494d      	ldr	r1, [pc, #308]	; (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d040      	beq.n	8002050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd6:	4b47      	ldr	r3, [pc, #284]	; (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d115      	bne.n	800200e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e07f      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d107      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fee:	4b41      	ldr	r3, [pc, #260]	; (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d109      	bne.n	800200e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e073      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffe:	4b3d      	ldr	r3, [pc, #244]	; (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e06b      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800200e:	4b39      	ldr	r3, [pc, #228]	; (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f023 0203 	bic.w	r2, r3, #3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	4936      	ldr	r1, [pc, #216]	; (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002020:	f7ff f98a 	bl	8001338 <HAL_GetTick>
 8002024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002026:	e00a      	b.n	800203e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002028:	f7ff f986 	bl	8001338 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	; 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e053      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 020c 	and.w	r2, r3, #12
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	429a      	cmp	r2, r3
 800204e:	d1eb      	bne.n	8002028 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002050:	4b27      	ldr	r3, [pc, #156]	; (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d210      	bcs.n	8002080 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	4b24      	ldr	r3, [pc, #144]	; (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 0207 	bic.w	r2, r3, #7
 8002066:	4922      	ldr	r1, [pc, #136]	; (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206e:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e032      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d008      	beq.n	800209e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4916      	ldr	r1, [pc, #88]	; (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	4313      	orrs	r3, r2
 800209c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	490e      	ldr	r1, [pc, #56]	; (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020be:	f000 f821 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 80020c2:	4602      	mov	r2, r0
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	490a      	ldr	r1, [pc, #40]	; (80020f8 <HAL_RCC_ClockConfig+0x1c8>)
 80020d0:	5ccb      	ldrb	r3, [r1, r3]
 80020d2:	fa22 f303 	lsr.w	r3, r2, r3
 80020d6:	4a09      	ldr	r2, [pc, #36]	; (80020fc <HAL_RCC_ClockConfig+0x1cc>)
 80020d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_RCC_ClockConfig+0x1d0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff f8e8 	bl	80012b4 <HAL_InitTick>

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40022000 	.word	0x40022000
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08003990 	.word	0x08003990
 80020fc:	2000004c 	.word	0x2000004c
 8002100:	20000050 	.word	0x20000050

08002104 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002104:	b490      	push	{r4, r7}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800210a:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800210c:	1d3c      	adds	r4, r7, #4
 800210e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002110:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002114:	f240 2301 	movw	r3, #513	; 0x201
 8002118:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
 800211e:	2300      	movs	r3, #0
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	2300      	movs	r3, #0
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800212e:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b04      	cmp	r3, #4
 800213c:	d002      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0x40>
 800213e:	2b08      	cmp	r3, #8
 8002140:	d003      	beq.n	800214a <HAL_RCC_GetSysClockFreq+0x46>
 8002142:	e02d      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002144:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002146:	623b      	str	r3, [r7, #32]
      break;
 8002148:	e02d      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	0c9b      	lsrs	r3, r3, #18
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002156:	4413      	add	r3, r2
 8002158:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800215c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d013      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002168:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	0c5b      	lsrs	r3, r3, #17
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002176:	4413      	add	r3, r2
 8002178:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800217c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002182:	fb02 f203 	mul.w	r2, r2, r3
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	fbb2 f3f3 	udiv	r3, r2, r3
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
 800218e:	e004      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002194:	fb02 f303 	mul.w	r3, r2, r3
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	623b      	str	r3, [r7, #32]
      break;
 800219e:	e002      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_RCC_GetSysClockFreq+0xb8>)
 80021a2:	623b      	str	r3, [r7, #32]
      break;
 80021a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021a6:	6a3b      	ldr	r3, [r7, #32]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3728      	adds	r7, #40	; 0x28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc90      	pop	{r4, r7}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	08003980 	.word	0x08003980
 80021b8:	40021000 	.word	0x40021000
 80021bc:	007a1200 	.word	0x007a1200
 80021c0:	003d0900 	.word	0x003d0900

080021c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c8:	4b02      	ldr	r3, [pc, #8]	; (80021d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80021ca:	681b      	ldr	r3, [r3, #0]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	2000004c 	.word	0x2000004c

080021d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021dc:	f7ff fff2 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 80021e0:	4602      	mov	r2, r0
 80021e2:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	0a1b      	lsrs	r3, r3, #8
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	4903      	ldr	r1, [pc, #12]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ee:	5ccb      	ldrb	r3, [r1, r3]
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000
 80021fc:	080039a0 	.word	0x080039a0

08002200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002204:	f7ff ffde 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 8002208:	4602      	mov	r2, r0
 800220a:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	0adb      	lsrs	r3, r3, #11
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	4903      	ldr	r1, [pc, #12]	; (8002224 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002216:	5ccb      	ldrb	r3, [r1, r3]
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800221c:	4618      	mov	r0, r3
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40021000 	.word	0x40021000
 8002224:	080039a0 	.word	0x080039a0

08002228 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <RCC_Delay+0x34>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <RCC_Delay+0x38>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	0a5b      	lsrs	r3, r3, #9
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002244:	bf00      	nop
  }
  while (Delay --);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1e5a      	subs	r2, r3, #1
 800224a:	60fa      	str	r2, [r7, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f9      	bne.n	8002244 <RCC_Delay+0x1c>
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	2000004c 	.word	0x2000004c
 8002260:	10624dd3 	.word	0x10624dd3

08002264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e041      	b.n	80022fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe fed8 	bl	8001040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3304      	adds	r3, #4
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f000 fb86 	bl	80029b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b01      	cmp	r3, #1
 8002316:	d001      	beq.n	800231c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e03a      	b.n	8002392 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a18      	ldr	r2, [pc, #96]	; (800239c <HAL_TIM_Base_Start_IT+0x98>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00e      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x58>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002346:	d009      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x58>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a14      	ldr	r2, [pc, #80]	; (80023a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d004      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x58>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d111      	bne.n	8002380 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b06      	cmp	r3, #6
 800236c:	d010      	beq.n	8002390 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0201 	orr.w	r2, r2, #1
 800237c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237e:	e007      	b.n	8002390 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	40012c00 	.word	0x40012c00
 80023a0:	40000400 	.word	0x40000400
 80023a4:	40000800 	.word	0x40000800

080023a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e041      	b.n	800243e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d106      	bne.n	80023d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f839 	bl	8002446 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3304      	adds	r3, #4
 80023e4:	4619      	mov	r1, r3
 80023e6:	4610      	mov	r0, r2
 80023e8:	f000 fae4 	bl	80029b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b02      	cmp	r3, #2
 800246c:	d122      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b02      	cmp	r3, #2
 800247a:	d11b      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0202 	mvn.w	r2, #2
 8002484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fa6f 	bl	800297e <HAL_TIM_IC_CaptureCallback>
 80024a0:	e005      	b.n	80024ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fa62 	bl	800296c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fa71 	bl	8002990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d122      	bne.n	8002508 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d11b      	bne.n	8002508 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0204 	mvn.w	r2, #4
 80024d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2202      	movs	r2, #2
 80024de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 fa45 	bl	800297e <HAL_TIM_IC_CaptureCallback>
 80024f4:	e005      	b.n	8002502 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fa38 	bl	800296c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fa47 	bl	8002990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b08      	cmp	r3, #8
 8002514:	d122      	bne.n	800255c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b08      	cmp	r3, #8
 8002522:	d11b      	bne.n	800255c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0208 	mvn.w	r2, #8
 800252c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2204      	movs	r2, #4
 8002532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fa1b 	bl	800297e <HAL_TIM_IC_CaptureCallback>
 8002548:	e005      	b.n	8002556 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fa0e 	bl	800296c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 fa1d 	bl	8002990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0310 	and.w	r3, r3, #16
 8002566:	2b10      	cmp	r3, #16
 8002568:	d122      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b10      	cmp	r3, #16
 8002576:	d11b      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0210 	mvn.w	r2, #16
 8002580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2208      	movs	r2, #8
 8002586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f9f1 	bl	800297e <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f9e4 	bl	800296c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f9f3 	bl	8002990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d10e      	bne.n	80025dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d107      	bne.n	80025dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0201 	mvn.w	r2, #1
 80025d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7fe fb8c 	bl	8000cf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e6:	2b80      	cmp	r3, #128	; 0x80
 80025e8:	d10e      	bne.n	8002608 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f4:	2b80      	cmp	r3, #128	; 0x80
 80025f6:	d107      	bne.n	8002608 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 fd5b 	bl	80030be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002612:	2b40      	cmp	r3, #64	; 0x40
 8002614:	d10e      	bne.n	8002634 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002620:	2b40      	cmp	r3, #64	; 0x40
 8002622:	d107      	bne.n	8002634 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800262c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f9b7 	bl	80029a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0320 	and.w	r3, r3, #32
 800263e:	2b20      	cmp	r3, #32
 8002640:	d10e      	bne.n	8002660 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b20      	cmp	r3, #32
 800264e:	d107      	bne.n	8002660 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0220 	mvn.w	r2, #32
 8002658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fd26 	bl	80030ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800267e:	2302      	movs	r3, #2
 8002680:	e0ac      	b.n	80027dc <HAL_TIM_PWM_ConfigChannel+0x174>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b0c      	cmp	r3, #12
 800268e:	f200 809f 	bhi.w	80027d0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002692:	a201      	add	r2, pc, #4	; (adr r2, 8002698 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002698:	080026cd 	.word	0x080026cd
 800269c:	080027d1 	.word	0x080027d1
 80026a0:	080027d1 	.word	0x080027d1
 80026a4:	080027d1 	.word	0x080027d1
 80026a8:	0800270d 	.word	0x0800270d
 80026ac:	080027d1 	.word	0x080027d1
 80026b0:	080027d1 	.word	0x080027d1
 80026b4:	080027d1 	.word	0x080027d1
 80026b8:	0800274f 	.word	0x0800274f
 80026bc:	080027d1 	.word	0x080027d1
 80026c0:	080027d1 	.word	0x080027d1
 80026c4:	080027d1 	.word	0x080027d1
 80026c8:	0800278f 	.word	0x0800278f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f9d0 	bl	8002a78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0208 	orr.w	r2, r2, #8
 80026e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0204 	bic.w	r2, r2, #4
 80026f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6999      	ldr	r1, [r3, #24]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	619a      	str	r2, [r3, #24]
      break;
 800270a:	e062      	b.n	80027d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fa16 	bl	8002b44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699a      	ldr	r2, [r3, #24]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6999      	ldr	r1, [r3, #24]
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	021a      	lsls	r2, r3, #8
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	619a      	str	r2, [r3, #24]
      break;
 800274c:	e041      	b.n	80027d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fa5f 	bl	8002c18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	69da      	ldr	r2, [r3, #28]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0208 	orr.w	r2, r2, #8
 8002768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0204 	bic.w	r2, r2, #4
 8002778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69d9      	ldr	r1, [r3, #28]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	61da      	str	r2, [r3, #28]
      break;
 800278c:	e021      	b.n	80027d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68b9      	ldr	r1, [r7, #8]
 8002794:	4618      	mov	r0, r3
 8002796:	f000 faa9 	bl	8002cec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69da      	ldr	r2, [r3, #28]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69da      	ldr	r2, [r3, #28]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69d9      	ldr	r1, [r3, #28]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	021a      	lsls	r2, r3, #8
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	61da      	str	r2, [r3, #28]
      break;
 80027ce:	e000      	b.n	80027d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80027d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_TIM_ConfigClockSource+0x18>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e0b3      	b.n	8002964 <HAL_TIM_ConfigClockSource+0x180>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800281a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002822:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002834:	d03e      	beq.n	80028b4 <HAL_TIM_ConfigClockSource+0xd0>
 8002836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800283a:	f200 8087 	bhi.w	800294c <HAL_TIM_ConfigClockSource+0x168>
 800283e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002842:	f000 8085 	beq.w	8002950 <HAL_TIM_ConfigClockSource+0x16c>
 8002846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284a:	d87f      	bhi.n	800294c <HAL_TIM_ConfigClockSource+0x168>
 800284c:	2b70      	cmp	r3, #112	; 0x70
 800284e:	d01a      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0xa2>
 8002850:	2b70      	cmp	r3, #112	; 0x70
 8002852:	d87b      	bhi.n	800294c <HAL_TIM_ConfigClockSource+0x168>
 8002854:	2b60      	cmp	r3, #96	; 0x60
 8002856:	d050      	beq.n	80028fa <HAL_TIM_ConfigClockSource+0x116>
 8002858:	2b60      	cmp	r3, #96	; 0x60
 800285a:	d877      	bhi.n	800294c <HAL_TIM_ConfigClockSource+0x168>
 800285c:	2b50      	cmp	r3, #80	; 0x50
 800285e:	d03c      	beq.n	80028da <HAL_TIM_ConfigClockSource+0xf6>
 8002860:	2b50      	cmp	r3, #80	; 0x50
 8002862:	d873      	bhi.n	800294c <HAL_TIM_ConfigClockSource+0x168>
 8002864:	2b40      	cmp	r3, #64	; 0x40
 8002866:	d058      	beq.n	800291a <HAL_TIM_ConfigClockSource+0x136>
 8002868:	2b40      	cmp	r3, #64	; 0x40
 800286a:	d86f      	bhi.n	800294c <HAL_TIM_ConfigClockSource+0x168>
 800286c:	2b30      	cmp	r3, #48	; 0x30
 800286e:	d064      	beq.n	800293a <HAL_TIM_ConfigClockSource+0x156>
 8002870:	2b30      	cmp	r3, #48	; 0x30
 8002872:	d86b      	bhi.n	800294c <HAL_TIM_ConfigClockSource+0x168>
 8002874:	2b20      	cmp	r3, #32
 8002876:	d060      	beq.n	800293a <HAL_TIM_ConfigClockSource+0x156>
 8002878:	2b20      	cmp	r3, #32
 800287a:	d867      	bhi.n	800294c <HAL_TIM_ConfigClockSource+0x168>
 800287c:	2b00      	cmp	r3, #0
 800287e:	d05c      	beq.n	800293a <HAL_TIM_ConfigClockSource+0x156>
 8002880:	2b10      	cmp	r3, #16
 8002882:	d05a      	beq.n	800293a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002884:	e062      	b.n	800294c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6899      	ldr	r1, [r3, #8]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f000 faee 	bl	8002e76 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	609a      	str	r2, [r3, #8]
      break;
 80028b2:	e04e      	b.n	8002952 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6899      	ldr	r1, [r3, #8]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f000 fad7 	bl	8002e76 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028d6:	609a      	str	r2, [r3, #8]
      break;
 80028d8:	e03b      	b.n	8002952 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6859      	ldr	r1, [r3, #4]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	461a      	mov	r2, r3
 80028e8:	f000 fa4e 	bl	8002d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2150      	movs	r1, #80	; 0x50
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 faa5 	bl	8002e42 <TIM_ITRx_SetConfig>
      break;
 80028f8:	e02b      	b.n	8002952 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6859      	ldr	r1, [r3, #4]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	461a      	mov	r2, r3
 8002908:	f000 fa6c 	bl	8002de4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2160      	movs	r1, #96	; 0x60
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fa95 	bl	8002e42 <TIM_ITRx_SetConfig>
      break;
 8002918:	e01b      	b.n	8002952 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	6859      	ldr	r1, [r3, #4]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	461a      	mov	r2, r3
 8002928:	f000 fa2e 	bl	8002d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2140      	movs	r1, #64	; 0x40
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fa85 	bl	8002e42 <TIM_ITRx_SetConfig>
      break;
 8002938:	e00b      	b.n	8002952 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4619      	mov	r1, r3
 8002944:	4610      	mov	r0, r2
 8002946:	f000 fa7c 	bl	8002e42 <TIM_ITRx_SetConfig>
        break;
 800294a:	e002      	b.n	8002952 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800294c:	bf00      	nop
 800294e:	e000      	b.n	8002952 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002950:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a29      	ldr	r2, [pc, #164]	; (8002a6c <TIM_Base_SetConfig+0xb8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00b      	beq.n	80029e4 <TIM_Base_SetConfig+0x30>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d2:	d007      	beq.n	80029e4 <TIM_Base_SetConfig+0x30>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a26      	ldr	r2, [pc, #152]	; (8002a70 <TIM_Base_SetConfig+0xbc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d003      	beq.n	80029e4 <TIM_Base_SetConfig+0x30>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a25      	ldr	r2, [pc, #148]	; (8002a74 <TIM_Base_SetConfig+0xc0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d108      	bne.n	80029f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a1c      	ldr	r2, [pc, #112]	; (8002a6c <TIM_Base_SetConfig+0xb8>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00b      	beq.n	8002a16 <TIM_Base_SetConfig+0x62>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a04:	d007      	beq.n	8002a16 <TIM_Base_SetConfig+0x62>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a19      	ldr	r2, [pc, #100]	; (8002a70 <TIM_Base_SetConfig+0xbc>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d003      	beq.n	8002a16 <TIM_Base_SetConfig+0x62>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a18      	ldr	r2, [pc, #96]	; (8002a74 <TIM_Base_SetConfig+0xc0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d108      	bne.n	8002a28 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a07      	ldr	r2, [pc, #28]	; (8002a6c <TIM_Base_SetConfig+0xb8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d103      	bne.n	8002a5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	615a      	str	r2, [r3, #20]
}
 8002a62:	bf00      	nop
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr
 8002a6c:	40012c00 	.word	0x40012c00
 8002a70:	40000400 	.word	0x40000400
 8002a74:	40000800 	.word	0x40000800

08002a78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	f023 0201 	bic.w	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 0303 	bic.w	r3, r3, #3
 8002aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f023 0302 	bic.w	r3, r3, #2
 8002ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a1c      	ldr	r2, [pc, #112]	; (8002b40 <TIM_OC1_SetConfig+0xc8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d10c      	bne.n	8002aee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f023 0308 	bic.w	r3, r3, #8
 8002ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f023 0304 	bic.w	r3, r3, #4
 8002aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a13      	ldr	r2, [pc, #76]	; (8002b40 <TIM_OC1_SetConfig+0xc8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d111      	bne.n	8002b1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002afc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	621a      	str	r2, [r3, #32]
}
 8002b34:	bf00      	nop
 8002b36:	371c      	adds	r7, #28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40012c00 	.word	0x40012c00

08002b44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	f023 0210 	bic.w	r2, r3, #16
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f023 0320 	bic.w	r3, r3, #32
 8002b8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a1d      	ldr	r2, [pc, #116]	; (8002c14 <TIM_OC2_SetConfig+0xd0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d10d      	bne.n	8002bc0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002baa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a14      	ldr	r2, [pc, #80]	; (8002c14 <TIM_OC2_SetConfig+0xd0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d113      	bne.n	8002bf0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	621a      	str	r2, [r3, #32]
}
 8002c0a:	bf00      	nop
 8002c0c:	371c      	adds	r7, #28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	40012c00 	.word	0x40012c00

08002c18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 0303 	bic.w	r3, r3, #3
 8002c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	021b      	lsls	r3, r3, #8
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a1d      	ldr	r2, [pc, #116]	; (8002ce8 <TIM_OC3_SetConfig+0xd0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d10d      	bne.n	8002c92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	021b      	lsls	r3, r3, #8
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a14      	ldr	r2, [pc, #80]	; (8002ce8 <TIM_OC3_SetConfig+0xd0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d113      	bne.n	8002cc2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	621a      	str	r2, [r3, #32]
}
 8002cdc:	bf00      	nop
 8002cde:	371c      	adds	r7, #28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40012c00 	.word	0x40012c00

08002cec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	021b      	lsls	r3, r3, #8
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	031b      	lsls	r3, r3, #12
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a0f      	ldr	r2, [pc, #60]	; (8002d84 <TIM_OC4_SetConfig+0x98>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d109      	bne.n	8002d60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	019b      	lsls	r3, r3, #6
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	621a      	str	r2, [r3, #32]
}
 8002d7a:	bf00      	nop
 8002d7c:	371c      	adds	r7, #28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	40012c00 	.word	0x40012c00

08002d88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f023 0201 	bic.w	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f023 030a 	bic.w	r3, r3, #10
 8002dc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	621a      	str	r2, [r3, #32]
}
 8002dda:	bf00      	nop
 8002ddc:	371c      	adds	r7, #28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f023 0210 	bic.w	r2, r3, #16
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	031b      	lsls	r3, r3, #12
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	621a      	str	r2, [r3, #32]
}
 8002e38:	bf00      	nop
 8002e3a:	371c      	adds	r7, #28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc80      	pop	{r7}
 8002e40:	4770      	bx	lr

08002e42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b085      	sub	sp, #20
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f043 0307 	orr.w	r3, r3, #7
 8002e64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	609a      	str	r2, [r3, #8]
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr

08002e76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b087      	sub	sp, #28
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
 8002e82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	021a      	lsls	r2, r3, #8
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	609a      	str	r2, [r3, #8]
}
 8002eaa:	bf00      	nop
 8002eac:	371c      	adds	r7, #28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d109      	bne.n	8002ed8 <HAL_TIMEx_PWMN_Start+0x24>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	bf14      	ite	ne
 8002ed0:	2301      	movne	r3, #1
 8002ed2:	2300      	moveq	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	e022      	b.n	8002f1e <HAL_TIMEx_PWMN_Start+0x6a>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d109      	bne.n	8002ef2 <HAL_TIMEx_PWMN_Start+0x3e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	bf14      	ite	ne
 8002eea:	2301      	movne	r3, #1
 8002eec:	2300      	moveq	r3, #0
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	e015      	b.n	8002f1e <HAL_TIMEx_PWMN_Start+0x6a>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d109      	bne.n	8002f0c <HAL_TIMEx_PWMN_Start+0x58>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	bf14      	ite	ne
 8002f04:	2301      	movne	r3, #1
 8002f06:	2300      	moveq	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	e008      	b.n	8002f1e <HAL_TIMEx_PWMN_Start+0x6a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	bf14      	ite	ne
 8002f18:	2301      	movne	r3, #1
 8002f1a:	2300      	moveq	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e059      	b.n	8002fda <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d104      	bne.n	8002f36 <HAL_TIMEx_PWMN_Start+0x82>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f34:	e013      	b.n	8002f5e <HAL_TIMEx_PWMN_Start+0xaa>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d104      	bne.n	8002f46 <HAL_TIMEx_PWMN_Start+0x92>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f44:	e00b      	b.n	8002f5e <HAL_TIMEx_PWMN_Start+0xaa>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d104      	bne.n	8002f56 <HAL_TIMEx_PWMN_Start+0xa2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f54:	e003      	b.n	8002f5e <HAL_TIMEx_PWMN_Start+0xaa>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2204      	movs	r2, #4
 8002f64:	6839      	ldr	r1, [r7, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f8b2 	bl	80030d0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f7a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <HAL_TIMEx_PWMN_Start+0x130>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00e      	beq.n	8002fa4 <HAL_TIMEx_PWMN_Start+0xf0>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8e:	d009      	beq.n	8002fa4 <HAL_TIMEx_PWMN_Start+0xf0>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a14      	ldr	r2, [pc, #80]	; (8002fe8 <HAL_TIMEx_PWMN_Start+0x134>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d004      	beq.n	8002fa4 <HAL_TIMEx_PWMN_Start+0xf0>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a13      	ldr	r2, [pc, #76]	; (8002fec <HAL_TIMEx_PWMN_Start+0x138>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d111      	bne.n	8002fc8 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b06      	cmp	r3, #6
 8002fb4:	d010      	beq.n	8002fd8 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 0201 	orr.w	r2, r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc6:	e007      	b.n	8002fd8 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40012c00 	.word	0x40012c00
 8002fe8:	40000400 	.word	0x40000400
 8002fec:	40000800 	.word	0x40000800

08002ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003004:	2302      	movs	r3, #2
 8003006:	e046      	b.n	8003096 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a16      	ldr	r2, [pc, #88]	; (80030a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d00e      	beq.n	800306a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003054:	d009      	beq.n	800306a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a12      	ldr	r2, [pc, #72]	; (80030a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d004      	beq.n	800306a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a10      	ldr	r2, [pc, #64]	; (80030a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d10c      	bne.n	8003084 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	4313      	orrs	r3, r2
 800307a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr
 80030a0:	40012c00 	.word	0x40012c00
 80030a4:	40000400 	.word	0x40000400
 80030a8:	40000800 	.word	0x40000800

080030ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	2204      	movs	r2, #4
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a1a      	ldr	r2, [r3, #32]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	401a      	ands	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a1a      	ldr	r2, [r3, #32]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f003 031f 	and.w	r3, r3, #31
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	fa01 f303 	lsl.w	r3, r1, r3
 8003108:	431a      	orrs	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	621a      	str	r2, [r3, #32]
}
 800310e:	bf00      	nop
 8003110:	371c      	adds	r7, #28
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e03f      	b.n	80031aa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fd ffe8 	bl	8001114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2224      	movs	r2, #36	; 0x24
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800315a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fb49 	bl	80037f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003170:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695a      	ldr	r2, [r3, #20]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003180:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003190:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08a      	sub	sp, #40	; 0x28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10d      	bne.n	8003206 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_UART_IRQHandler+0x52>
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fa4f 	bl	80036a2 <UART_Receive_IT>
      return;
 8003204:	e17b      	b.n	80034fe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80b1 	beq.w	8003370 <HAL_UART_IRQHandler+0x1bc>
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d105      	bne.n	8003224 <HAL_UART_IRQHandler+0x70>
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 80a6 	beq.w	8003370 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_UART_IRQHandler+0x90>
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	f043 0201 	orr.w	r2, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <HAL_UART_IRQHandler+0xb0>
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f043 0202 	orr.w	r2, r3, #2
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HAL_UART_IRQHandler+0xd0>
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	f043 0204 	orr.w	r2, r3, #4
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00f      	beq.n	80032ae <HAL_UART_IRQHandler+0xfa>
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b00      	cmp	r3, #0
 8003296:	d104      	bne.n	80032a2 <HAL_UART_IRQHandler+0xee>
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d005      	beq.n	80032ae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f043 0208 	orr.w	r2, r3, #8
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 811e 	beq.w	80034f4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <HAL_UART_IRQHandler+0x11e>
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f9e8 	bl	80036a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf14      	ite	ne
 80032e0:	2301      	movne	r3, #1
 80032e2:	2300      	moveq	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d102      	bne.n	80032fa <HAL_UART_IRQHandler+0x146>
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d031      	beq.n	800335e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f92a 	bl	8003554 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330a:	2b00      	cmp	r3, #0
 800330c:	d023      	beq.n	8003356 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800331c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	2b00      	cmp	r3, #0
 8003324:	d013      	beq.n	800334e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332a:	4a76      	ldr	r2, [pc, #472]	; (8003504 <HAL_UART_IRQHandler+0x350>)
 800332c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe f952 	bl	80015dc <HAL_DMA_Abort_IT>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d016      	beq.n	800336c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003348:	4610      	mov	r0, r2
 800334a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800334c:	e00e      	b.n	800336c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f8ec 	bl	800352c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003354:	e00a      	b.n	800336c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f8e8 	bl	800352c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800335c:	e006      	b.n	800336c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f8e4 	bl	800352c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800336a:	e0c3      	b.n	80034f4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800336c:	bf00      	nop
    return;
 800336e:	e0c1      	b.n	80034f4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	2b01      	cmp	r3, #1
 8003376:	f040 80a1 	bne.w	80034bc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 809b 	beq.w	80034bc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 8095 	beq.w	80034bc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d04e      	beq.n	8003454 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80033c0:	8a3b      	ldrh	r3, [r7, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 8098 	beq.w	80034f8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033cc:	8a3a      	ldrh	r2, [r7, #16]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	f080 8092 	bcs.w	80034f8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	8a3a      	ldrh	r2, [r7, #16]
 80033d8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d02b      	beq.n	800343c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033f2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0201 	bic.w	r2, r2, #1
 8003402:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695a      	ldr	r2, [r3, #20]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003412:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0210 	bic.w	r2, r2, #16
 8003430:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003436:	4618      	mov	r0, r3
 8003438:	f7fe f895 	bl	8001566 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003444:	b29b      	uxth	r3, r3
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	b29b      	uxth	r3, r3
 800344a:	4619      	mov	r1, r3
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f876 	bl	800353e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003452:	e051      	b.n	80034f8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800345c:	b29b      	uxth	r3, r3
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d047      	beq.n	80034fc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800346c:	8a7b      	ldrh	r3, [r7, #18]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d044      	beq.n	80034fc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003480:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695a      	ldr	r2, [r3, #20]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0210 	bic.w	r2, r2, #16
 80034ae:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034b0:	8a7b      	ldrh	r3, [r7, #18]
 80034b2:	4619      	mov	r1, r3
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f842 	bl	800353e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80034ba:	e01f      	b.n	80034fc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d008      	beq.n	80034d8 <HAL_UART_IRQHandler+0x324>
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f87f 	bl	80035d4 <UART_Transmit_IT>
    return;
 80034d6:	e012      	b.n	80034fe <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00d      	beq.n	80034fe <HAL_UART_IRQHandler+0x34a>
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f8c0 	bl	8003672 <UART_EndTransmit_IT>
    return;
 80034f2:	e004      	b.n	80034fe <HAL_UART_IRQHandler+0x34a>
    return;
 80034f4:	bf00      	nop
 80034f6:	e002      	b.n	80034fe <HAL_UART_IRQHandler+0x34a>
      return;
 80034f8:	bf00      	nop
 80034fa:	e000      	b.n	80034fe <HAL_UART_IRQHandler+0x34a>
      return;
 80034fc:	bf00      	nop
  }
}
 80034fe:	3728      	adds	r7, #40	; 0x28
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	080035ad 	.word	0x080035ad

08003508 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr

0800351a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr

0800352c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr

0800353e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	460b      	mov	r3, r1
 8003548:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr

08003554 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800356a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695a      	ldr	r2, [r3, #20]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003580:	2b01      	cmp	r3, #1
 8003582:	d107      	bne.n	8003594 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0210 	bic.w	r2, r2, #16
 8003592:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr

080035ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f7ff ffb0 	bl	800352c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035cc:	bf00      	nop
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b21      	cmp	r3, #33	; 0x21
 80035e6:	d13e      	bne.n	8003666 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f0:	d114      	bne.n	800361c <UART_Transmit_IT+0x48>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d110      	bne.n	800361c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	461a      	mov	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800360e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	1c9a      	adds	r2, r3, #2
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	621a      	str	r2, [r3, #32]
 800361a:	e008      	b.n	800362e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	1c59      	adds	r1, r3, #1
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6211      	str	r1, [r2, #32]
 8003626:	781a      	ldrb	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29b      	uxth	r3, r3
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	4619      	mov	r1, r3
 800363c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10f      	bne.n	8003662 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003650:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003660:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	e000      	b.n	8003668 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003666:	2302      	movs	r3, #2
  }
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr

08003672 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003688:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff ff38 	bl	8003508 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b086      	sub	sp, #24
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b22      	cmp	r3, #34	; 0x22
 80036b4:	f040 8099 	bne.w	80037ea <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c0:	d117      	bne.n	80036f2 <UART_Receive_IT+0x50>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d113      	bne.n	80036f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	1c9a      	adds	r2, r3, #2
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	629a      	str	r2, [r3, #40]	; 0x28
 80036f0:	e026      	b.n	8003740 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003704:	d007      	beq.n	8003716 <UART_Receive_IT+0x74>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10a      	bne.n	8003724 <UART_Receive_IT+0x82>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	b2da      	uxtb	r2, r3
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	701a      	strb	r2, [r3, #0]
 8003722:	e008      	b.n	8003736 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003730:	b2da      	uxtb	r2, r3
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29b      	uxth	r3, r3
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	4619      	mov	r1, r3
 800374e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003750:	2b00      	cmp	r3, #0
 8003752:	d148      	bne.n	80037e6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0220 	bic.w	r2, r2, #32
 8003762:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003772:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	2b01      	cmp	r3, #1
 8003792:	d123      	bne.n	80037dc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0210 	bic.w	r2, r2, #16
 80037a8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b10      	cmp	r3, #16
 80037b6:	d10a      	bne.n	80037ce <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037d2:	4619      	mov	r1, r3
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff feb2 	bl	800353e <HAL_UARTEx_RxEventCallback>
 80037da:	e002      	b.n	80037e2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff fe9c 	bl	800351a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e002      	b.n	80037ec <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	e000      	b.n	80037ec <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80037ea:	2302      	movs	r3, #2
  }
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	4313      	orrs	r3, r2
 8003822:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800382e:	f023 030c 	bic.w	r3, r3, #12
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	430b      	orrs	r3, r1
 800383a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699a      	ldr	r2, [r3, #24]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a2c      	ldr	r2, [pc, #176]	; (8003908 <UART_SetConfig+0x114>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d103      	bne.n	8003864 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800385c:	f7fe fcd0 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	e002      	b.n	800386a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003864:	f7fe fcb8 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 8003868:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	009a      	lsls	r2, r3, #2
 8003874:	441a      	add	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003880:	4a22      	ldr	r2, [pc, #136]	; (800390c <UART_SetConfig+0x118>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	0119      	lsls	r1, r3, #4
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	009a      	lsls	r2, r3, #2
 8003894:	441a      	add	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	fbb2 f2f3 	udiv	r2, r2, r3
 80038a0:	4b1a      	ldr	r3, [pc, #104]	; (800390c <UART_SetConfig+0x118>)
 80038a2:	fba3 0302 	umull	r0, r3, r3, r2
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	2064      	movs	r0, #100	; 0x64
 80038aa:	fb00 f303 	mul.w	r3, r0, r3
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	3332      	adds	r3, #50	; 0x32
 80038b4:	4a15      	ldr	r2, [pc, #84]	; (800390c <UART_SetConfig+0x118>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038c0:	4419      	add	r1, r3
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	009a      	lsls	r2, r3, #2
 80038cc:	441a      	add	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038d8:	4b0c      	ldr	r3, [pc, #48]	; (800390c <UART_SetConfig+0x118>)
 80038da:	fba3 0302 	umull	r0, r3, r3, r2
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	2064      	movs	r0, #100	; 0x64
 80038e2:	fb00 f303 	mul.w	r3, r0, r3
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	3332      	adds	r3, #50	; 0x32
 80038ec:	4a07      	ldr	r2, [pc, #28]	; (800390c <UART_SetConfig+0x118>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	f003 020f 	and.w	r2, r3, #15
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	440a      	add	r2, r1
 80038fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003900:	bf00      	nop
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40013800 	.word	0x40013800
 800390c:	51eb851f 	.word	0x51eb851f

08003910 <__libc_init_array>:
 8003910:	b570      	push	{r4, r5, r6, lr}
 8003912:	2600      	movs	r6, #0
 8003914:	4d0c      	ldr	r5, [pc, #48]	; (8003948 <__libc_init_array+0x38>)
 8003916:	4c0d      	ldr	r4, [pc, #52]	; (800394c <__libc_init_array+0x3c>)
 8003918:	1b64      	subs	r4, r4, r5
 800391a:	10a4      	asrs	r4, r4, #2
 800391c:	42a6      	cmp	r6, r4
 800391e:	d109      	bne.n	8003934 <__libc_init_array+0x24>
 8003920:	f000 f822 	bl	8003968 <_init>
 8003924:	2600      	movs	r6, #0
 8003926:	4d0a      	ldr	r5, [pc, #40]	; (8003950 <__libc_init_array+0x40>)
 8003928:	4c0a      	ldr	r4, [pc, #40]	; (8003954 <__libc_init_array+0x44>)
 800392a:	1b64      	subs	r4, r4, r5
 800392c:	10a4      	asrs	r4, r4, #2
 800392e:	42a6      	cmp	r6, r4
 8003930:	d105      	bne.n	800393e <__libc_init_array+0x2e>
 8003932:	bd70      	pop	{r4, r5, r6, pc}
 8003934:	f855 3b04 	ldr.w	r3, [r5], #4
 8003938:	4798      	blx	r3
 800393a:	3601      	adds	r6, #1
 800393c:	e7ee      	b.n	800391c <__libc_init_array+0xc>
 800393e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003942:	4798      	blx	r3
 8003944:	3601      	adds	r6, #1
 8003946:	e7f2      	b.n	800392e <__libc_init_array+0x1e>
 8003948:	080039a8 	.word	0x080039a8
 800394c:	080039a8 	.word	0x080039a8
 8003950:	080039a8 	.word	0x080039a8
 8003954:	080039ac 	.word	0x080039ac

08003958 <memset>:
 8003958:	4603      	mov	r3, r0
 800395a:	4402      	add	r2, r0
 800395c:	4293      	cmp	r3, r2
 800395e:	d100      	bne.n	8003962 <memset+0xa>
 8003960:	4770      	bx	lr
 8003962:	f803 1b01 	strb.w	r1, [r3], #1
 8003966:	e7f9      	b.n	800395c <memset+0x4>

08003968 <_init>:
 8003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396a:	bf00      	nop
 800396c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396e:	bc08      	pop	{r3}
 8003970:	469e      	mov	lr, r3
 8003972:	4770      	bx	lr

08003974 <_fini>:
 8003974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003976:	bf00      	nop
 8003978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397a:	bc08      	pop	{r3}
 800397c:	469e      	mov	lr, r3
 800397e:	4770      	bx	lr
