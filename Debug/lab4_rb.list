
lab4_rb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080045d0  080045d0  000145d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004638  08004638  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  08004638  08004638  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004638  08004638  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004638  08004638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800463c  0800463c  0001463c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08004640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  200000bc  080046fc  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  080046fc  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd0d  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002118  00000000  00000000  0002cdf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  0002ef10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  0002fc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018084  00000000  00000000  000308f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dced  00000000  00000000  00048974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b0c7  00000000  00000000  00056661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1728  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a44  00000000  00000000  000e177c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000bc 	.word	0x200000bc
 8000128:	00000000 	.word	0x00000000
 800012c:	080045b8 	.word	0x080045b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c0 	.word	0x200000c0
 8000148:	080045b8 	.word	0x080045b8

0800014c <is_Button1_Pressed>:
int TimeOutForKeyPress_1 = 300;
int TimeOutForKeyPress_2 = 100;
int TimeOutForKeyPress_3 = 100;
int TimeOutForKeyPress_4 = 100;
////////////press////////////
int is_Button1_Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <is_Button1_Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <is_Button1_Pressed+0x16>
	{
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <is_Button1_Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <is_Button1_Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000d8 	.word	0x200000d8

08000170 <is_Button1_Pressed_3s>:
int is_Button1_Pressed_3s(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button1_3s_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <is_Button1_Pressed_3s+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <is_Button1_Pressed_3s+0x16>
	{
		button1_3s_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <is_Button1_Pressed_3s+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <is_Button1_Pressed_3s+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000dc 	.word	0x200000dc

08000194 <is_Button2_Pressed>:
int is_Button2_Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button2_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <is_Button2_Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <is_Button2_Pressed+0x16>
	{
		button2_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <is_Button2_Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <is_Button2_Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000e0 	.word	0x200000e0

080001b8 <is_Button3_Pressed>:
int is_Button3_Pressed(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if(button3_flag == 1)
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <is_Button3_Pressed+0x20>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <is_Button3_Pressed+0x16>
	{
		button3_flag =0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <is_Button3_Pressed+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <is_Button3_Pressed+0x18>
	}
	return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	200000e4 	.word	0x200000e4

080001dc <is_Button4_Pressed>:
int is_Button4_Pressed(){
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
	if(button4_flag == 1)
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <is_Button4_Pressed+0x20>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d104      	bne.n	80001f2 <is_Button4_Pressed+0x16>
	{
		button4_flag =0;
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <is_Button4_Pressed+0x20>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
		return 1;
 80001ee:	2301      	movs	r3, #1
 80001f0:	e000      	b.n	80001f4 <is_Button4_Pressed+0x18>
	}
	return 0;
 80001f2:	2300      	movs	r3, #0
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	200000e8 	.word	0x200000e8

08000200 <subKeyProcess_1>:
///////////subkey////////////

void subKeyProcess_1(){
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	button1_flag=1;
 8000204:	4b03      	ldr	r3, [pc, #12]	; (8000214 <subKeyProcess_1+0x14>)
 8000206:	2201      	movs	r2, #1
 8000208:	601a      	str	r2, [r3, #0]
}
 800020a:	bf00      	nop
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	200000d8 	.word	0x200000d8

08000218 <subKeyProcess_3s_1>:
void subKeyProcess_3s_1(){
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	button1_3s_flag=1;
 800021c:	4b03      	ldr	r3, [pc, #12]	; (800022c <subKeyProcess_3s_1+0x14>)
 800021e:	2201      	movs	r2, #1
 8000220:	601a      	str	r2, [r3, #0]
}
 8000222:	bf00      	nop
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	200000dc 	.word	0x200000dc

08000230 <getKeyInput_1>:
	button3_flag=1;
}
void subKeyProcess_4(){
	button4_flag=1;
}
void getKeyInput_1(){
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  KeyReg10 = KeyReg9;
 8000234:	4b20      	ldr	r3, [pc, #128]	; (80002b8 <getKeyInput_1+0x88>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a20      	ldr	r2, [pc, #128]	; (80002bc <getKeyInput_1+0x8c>)
 800023a:	6013      	str	r3, [r2, #0]
  KeyReg9 = KeyReg8;
 800023c:	4b20      	ldr	r3, [pc, #128]	; (80002c0 <getKeyInput_1+0x90>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a1d      	ldr	r2, [pc, #116]	; (80002b8 <getKeyInput_1+0x88>)
 8000242:	6013      	str	r3, [r2, #0]
  KeyReg8 = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 8000244:	2102      	movs	r1, #2
 8000246:	481f      	ldr	r0, [pc, #124]	; (80002c4 <getKeyInput_1+0x94>)
 8000248:	f001 fcce 	bl	8001be8 <HAL_GPIO_ReadPin>
 800024c:	4603      	mov	r3, r0
 800024e:	461a      	mov	r2, r3
 8000250:	4b1b      	ldr	r3, [pc, #108]	; (80002c0 <getKeyInput_1+0x90>)
 8000252:	601a      	str	r2, [r3, #0]
  if ((KeyReg9 == KeyReg8) && (KeyReg9 == KeyReg10)){
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <getKeyInput_1+0x88>)
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	4b19      	ldr	r3, [pc, #100]	; (80002c0 <getKeyInput_1+0x90>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	429a      	cmp	r2, r3
 800025e:	d129      	bne.n	80002b4 <getKeyInput_1+0x84>
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <getKeyInput_1+0x88>)
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	4b15      	ldr	r3, [pc, #84]	; (80002bc <getKeyInput_1+0x8c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	429a      	cmp	r2, r3
 800026a:	d123      	bne.n	80002b4 <getKeyInput_1+0x84>
    if (KeyReg10 != KeyReg11){
 800026c:	4b13      	ldr	r3, [pc, #76]	; (80002bc <getKeyInput_1+0x8c>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <getKeyInput_1+0x98>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	429a      	cmp	r2, r3
 8000276:	d00e      	beq.n	8000296 <getKeyInput_1+0x66>
      KeyReg11 = KeyReg10;
 8000278:	4b10      	ldr	r3, [pc, #64]	; (80002bc <getKeyInput_1+0x8c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a12      	ldr	r2, [pc, #72]	; (80002c8 <getKeyInput_1+0x98>)
 800027e:	6013      	str	r3, [r2, #0]

      if (KeyReg10 == PRESSED_STATE){
 8000280:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <getKeyInput_1+0x8c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d115      	bne.n	80002b4 <getKeyInput_1+0x84>
        TimeOutForKeyPress_1 = 300;
 8000288:	4b10      	ldr	r3, [pc, #64]	; (80002cc <getKeyInput_1+0x9c>)
 800028a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800028e:	601a      	str	r2, [r3, #0]
        subKeyProcess_1();
 8000290:	f7ff ffb6 	bl	8000200 <subKeyProcess_1>
//        	TimeOutForKeyPress_1 = 100;

        }
    }
  }
}
 8000294:	e00e      	b.n	80002b4 <getKeyInput_1+0x84>
       TimeOutForKeyPress_1 --;
 8000296:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <getKeyInput_1+0x9c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	3b01      	subs	r3, #1
 800029c:	4a0b      	ldr	r2, [pc, #44]	; (80002cc <getKeyInput_1+0x9c>)
 800029e:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress_1 == 0){
 80002a0:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <getKeyInput_1+0x9c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d105      	bne.n	80002b4 <getKeyInput_1+0x84>
        	if (KeyReg10 == PRESSED_STATE){
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <getKeyInput_1+0x8c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d101      	bne.n	80002b4 <getKeyInput_1+0x84>
        		subKeyProcess_3s_1();
 80002b0:	f7ff ffb2 	bl	8000218 <subKeyProcess_3s_1>
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000024 	.word	0x20000024
 80002bc:	20000028 	.word	0x20000028
 80002c0:	20000020 	.word	0x20000020
 80002c4:	40010800 	.word	0x40010800
 80002c8:	2000002c 	.word	0x2000002c
 80002cc:	20000030 	.word	0x20000030

080002d0 <getKeyInput_2>:
void getKeyInput_2(){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  KeyReg2 = KeyReg1;
 80002d4:	4b23      	ldr	r3, [pc, #140]	; (8000364 <getKeyInput_2+0x94>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a23      	ldr	r2, [pc, #140]	; (8000368 <getKeyInput_2+0x98>)
 80002da:	6013      	str	r3, [r2, #0]
  KeyReg1 = KeyReg0;
 80002dc:	4b23      	ldr	r3, [pc, #140]	; (800036c <getKeyInput_2+0x9c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a20      	ldr	r2, [pc, #128]	; (8000364 <getKeyInput_2+0x94>)
 80002e2:	6013      	str	r3, [r2, #0]
  KeyReg0 = HAL_GPIO_ReadPin(A2_GPIO_Port, A2_Pin);
 80002e4:	2110      	movs	r1, #16
 80002e6:	4822      	ldr	r0, [pc, #136]	; (8000370 <getKeyInput_2+0xa0>)
 80002e8:	f001 fc7e 	bl	8001be8 <HAL_GPIO_ReadPin>
 80002ec:	4603      	mov	r3, r0
 80002ee:	461a      	mov	r2, r3
 80002f0:	4b1e      	ldr	r3, [pc, #120]	; (800036c <getKeyInput_2+0x9c>)
 80002f2:	601a      	str	r2, [r3, #0]
  if ((KeyReg1 == KeyReg0) && (KeyReg1 == KeyReg2)){
 80002f4:	4b1b      	ldr	r3, [pc, #108]	; (8000364 <getKeyInput_2+0x94>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	4b1c      	ldr	r3, [pc, #112]	; (800036c <getKeyInput_2+0x9c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d12e      	bne.n	800035e <getKeyInput_2+0x8e>
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <getKeyInput_2+0x94>)
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <getKeyInput_2+0x98>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	429a      	cmp	r2, r3
 800030a:	d128      	bne.n	800035e <getKeyInput_2+0x8e>
	if (KeyReg2 != KeyReg3){
 800030c:	4b16      	ldr	r3, [pc, #88]	; (8000368 <getKeyInput_2+0x98>)
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	4b18      	ldr	r3, [pc, #96]	; (8000374 <getKeyInput_2+0xa4>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	429a      	cmp	r2, r3
 8000316:	d00f      	beq.n	8000338 <getKeyInput_2+0x68>
		KeyReg3 = KeyReg2;
 8000318:	4b13      	ldr	r3, [pc, #76]	; (8000368 <getKeyInput_2+0x98>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a15      	ldr	r2, [pc, #84]	; (8000374 <getKeyInput_2+0xa4>)
 800031e:	6013      	str	r3, [r2, #0]
		if (KeyReg2 == PRESSED_STATE){
 8000320:	4b11      	ldr	r3, [pc, #68]	; (8000368 <getKeyInput_2+0x98>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d11a      	bne.n	800035e <getKeyInput_2+0x8e>
			button2_flag = 1;
 8000328:	4b13      	ldr	r3, [pc, #76]	; (8000378 <getKeyInput_2+0xa8>)
 800032a:	2201      	movs	r2, #1
 800032c:	601a      	str	r2, [r3, #0]
			TimeOutForKeyPress_2 = 300;
 800032e:	4b13      	ldr	r3, [pc, #76]	; (800037c <getKeyInput_2+0xac>)
 8000330:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000334:	601a      	str	r2, [r3, #0]
    		if(KeyReg2 == PRESSED_STATE) button2_flag = 1;
    		TimeOutForKeyPress_2 = 100;
    	}
	}
  }
}
 8000336:	e012      	b.n	800035e <getKeyInput_2+0x8e>
    	TimeOutForKeyPress_2 --;
 8000338:	4b10      	ldr	r3, [pc, #64]	; (800037c <getKeyInput_2+0xac>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3b01      	subs	r3, #1
 800033e:	4a0f      	ldr	r2, [pc, #60]	; (800037c <getKeyInput_2+0xac>)
 8000340:	6013      	str	r3, [r2, #0]
    	if (TimeOutForKeyPress_2 == 0){
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <getKeyInput_2+0xac>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d109      	bne.n	800035e <getKeyInput_2+0x8e>
    		if(KeyReg2 == PRESSED_STATE) button2_flag = 1;
 800034a:	4b07      	ldr	r3, [pc, #28]	; (8000368 <getKeyInput_2+0x98>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d102      	bne.n	8000358 <getKeyInput_2+0x88>
 8000352:	4b09      	ldr	r3, [pc, #36]	; (8000378 <getKeyInput_2+0xa8>)
 8000354:	2201      	movs	r2, #1
 8000356:	601a      	str	r2, [r3, #0]
    		TimeOutForKeyPress_2 = 100;
 8000358:	4b08      	ldr	r3, [pc, #32]	; (800037c <getKeyInput_2+0xac>)
 800035a:	2264      	movs	r2, #100	; 0x64
 800035c:	601a      	str	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000004 	.word	0x20000004
 8000368:	20000008 	.word	0x20000008
 800036c:	20000000 	.word	0x20000000
 8000370:	40010800 	.word	0x40010800
 8000374:	2000000c 	.word	0x2000000c
 8000378:	200000e0 	.word	0x200000e0
 800037c:	20000034 	.word	0x20000034

08000380 <getKeyInput_3>:


void getKeyInput_3(){
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  KeyReg6 = KeyReg5;
 8000384:	4b23      	ldr	r3, [pc, #140]	; (8000414 <getKeyInput_3+0x94>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a23      	ldr	r2, [pc, #140]	; (8000418 <getKeyInput_3+0x98>)
 800038a:	6013      	str	r3, [r2, #0]
  KeyReg5 = KeyReg4;
 800038c:	4b23      	ldr	r3, [pc, #140]	; (800041c <getKeyInput_3+0x9c>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a20      	ldr	r2, [pc, #128]	; (8000414 <getKeyInput_3+0x94>)
 8000392:	6013      	str	r3, [r2, #0]
  KeyReg4 = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin);
 8000394:	2101      	movs	r1, #1
 8000396:	4822      	ldr	r0, [pc, #136]	; (8000420 <getKeyInput_3+0xa0>)
 8000398:	f001 fc26 	bl	8001be8 <HAL_GPIO_ReadPin>
 800039c:	4603      	mov	r3, r0
 800039e:	461a      	mov	r2, r3
 80003a0:	4b1e      	ldr	r3, [pc, #120]	; (800041c <getKeyInput_3+0x9c>)
 80003a2:	601a      	str	r2, [r3, #0]
  if ((KeyReg5 == KeyReg4) && (KeyReg5 == KeyReg6)){
 80003a4:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <getKeyInput_3+0x94>)
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	4b1c      	ldr	r3, [pc, #112]	; (800041c <getKeyInput_3+0x9c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d12e      	bne.n	800040e <getKeyInput_3+0x8e>
 80003b0:	4b18      	ldr	r3, [pc, #96]	; (8000414 <getKeyInput_3+0x94>)
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	4b18      	ldr	r3, [pc, #96]	; (8000418 <getKeyInput_3+0x98>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d128      	bne.n	800040e <getKeyInput_3+0x8e>
	  if (KeyReg6 != KeyReg7){
 80003bc:	4b16      	ldr	r3, [pc, #88]	; (8000418 <getKeyInput_3+0x98>)
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	4b18      	ldr	r3, [pc, #96]	; (8000424 <getKeyInput_3+0xa4>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	429a      	cmp	r2, r3
 80003c6:	d00f      	beq.n	80003e8 <getKeyInput_3+0x68>
		  KeyReg7 = KeyReg6;
 80003c8:	4b13      	ldr	r3, [pc, #76]	; (8000418 <getKeyInput_3+0x98>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a15      	ldr	r2, [pc, #84]	; (8000424 <getKeyInput_3+0xa4>)
 80003ce:	6013      	str	r3, [r2, #0]
		  if (KeyReg6 == PRESSED_STATE){
 80003d0:	4b11      	ldr	r3, [pc, #68]	; (8000418 <getKeyInput_3+0x98>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d11a      	bne.n	800040e <getKeyInput_3+0x8e>
			  button3_flag = 1;
 80003d8:	4b13      	ldr	r3, [pc, #76]	; (8000428 <getKeyInput_3+0xa8>)
 80003da:	2201      	movs	r2, #1
 80003dc:	601a      	str	r2, [r3, #0]
			  TimeOutForKeyPress_3 = 300;
 80003de:	4b13      	ldr	r3, [pc, #76]	; (800042c <getKeyInput_3+0xac>)
 80003e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003e4:	601a      	str	r2, [r3, #0]
		      	if(KeyReg6 == PRESSED_STATE)button3_flag = 1;
		      	TimeOutForKeyPress_3 = 100;
		  }
	  }
  }
}
 80003e6:	e012      	b.n	800040e <getKeyInput_3+0x8e>
		  TimeOutForKeyPress_3 --;
 80003e8:	4b10      	ldr	r3, [pc, #64]	; (800042c <getKeyInput_3+0xac>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	3b01      	subs	r3, #1
 80003ee:	4a0f      	ldr	r2, [pc, #60]	; (800042c <getKeyInput_3+0xac>)
 80003f0:	6013      	str	r3, [r2, #0]
		  if (TimeOutForKeyPress_3 == 0){
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <getKeyInput_3+0xac>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d109      	bne.n	800040e <getKeyInput_3+0x8e>
		      	if(KeyReg6 == PRESSED_STATE)button3_flag = 1;
 80003fa:	4b07      	ldr	r3, [pc, #28]	; (8000418 <getKeyInput_3+0x98>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d102      	bne.n	8000408 <getKeyInput_3+0x88>
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <getKeyInput_3+0xa8>)
 8000404:	2201      	movs	r2, #1
 8000406:	601a      	str	r2, [r3, #0]
		      	TimeOutForKeyPress_3 = 100;
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <getKeyInput_3+0xac>)
 800040a:	2264      	movs	r2, #100	; 0x64
 800040c:	601a      	str	r2, [r3, #0]
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000014 	.word	0x20000014
 8000418:	20000018 	.word	0x20000018
 800041c:	20000010 	.word	0x20000010
 8000420:	40010c00 	.word	0x40010c00
 8000424:	2000001c 	.word	0x2000001c
 8000428:	200000e4 	.word	0x200000e4
 800042c:	20000038 	.word	0x20000038

08000430 <fsm_simple_buttons_run>:
#include "software_timer.h"
#include "button.h"
#include "main.h"


void fsm_simple_buttons_run () {
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	switch(mode){
 8000434:	4b9d      	ldr	r3, [pc, #628]	; (80006ac <fsm_simple_buttons_run+0x27c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b04      	cmp	r3, #4
 800043a:	f200 81be 	bhi.w	80007ba <fsm_simple_buttons_run+0x38a>
 800043e:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <fsm_simple_buttons_run+0x14>)
 8000440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000444:	08000459 	.word	0x08000459
 8000448:	08000475 	.word	0x08000475
 800044c:	0800050f 	.word	0x0800050f
 8000450:	080005dd 	.word	0x080005dd
 8000454:	080006e1 	.word	0x080006e1
		case MODE_INIT:
			setTimer0(1000);
 8000458:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800045c:	f000 fda8 	bl	8000fb0 <setTimer0>
			mode_led1 = MODE_LED_INIT;
 8000460:	4b93      	ldr	r3, [pc, #588]	; (80006b0 <fsm_simple_buttons_run+0x280>)
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
			mode_led2 = MODE_LED_INIT;
 8000466:	4b93      	ldr	r3, [pc, #588]	; (80006b4 <fsm_simple_buttons_run+0x284>)
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
			mode = MODE_1;
 800046c:	4b8f      	ldr	r3, [pc, #572]	; (80006ac <fsm_simple_buttons_run+0x27c>)
 800046e:	2201      	movs	r2, #1
 8000470:	601a      	str	r2, [r3, #0]
		break;
 8000472:	e1a2      	b.n	80007ba <fsm_simple_buttons_run+0x38a>
		case MODE_1:
			fsm_led1_run();
 8000474:	f000 f9b2 	bl	80007dc <fsm_led1_run>
			fsm_led2_run();
 8000478:	f000 fa7c 	bl	8000974 <fsm_led2_run>
			if(timer0_flag == 1){
 800047c:	4b8e      	ldr	r3, [pc, #568]	; (80006b8 <fsm_simple_buttons_run+0x288>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d10f      	bne.n	80004a4 <fsm_simple_buttons_run+0x74>
				if(counter > 0){
 8000484:	4b8d      	ldr	r3, [pc, #564]	; (80006bc <fsm_simple_buttons_run+0x28c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	dd04      	ble.n	8000496 <fsm_simple_buttons_run+0x66>
					counter--;
 800048c:	4b8b      	ldr	r3, [pc, #556]	; (80006bc <fsm_simple_buttons_run+0x28c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	3b01      	subs	r3, #1
 8000492:	4a8a      	ldr	r2, [pc, #552]	; (80006bc <fsm_simple_buttons_run+0x28c>)
 8000494:	6013      	str	r3, [r2, #0]
				}
				//print time();
				time_flag = 1;
 8000496:	4b8a      	ldr	r3, [pc, #552]	; (80006c0 <fsm_simple_buttons_run+0x290>)
 8000498:	2201      	movs	r2, #1
 800049a:	601a      	str	r2, [r3, #0]
				setTimer0(1000);
 800049c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004a0:	f000 fd86 	bl	8000fb0 <setTimer0>
			}
			if(is_Button1_Pressed()){
 80004a4:	f7ff fe52 	bl	800014c <is_Button1_Pressed>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d010      	beq.n	80004d0 <fsm_simple_buttons_run+0xa0>
				walk_flag = 0;
 80004ae:	4b85      	ldr	r3, [pc, #532]	; (80006c4 <fsm_simple_buttons_run+0x294>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
				buzz_flag = 0;
 80004b4:	4b84      	ldr	r3, [pc, #528]	; (80006c8 <fsm_simple_buttons_run+0x298>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 80004ba:	f242 7010 	movw	r0, #10000	; 0x2710
 80004be:	f000 fd77 	bl	8000fb0 <setTimer0>
				setTimer3(1000);
 80004c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c6:	f000 fdc1 	bl	800104c <setTimer3>
				mode = 2;
 80004ca:	4b78      	ldr	r3, [pc, #480]	; (80006ac <fsm_simple_buttons_run+0x27c>)
 80004cc:	2202      	movs	r2, #2
 80004ce:	601a      	str	r2, [r3, #0]
//			}
//			if(is_Button3_Pressed()){
//				setTimer0(10000);
//				mode = 2;
//			}
			if(is_Button4_Pressed()){
 80004d0:	f7ff fe84 	bl	80001dc <is_Button4_Pressed>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d00d      	beq.n	80004f6 <fsm_simple_buttons_run+0xc6>
				//time for walking
				setTimer4(1000);
 80004da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004de:	f000 fdcf 	bl	8001080 <setTimer4>
				buzz_flag = 1;
 80004e2:	4b79      	ldr	r3, [pc, #484]	; (80006c8 <fsm_simple_buttons_run+0x298>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	601a      	str	r2, [r3, #0]
				setTimer3(10000);
 80004e8:	f242 7010 	movw	r0, #10000	; 0x2710
 80004ec:	f000 fdae 	bl	800104c <setTimer3>
				walk_flag = 1;
 80004f0:	4b74      	ldr	r3, [pc, #464]	; (80006c4 <fsm_simple_buttons_run+0x294>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	601a      	str	r2, [r3, #0]
			}
			if(timer3_flag == 1){
 80004f6:	4b75      	ldr	r3, [pc, #468]	; (80006cc <fsm_simple_buttons_run+0x29c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	f040 8156 	bne.w	80007ac <fsm_simple_buttons_run+0x37c>
				walk_flag = 0;
 8000500:	4b70      	ldr	r3, [pc, #448]	; (80006c4 <fsm_simple_buttons_run+0x294>)
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
				buzz_flag = 0;
 8000506:	4b70      	ldr	r3, [pc, #448]	; (80006c8 <fsm_simple_buttons_run+0x298>)
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
			}
		break;
 800050c:	e14e      	b.n	80007ac <fsm_simple_buttons_run+0x37c>
		case MODE_2:
			//setting led red time
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 800050e:	2201      	movs	r2, #1
 8000510:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000514:	486e      	ldr	r0, [pc, #440]	; (80006d0 <fsm_simple_buttons_run+0x2a0>)
 8000516:	f001 fb7e 	bl	8001c16 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	2108      	movs	r1, #8
 800051e:	486d      	ldr	r0, [pc, #436]	; (80006d4 <fsm_simple_buttons_run+0x2a4>)
 8000520:	f001 fb79 	bl	8001c16 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000524:	2201      	movs	r2, #1
 8000526:	2120      	movs	r1, #32
 8000528:	486a      	ldr	r0, [pc, #424]	; (80006d4 <fsm_simple_buttons_run+0x2a4>)
 800052a:	f001 fb74 	bl	8001c16 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	2110      	movs	r1, #16
 8000532:	4868      	ldr	r0, [pc, #416]	; (80006d4 <fsm_simple_buttons_run+0x2a4>)
 8000534:	f001 fb6f 	bl	8001c16 <HAL_GPIO_WritePin>
			//counter
			if(timer3_flag == 1){
 8000538:	4b64      	ldr	r3, [pc, #400]	; (80006cc <fsm_simple_buttons_run+0x29c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d106      	bne.n	800054e <fsm_simple_buttons_run+0x11e>
				time_flag = 1;
 8000540:	4b5f      	ldr	r3, [pc, #380]	; (80006c0 <fsm_simple_buttons_run+0x290>)
 8000542:	2201      	movs	r2, #1
 8000544:	601a      	str	r2, [r3, #0]
				setTimer3(1000);
 8000546:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800054a:	f000 fd7f 	bl	800104c <setTimer3>
			}

			if(is_Button1_Pressed()){
 800054e:	f7ff fdfd 	bl	800014c <is_Button1_Pressed>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d006      	beq.n	8000566 <fsm_simple_buttons_run+0x136>
//				counter = 0;
				mode = MODE_3;
 8000558:	4b54      	ldr	r3, [pc, #336]	; (80006ac <fsm_simple_buttons_run+0x27c>)
 800055a:	2203      	movs	r2, #3
 800055c:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 800055e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000562:	f000 fd25 	bl	8000fb0 <setTimer0>
			}

			if(is_Button1_Pressed_3s()){
 8000566:	f7ff fe03 	bl	8000170 <is_Button1_Pressed_3s>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d002      	beq.n	8000576 <fsm_simple_buttons_run+0x146>
			//	counter = 0;
				mode = MODE_INIT;
 8000570:	4b4e      	ldr	r3, [pc, #312]	; (80006ac <fsm_simple_buttons_run+0x27c>)
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
			}
			if(is_Button2_Pressed()){
 8000576:	f7ff fe0d 	bl	8000194 <is_Button2_Pressed>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d00f      	beq.n	80005a0 <fsm_simple_buttons_run+0x170>
				led_red++;
 8000580:	4b55      	ldr	r3, [pc, #340]	; (80006d8 <fsm_simple_buttons_run+0x2a8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	4a54      	ldr	r2, [pc, #336]	; (80006d8 <fsm_simple_buttons_run+0x2a8>)
 8000588:	6013      	str	r3, [r2, #0]
				if(led_red > 99) led_red = 0;
 800058a:	4b53      	ldr	r3, [pc, #332]	; (80006d8 <fsm_simple_buttons_run+0x2a8>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b63      	cmp	r3, #99	; 0x63
 8000590:	dd02      	ble.n	8000598 <fsm_simple_buttons_run+0x168>
 8000592:	4b51      	ldr	r3, [pc, #324]	; (80006d8 <fsm_simple_buttons_run+0x2a8>)
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 8000598:	f242 7010 	movw	r0, #10000	; 0x2710
 800059c:	f000 fd08 	bl	8000fb0 <setTimer0>
			}
			if(is_Button3_Pressed()){
 80005a0:	f7ff fe0a 	bl	80001b8 <is_Button3_Pressed>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d00f      	beq.n	80005ca <fsm_simple_buttons_run+0x19a>
				led_red--;
 80005aa:	4b4b      	ldr	r3, [pc, #300]	; (80006d8 <fsm_simple_buttons_run+0x2a8>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	3b01      	subs	r3, #1
 80005b0:	4a49      	ldr	r2, [pc, #292]	; (80006d8 <fsm_simple_buttons_run+0x2a8>)
 80005b2:	6013      	str	r3, [r2, #0]
				if(led_red < 0) led_red = 99;
 80005b4:	4b48      	ldr	r3, [pc, #288]	; (80006d8 <fsm_simple_buttons_run+0x2a8>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	da02      	bge.n	80005c2 <fsm_simple_buttons_run+0x192>
 80005bc:	4b46      	ldr	r3, [pc, #280]	; (80006d8 <fsm_simple_buttons_run+0x2a8>)
 80005be:	2263      	movs	r2, #99	; 0x63
 80005c0:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 80005c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80005c6:	f000 fcf3 	bl	8000fb0 <setTimer0>
			}
			if(timer0_flag == 1){
 80005ca:	4b3b      	ldr	r3, [pc, #236]	; (80006b8 <fsm_simple_buttons_run+0x288>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	f040 80ee 	bne.w	80007b0 <fsm_simple_buttons_run+0x380>
				mode = MODE_INIT;
 80005d4:	4b35      	ldr	r3, [pc, #212]	; (80006ac <fsm_simple_buttons_run+0x27c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
			}
		break;
 80005da:	e0e9      	b.n	80007b0 <fsm_simple_buttons_run+0x380>
		case MODE_3:
			//setting led green time
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e2:	483b      	ldr	r0, [pc, #236]	; (80006d0 <fsm_simple_buttons_run+0x2a0>)
 80005e4:	f001 fb17 	bl	8001c16 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2108      	movs	r1, #8
 80005ec:	4839      	ldr	r0, [pc, #228]	; (80006d4 <fsm_simple_buttons_run+0x2a4>)
 80005ee:	f001 fb12 	bl	8001c16 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2120      	movs	r1, #32
 80005f6:	4837      	ldr	r0, [pc, #220]	; (80006d4 <fsm_simple_buttons_run+0x2a4>)
 80005f8:	f001 fb0d 	bl	8001c16 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2110      	movs	r1, #16
 8000600:	4834      	ldr	r0, [pc, #208]	; (80006d4 <fsm_simple_buttons_run+0x2a4>)
 8000602:	f001 fb08 	bl	8001c16 <HAL_GPIO_WritePin>
			//counter
			if(timer3_flag == 1){
 8000606:	4b31      	ldr	r3, [pc, #196]	; (80006cc <fsm_simple_buttons_run+0x29c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d106      	bne.n	800061c <fsm_simple_buttons_run+0x1ec>
				time_flag = 1;
 800060e:	4b2c      	ldr	r3, [pc, #176]	; (80006c0 <fsm_simple_buttons_run+0x290>)
 8000610:	2201      	movs	r2, #1
 8000612:	601a      	str	r2, [r3, #0]
				setTimer3(1000);
 8000614:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000618:	f000 fd18 	bl	800104c <setTimer3>
			}
			if(is_Button1_Pressed()){
 800061c:	f7ff fd96 	bl	800014c <is_Button1_Pressed>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d006      	beq.n	8000634 <fsm_simple_buttons_run+0x204>
//				counter = 0;
				mode = MODE_4;
 8000626:	4b21      	ldr	r3, [pc, #132]	; (80006ac <fsm_simple_buttons_run+0x27c>)
 8000628:	2204      	movs	r2, #4
 800062a:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 800062c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000630:	f000 fcbe 	bl	8000fb0 <setTimer0>
			}

			if(is_Button1_Pressed_3s()){
 8000634:	f7ff fd9c 	bl	8000170 <is_Button1_Pressed_3s>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d002      	beq.n	8000644 <fsm_simple_buttons_run+0x214>
			//	counter = 0;
				mode = MODE_INIT;
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <fsm_simple_buttons_run+0x27c>)
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
			}
			if(is_Button2_Pressed()){
 8000644:	f7ff fda6 	bl	8000194 <is_Button2_Pressed>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d00f      	beq.n	800066e <fsm_simple_buttons_run+0x23e>
				led_green++;
 800064e:	4b23      	ldr	r3, [pc, #140]	; (80006dc <fsm_simple_buttons_run+0x2ac>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	3301      	adds	r3, #1
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <fsm_simple_buttons_run+0x2ac>)
 8000656:	6013      	str	r3, [r2, #0]
				if(led_green > 99) led_green = 0;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <fsm_simple_buttons_run+0x2ac>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b63      	cmp	r3, #99	; 0x63
 800065e:	dd02      	ble.n	8000666 <fsm_simple_buttons_run+0x236>
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <fsm_simple_buttons_run+0x2ac>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 8000666:	f242 7010 	movw	r0, #10000	; 0x2710
 800066a:	f000 fca1 	bl	8000fb0 <setTimer0>
			}
			if(is_Button3_Pressed()){
 800066e:	f7ff fda3 	bl	80001b8 <is_Button3_Pressed>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d00f      	beq.n	8000698 <fsm_simple_buttons_run+0x268>
				led_green--;
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <fsm_simple_buttons_run+0x2ac>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3b01      	subs	r3, #1
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <fsm_simple_buttons_run+0x2ac>)
 8000680:	6013      	str	r3, [r2, #0]
				if(led_green < 0) led_green = 99;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <fsm_simple_buttons_run+0x2ac>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	da02      	bge.n	8000690 <fsm_simple_buttons_run+0x260>
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <fsm_simple_buttons_run+0x2ac>)
 800068c:	2263      	movs	r2, #99	; 0x63
 800068e:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 8000690:	f242 7010 	movw	r0, #10000	; 0x2710
 8000694:	f000 fc8c 	bl	8000fb0 <setTimer0>
			}
			if(timer0_flag == 1){
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <fsm_simple_buttons_run+0x288>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	f040 8089 	bne.w	80007b4 <fsm_simple_buttons_run+0x384>
				mode = MODE_INIT;
 80006a2:	4b02      	ldr	r3, [pc, #8]	; (80006ac <fsm_simple_buttons_run+0x27c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
			}
		break;
 80006a8:	e084      	b.n	80007b4 <fsm_simple_buttons_run+0x384>
 80006aa:	bf00      	nop
 80006ac:	200000f0 	.word	0x200000f0
 80006b0:	200000f4 	.word	0x200000f4
 80006b4:	200000f8 	.word	0x200000f8
 80006b8:	20000114 	.word	0x20000114
 80006bc:	200000ec 	.word	0x200000ec
 80006c0:	20000108 	.word	0x20000108
 80006c4:	20000110 	.word	0x20000110
 80006c8:	2000010c 	.word	0x2000010c
 80006cc:	2000012c 	.word	0x2000012c
 80006d0:	40010800 	.word	0x40010800
 80006d4:	40010c00 	.word	0x40010c00
 80006d8:	20000040 	.word	0x20000040
 80006dc:	20000044 	.word	0x20000044
		case MODE_4:
			//setting led yellow time
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e6:	4836      	ldr	r0, [pc, #216]	; (80007c0 <fsm_simple_buttons_run+0x390>)
 80006e8:	f001 fa95 	bl	8001c16 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2108      	movs	r1, #8
 80006f0:	4834      	ldr	r0, [pc, #208]	; (80007c4 <fsm_simple_buttons_run+0x394>)
 80006f2:	f001 fa90 	bl	8001c16 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	2120      	movs	r1, #32
 80006fa:	4832      	ldr	r0, [pc, #200]	; (80007c4 <fsm_simple_buttons_run+0x394>)
 80006fc:	f001 fa8b 	bl	8001c16 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000700:	2201      	movs	r2, #1
 8000702:	2110      	movs	r1, #16
 8000704:	482f      	ldr	r0, [pc, #188]	; (80007c4 <fsm_simple_buttons_run+0x394>)
 8000706:	f001 fa86 	bl	8001c16 <HAL_GPIO_WritePin>
			//counter
			if(timer3_flag == 1){
 800070a:	4b2f      	ldr	r3, [pc, #188]	; (80007c8 <fsm_simple_buttons_run+0x398>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d106      	bne.n	8000720 <fsm_simple_buttons_run+0x2f0>
				time_flag = 1;
 8000712:	4b2e      	ldr	r3, [pc, #184]	; (80007cc <fsm_simple_buttons_run+0x39c>)
 8000714:	2201      	movs	r2, #1
 8000716:	601a      	str	r2, [r3, #0]
				setTimer3(1000);
 8000718:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800071c:	f000 fc96 	bl	800104c <setTimer3>
			}
			if(is_Button1_Pressed()){
 8000720:	f7ff fd14 	bl	800014c <is_Button1_Pressed>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d006      	beq.n	8000738 <fsm_simple_buttons_run+0x308>
//				counter = 0;
				mode = MODE_INIT;
 800072a:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <fsm_simple_buttons_run+0x3a0>)
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 8000730:	f242 7010 	movw	r0, #10000	; 0x2710
 8000734:	f000 fc3c 	bl	8000fb0 <setTimer0>
			}
			if(is_Button1_Pressed_3s()){
 8000738:	f7ff fd1a 	bl	8000170 <is_Button1_Pressed_3s>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d002      	beq.n	8000748 <fsm_simple_buttons_run+0x318>
				//	counter = 0;
				mode = MODE_INIT;
 8000742:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <fsm_simple_buttons_run+0x3a0>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
			}
			if(is_Button2_Pressed()){
 8000748:	f7ff fd24 	bl	8000194 <is_Button2_Pressed>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d00f      	beq.n	8000772 <fsm_simple_buttons_run+0x342>
				led_yellow++;
 8000752:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <fsm_simple_buttons_run+0x3a4>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	4a1e      	ldr	r2, [pc, #120]	; (80007d4 <fsm_simple_buttons_run+0x3a4>)
 800075a:	6013      	str	r3, [r2, #0]
				if(led_yellow > 99) led_yellow = 0;
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <fsm_simple_buttons_run+0x3a4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b63      	cmp	r3, #99	; 0x63
 8000762:	dd02      	ble.n	800076a <fsm_simple_buttons_run+0x33a>
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <fsm_simple_buttons_run+0x3a4>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 800076a:	f242 7010 	movw	r0, #10000	; 0x2710
 800076e:	f000 fc1f 	bl	8000fb0 <setTimer0>
			}
			if(is_Button3_Pressed()){
 8000772:	f7ff fd21 	bl	80001b8 <is_Button3_Pressed>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d00f      	beq.n	800079c <fsm_simple_buttons_run+0x36c>
				led_yellow--;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <fsm_simple_buttons_run+0x3a4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3b01      	subs	r3, #1
 8000782:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <fsm_simple_buttons_run+0x3a4>)
 8000784:	6013      	str	r3, [r2, #0]
				if(led_yellow < 0) led_yellow = 99;
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <fsm_simple_buttons_run+0x3a4>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da02      	bge.n	8000794 <fsm_simple_buttons_run+0x364>
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <fsm_simple_buttons_run+0x3a4>)
 8000790:	2263      	movs	r2, #99	; 0x63
 8000792:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 8000794:	f242 7010 	movw	r0, #10000	; 0x2710
 8000798:	f000 fc0a 	bl	8000fb0 <setTimer0>
			}
			if(timer0_flag == 1){
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <fsm_simple_buttons_run+0x3a8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d109      	bne.n	80007b8 <fsm_simple_buttons_run+0x388>
				mode = MODE_INIT;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <fsm_simple_buttons_run+0x3a0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
			}
			break;
 80007aa:	e005      	b.n	80007b8 <fsm_simple_buttons_run+0x388>
		break;
 80007ac:	bf00      	nop
 80007ae:	e004      	b.n	80007ba <fsm_simple_buttons_run+0x38a>
		break;
 80007b0:	bf00      	nop
 80007b2:	e002      	b.n	80007ba <fsm_simple_buttons_run+0x38a>
		break;
 80007b4:	bf00      	nop
 80007b6:	e000      	b.n	80007ba <fsm_simple_buttons_run+0x38a>
			break;
 80007b8:	bf00      	nop
	}
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40010800 	.word	0x40010800
 80007c4:	40010c00 	.word	0x40010c00
 80007c8:	2000012c 	.word	0x2000012c
 80007cc:	20000108 	.word	0x20000108
 80007d0:	200000f0 	.word	0x200000f0
 80007d4:	20000048 	.word	0x20000048
 80007d8:	20000114 	.word	0x20000114

080007dc <fsm_led1_run>:
void fsm_led1_run(){
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	switch(mode_led1){
 80007e0:	4b5b      	ldr	r3, [pc, #364]	; (8000950 <fsm_led1_run+0x174>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b03      	cmp	r3, #3
 80007e6:	f200 80b1 	bhi.w	800094c <fsm_led1_run+0x170>
 80007ea:	a201      	add	r2, pc, #4	; (adr r2, 80007f0 <fsm_led1_run+0x14>)
 80007ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f0:	08000801 	.word	0x08000801
 80007f4:	08000823 	.word	0x08000823
 80007f8:	08000883 	.word	0x08000883
 80007fc:	080008e3 	.word	0x080008e3
		case MODE_LED_INIT:
			setTimer1(led_red*1000);
 8000800:	4b54      	ldr	r3, [pc, #336]	; (8000954 <fsm_led1_run+0x178>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000808:	fb02 f303 	mul.w	r3, r2, r3
 800080c:	4618      	mov	r0, r3
 800080e:	f000 fbe9 	bl	8000fe4 <setTimer1>
			counter = led_red;
 8000812:	4b50      	ldr	r3, [pc, #320]	; (8000954 <fsm_led1_run+0x178>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a50      	ldr	r2, [pc, #320]	; (8000958 <fsm_led1_run+0x17c>)
 8000818:	6013      	str	r3, [r2, #0]
			mode_led1 = MODE_LED_1;
 800081a:	4b4d      	ldr	r3, [pc, #308]	; (8000950 <fsm_led1_run+0x174>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
		break;
 8000820:	e094      	b.n	800094c <fsm_led1_run+0x170>
		case MODE_LED_1://red
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000828:	484c      	ldr	r0, [pc, #304]	; (800095c <fsm_led1_run+0x180>)
 800082a:	f001 f9f4 	bl	8001c16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2108      	movs	r1, #8
 8000832:	484b      	ldr	r0, [pc, #300]	; (8000960 <fsm_led1_run+0x184>)
 8000834:	f001 f9ef 	bl	8001c16 <HAL_GPIO_WritePin>
		if (walk_flag == 1){
 8000838:	4b4a      	ldr	r3, [pc, #296]	; (8000964 <fsm_led1_run+0x188>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d10b      	bne.n	8000858 <fsm_led1_run+0x7c>
			//green
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000846:	4846      	ldr	r0, [pc, #280]	; (8000960 <fsm_led1_run+0x184>)
 8000848:	f001 f9e5 	bl	8001c16 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000852:	4842      	ldr	r0, [pc, #264]	; (800095c <fsm_led1_run+0x180>)
 8000854:	f001 f9df 	bl	8001c16 <HAL_GPIO_WritePin>
		}
		if(timer1_flag == 1){
 8000858:	4b43      	ldr	r3, [pc, #268]	; (8000968 <fsm_led1_run+0x18c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d170      	bne.n	8000942 <fsm_led1_run+0x166>
			mode_led1 = MODE_LED_2;
 8000860:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <fsm_led1_run+0x174>)
 8000862:	2202      	movs	r2, #2
 8000864:	601a      	str	r2, [r3, #0]
			counter = led_green;
 8000866:	4b41      	ldr	r3, [pc, #260]	; (800096c <fsm_led1_run+0x190>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a3b      	ldr	r2, [pc, #236]	; (8000958 <fsm_led1_run+0x17c>)
 800086c:	6013      	str	r3, [r2, #0]
			setTimer1(led_green*1000);
 800086e:	4b3f      	ldr	r3, [pc, #252]	; (800096c <fsm_led1_run+0x190>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000876:	fb02 f303 	mul.w	r3, r2, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f000 fbb2 	bl	8000fe4 <setTimer1>
		}
		break;
 8000880:	e05f      	b.n	8000942 <fsm_led1_run+0x166>
		case MODE_LED_2://green
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000888:	4834      	ldr	r0, [pc, #208]	; (800095c <fsm_led1_run+0x180>)
 800088a:	f001 f9c4 	bl	8001c16 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 800088e:	2201      	movs	r2, #1
 8000890:	2108      	movs	r1, #8
 8000892:	4833      	ldr	r0, [pc, #204]	; (8000960 <fsm_led1_run+0x184>)
 8000894:	f001 f9bf 	bl	8001c16 <HAL_GPIO_WritePin>
			if (walk_flag == 1){
 8000898:	4b32      	ldr	r3, [pc, #200]	; (8000964 <fsm_led1_run+0x188>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d10b      	bne.n	80008b8 <fsm_led1_run+0xdc>
				//red
				HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a6:	482e      	ldr	r0, [pc, #184]	; (8000960 <fsm_led1_run+0x184>)
 80008a8:	f001 f9b5 	bl	8001c16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b2:	482a      	ldr	r0, [pc, #168]	; (800095c <fsm_led1_run+0x180>)
 80008b4:	f001 f9af 	bl	8001c16 <HAL_GPIO_WritePin>
			}
			if(timer1_flag == 1){
 80008b8:	4b2b      	ldr	r3, [pc, #172]	; (8000968 <fsm_led1_run+0x18c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d142      	bne.n	8000946 <fsm_led1_run+0x16a>
				mode_led1 = MODE_LED_3;
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <fsm_led1_run+0x174>)
 80008c2:	2203      	movs	r2, #3
 80008c4:	601a      	str	r2, [r3, #0]
				counter = led_yellow;
 80008c6:	4b2a      	ldr	r3, [pc, #168]	; (8000970 <fsm_led1_run+0x194>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a23      	ldr	r2, [pc, #140]	; (8000958 <fsm_led1_run+0x17c>)
 80008cc:	6013      	str	r3, [r2, #0]
				setTimer1(led_yellow*1000);
 80008ce:	4b28      	ldr	r3, [pc, #160]	; (8000970 <fsm_led1_run+0x194>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008d6:	fb02 f303 	mul.w	r3, r2, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 fb82 	bl	8000fe4 <setTimer1>
			}
		break;
 80008e0:	e031      	b.n	8000946 <fsm_led1_run+0x16a>
		case MODE_LED_3://yellow
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e8:	481c      	ldr	r0, [pc, #112]	; (800095c <fsm_led1_run+0x180>)
 80008ea:	f001 f994 	bl	8001c16 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	2108      	movs	r1, #8
 80008f2:	481b      	ldr	r0, [pc, #108]	; (8000960 <fsm_led1_run+0x184>)
 80008f4:	f001 f98f 	bl	8001c16 <HAL_GPIO_WritePin>
			if (walk_flag == 1){
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <fsm_led1_run+0x188>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d10b      	bne.n	8000918 <fsm_led1_run+0x13c>
				//green
				HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000906:	4816      	ldr	r0, [pc, #88]	; (8000960 <fsm_led1_run+0x184>)
 8000908:	f001 f985 	bl	8001c16 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 800090c:	2201      	movs	r2, #1
 800090e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000912:	4812      	ldr	r0, [pc, #72]	; (800095c <fsm_led1_run+0x180>)
 8000914:	f001 f97f 	bl	8001c16 <HAL_GPIO_WritePin>
			}
			if(timer1_flag == 1){
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <fsm_led1_run+0x18c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d114      	bne.n	800094a <fsm_led1_run+0x16e>
				mode_led1 = MODE_LED_1;
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <fsm_led1_run+0x174>)
 8000922:	2201      	movs	r2, #1
 8000924:	601a      	str	r2, [r3, #0]
				counter = led_red;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <fsm_led1_run+0x178>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <fsm_led1_run+0x17c>)
 800092c:	6013      	str	r3, [r2, #0]
				setTimer1(led_red*1000);
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <fsm_led1_run+0x178>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000936:	fb02 f303 	mul.w	r3, r2, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f000 fb52 	bl	8000fe4 <setTimer1>
			}
		break;
 8000940:	e003      	b.n	800094a <fsm_led1_run+0x16e>
		break;
 8000942:	bf00      	nop
 8000944:	e002      	b.n	800094c <fsm_led1_run+0x170>
		break;
 8000946:	bf00      	nop
 8000948:	e000      	b.n	800094c <fsm_led1_run+0x170>
		break;
 800094a:	bf00      	nop
	}
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200000f4 	.word	0x200000f4
 8000954:	20000040 	.word	0x20000040
 8000958:	200000ec 	.word	0x200000ec
 800095c:	40010800 	.word	0x40010800
 8000960:	40010c00 	.word	0x40010c00
 8000964:	20000110 	.word	0x20000110
 8000968:	2000011c 	.word	0x2000011c
 800096c:	20000044 	.word	0x20000044
 8000970:	20000048 	.word	0x20000048

08000974 <fsm_led2_run>:

void fsm_led2_run(){
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	switch(mode_led2){
 8000978:	4b3a      	ldr	r3, [pc, #232]	; (8000a64 <fsm_led2_run+0xf0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b03      	cmp	r3, #3
 800097e:	d86e      	bhi.n	8000a5e <fsm_led2_run+0xea>
 8000980:	a201      	add	r2, pc, #4	; (adr r2, 8000988 <fsm_led2_run+0x14>)
 8000982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000986:	bf00      	nop
 8000988:	08000999 	.word	0x08000999
 800098c:	080009b3 	.word	0x080009b3
 8000990:	080009e9 	.word	0x080009e9
 8000994:	08000a1f 	.word	0x08000a1f
		case MODE_LED_INIT:
			setTimer2(led_green*1000);
 8000998:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <fsm_led2_run+0xf4>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009a0:	fb02 f303 	mul.w	r3, r2, r3
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fb37 	bl	8001018 <setTimer2>
			mode_led2 = MODE_LED_2;
 80009aa:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <fsm_led2_run+0xf0>)
 80009ac:	2202      	movs	r2, #2
 80009ae:	601a      	str	r2, [r3, #0]
		break;
 80009b0:	e055      	b.n	8000a5e <fsm_led2_run+0xea>
		case MODE_LED_1:
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2120      	movs	r1, #32
 80009b6:	482d      	ldr	r0, [pc, #180]	; (8000a6c <fsm_led2_run+0xf8>)
 80009b8:	f001 f92d 	bl	8001c16 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2110      	movs	r1, #16
 80009c0:	482a      	ldr	r0, [pc, #168]	; (8000a6c <fsm_led2_run+0xf8>)
 80009c2:	f001 f928 	bl	8001c16 <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 80009c6:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <fsm_led2_run+0xfc>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d142      	bne.n	8000a54 <fsm_led2_run+0xe0>
				mode_led2 = MODE_LED_2;
 80009ce:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <fsm_led2_run+0xf0>)
 80009d0:	2202      	movs	r2, #2
 80009d2:	601a      	str	r2, [r3, #0]
				setTimer2(led_green*1000);
 80009d4:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <fsm_led2_run+0xf4>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009dc:	fb02 f303 	mul.w	r3, r2, r3
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 fb19 	bl	8001018 <setTimer2>
			}
		break;
 80009e6:	e035      	b.n	8000a54 <fsm_led2_run+0xe0>
		case MODE_LED_2:
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2120      	movs	r1, #32
 80009ec:	481f      	ldr	r0, [pc, #124]	; (8000a6c <fsm_led2_run+0xf8>)
 80009ee:	f001 f912 	bl	8001c16 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	2110      	movs	r1, #16
 80009f6:	481d      	ldr	r0, [pc, #116]	; (8000a6c <fsm_led2_run+0xf8>)
 80009f8:	f001 f90d 	bl	8001c16 <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <fsm_led2_run+0xfc>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d129      	bne.n	8000a58 <fsm_led2_run+0xe4>
				mode_led2 = MODE_LED_3;
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <fsm_led2_run+0xf0>)
 8000a06:	2203      	movs	r2, #3
 8000a08:	601a      	str	r2, [r3, #0]
				setTimer2(led_yellow*1000);
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <fsm_led2_run+0x100>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a12:	fb02 f303 	mul.w	r3, r2, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 fafe 	bl	8001018 <setTimer2>
			}
		break;
 8000a1c:	e01c      	b.n	8000a58 <fsm_led2_run+0xe4>
		case MODE_LED_3:
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2120      	movs	r1, #32
 8000a22:	4812      	ldr	r0, [pc, #72]	; (8000a6c <fsm_led2_run+0xf8>)
 8000a24:	f001 f8f7 	bl	8001c16 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	480f      	ldr	r0, [pc, #60]	; (8000a6c <fsm_led2_run+0xf8>)
 8000a2e:	f001 f8f2 	bl	8001c16 <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <fsm_led2_run+0xfc>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d110      	bne.n	8000a5c <fsm_led2_run+0xe8>
				mode_led2 = MODE_LED_1;
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <fsm_led2_run+0xf0>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	601a      	str	r2, [r3, #0]
				setTimer2(led_red*1000);
 8000a40:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <fsm_led2_run+0x104>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a48:	fb02 f303 	mul.w	r3, r2, r3
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 fae3 	bl	8001018 <setTimer2>
			}
		break;
 8000a52:	e003      	b.n	8000a5c <fsm_led2_run+0xe8>
		break;
 8000a54:	bf00      	nop
 8000a56:	e002      	b.n	8000a5e <fsm_led2_run+0xea>
		break;
 8000a58:	bf00      	nop
 8000a5a:	e000      	b.n	8000a5e <fsm_led2_run+0xea>
		break;
 8000a5c:	bf00      	nop
	}
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000f8 	.word	0x200000f8
 8000a68:	20000044 	.word	0x20000044
 8000a6c:	40010c00 	.word	0x40010c00
 8000a70:	20000124 	.word	0x20000124
 8000a74:	20000048 	.word	0x20000048
 8000a78:	20000040 	.word	0x20000040

08000a7c <print_time>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print_time(){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	if(time_flag == 1){
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <print_time+0x34>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d110      	bne.n	8000aaa <print_time+0x2e>
		HAL_UART_Transmit(&huart2, (void *)buffer, sprintf(buffer, "!7SEG:%d\r\n", counter), 50);
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <print_time+0x38>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	490a      	ldr	r1, [pc, #40]	; (8000ab8 <print_time+0x3c>)
 8000a90:	480a      	ldr	r0, [pc, #40]	; (8000abc <print_time+0x40>)
 8000a92:	f003 f957 	bl	8003d44 <siprintf>
 8000a96:	4603      	mov	r3, r0
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	2332      	movs	r3, #50	; 0x32
 8000a9c:	4907      	ldr	r1, [pc, #28]	; (8000abc <print_time+0x40>)
 8000a9e:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <print_time+0x44>)
 8000aa0:	f002 fc93 	bl	80033ca <HAL_UART_Transmit>
		time_flag = 0;
 8000aa4:	4b02      	ldr	r3, [pc, #8]	; (8000ab0 <print_time+0x34>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
	}
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000108 	.word	0x20000108
 8000ab4:	200000ec 	.word	0x200000ec
 8000ab8:	080045d0 	.word	0x080045d0
 8000abc:	200000fc 	.word	0x200000fc
 8000ac0:	200001d8 	.word	0x200001d8

08000ac4 <buzzer>:
void buzzer(){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	if(buzz_flag == 1){
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <buzzer+0x50>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d11f      	bne.n	8000b10 <buzzer+0x4c>
		if(timer3_flag == 0){
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <buzzer+0x54>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d11b      	bne.n	8000b10 <buzzer+0x4c>
			if(timer4_flag == 1){
 8000ad8:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <buzzer+0x58>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d117      	bne.n	8000b10 <buzzer+0x4c>
				if(counter < 10){
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <buzzer+0x5c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b09      	cmp	r3, #9
 8000ae6:	dc13      	bgt.n	8000b10 <buzzer+0x4c>
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 100 - counter*10);
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <buzzer+0x5c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f06f 0209 	mvn.w	r2, #9
 8000af0:	fb02 f303 	mul.w	r3, r2, r3
 8000af4:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <buzzer+0x60>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	635a      	str	r2, [r3, #52]	; 0x34
				setTimer4(counter*100 + 100);
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <buzzer+0x5c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	2264      	movs	r2, #100	; 0x64
 8000b06:	fb02 f303 	mul.w	r3, r2, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 fab8 	bl	8001080 <setTimer4>
				}
			}
		}
	}
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000010c 	.word	0x2000010c
 8000b18:	2000012c 	.word	0x2000012c
 8000b1c:	20000134 	.word	0x20000134
 8000b20:	200000ec 	.word	0x200000ec
 8000b24:	20000148 	.word	0x20000148

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f000 fcb8 	bl	80014a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f81a 	bl	8000b68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b34:	f000 f946 	bl	8000dc4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000b38:	f000 f8a4 	bl	8000c84 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000b3c:	f000 f856 	bl	8000bec <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000b40:	f000 f916 	bl	8000d70 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b44:	4806      	ldr	r0, [pc, #24]	; (8000b60 <main+0x38>)
 8000b46:	f001 fce9 	bl	800251c <HAL_TIM_Base_Start_IT>
  HAL_TIMEx_PWMN_Start(&htim3, TIM_CHANNEL_1);
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4805      	ldr	r0, [pc, #20]	; (8000b64 <main+0x3c>)
 8000b4e:	f002 fabd 	bl	80030cc <HAL_TIMEx_PWMN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 fsm_simple_buttons_run();
 8000b52:	f7ff fc6d 	bl	8000430 <fsm_simple_buttons_run>
	 print_time();
 8000b56:	f7ff ff91 	bl	8000a7c <print_time>
	 buzzer();
 8000b5a:	f7ff ffb3 	bl	8000ac4 <buzzer>
	 fsm_simple_buttons_run();
 8000b5e:	e7f8      	b.n	8000b52 <main+0x2a>
 8000b60:	20000190 	.word	0x20000190
 8000b64:	20000148 	.word	0x20000148

08000b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b090      	sub	sp, #64	; 0x40
 8000b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6e:	f107 0318 	add.w	r3, r7, #24
 8000b72:	2228      	movs	r2, #40	; 0x28
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f003 f8dc 	bl	8003d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b92:	2310      	movs	r3, #16
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b96:	2302      	movs	r3, #2
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b9e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba4:	f107 0318 	add.w	r3, r7, #24
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f001 f84d 	bl	8001c48 <HAL_RCC_OscConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000bb4:	f000 f986 	bl	8000ec4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb8:	230f      	movs	r3, #15
 8000bba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 fab8 	bl	8002148 <HAL_RCC_ClockConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000bde:	f000 f971 	bl	8000ec4 <Error_Handler>
  }
}
 8000be2:	bf00      	nop
 8000be4:	3740      	adds	r7, #64	; 0x40
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf2:	f107 0308 	add.w	r3, r7, #8
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c00:	463b      	mov	r3, r7
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c08:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c10:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c12:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c18:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c20:	224f      	movs	r2, #79	; 0x4f
 8000c22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c30:	4813      	ldr	r0, [pc, #76]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c32:	f001 fc23 	bl	800247c <HAL_TIM_Base_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c3c:	f000 f942 	bl	8000ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480c      	ldr	r0, [pc, #48]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c4e:	f001 fed5 	bl	80029fc <HAL_TIM_ConfigClockSource>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c58:	f000 f934 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c64:	463b      	mov	r3, r7
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c6a:	f002 facd 	bl	8003208 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c74:	f000 f926 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000190 	.word	0x20000190

08000c84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08e      	sub	sp, #56	; 0x38
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c98:	f107 0320 	add.w	r3, r7, #32
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
 8000cb0:	615a      	str	r2, [r3, #20]
 8000cb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cb4:	4b2c      	ldr	r3, [pc, #176]	; (8000d68 <MX_TIM3_Init+0xe4>)
 8000cb6:	4a2d      	ldr	r2, [pc, #180]	; (8000d6c <MX_TIM3_Init+0xe8>)
 8000cb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000cba:	4b2b      	ldr	r3, [pc, #172]	; (8000d68 <MX_TIM3_Init+0xe4>)
 8000cbc:	223f      	movs	r2, #63	; 0x3f
 8000cbe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc0:	4b29      	ldr	r3, [pc, #164]	; (8000d68 <MX_TIM3_Init+0xe4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000cc6:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <MX_TIM3_Init+0xe4>)
 8000cc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ccc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cce:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <MX_TIM3_Init+0xe4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd4:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <MX_TIM3_Init+0xe4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cda:	4823      	ldr	r0, [pc, #140]	; (8000d68 <MX_TIM3_Init+0xe4>)
 8000cdc:	f001 fbce 	bl	800247c <HAL_TIM_Base_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000ce6:	f000 f8ed 	bl	8000ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	481c      	ldr	r0, [pc, #112]	; (8000d68 <MX_TIM3_Init+0xe4>)
 8000cf8:	f001 fe80 	bl	80029fc <HAL_TIM_ConfigClockSource>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d02:	f000 f8df 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d06:	4818      	ldr	r0, [pc, #96]	; (8000d68 <MX_TIM3_Init+0xe4>)
 8000d08:	f001 fc5a 	bl	80025c0 <HAL_TIM_PWM_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d12:	f000 f8d7 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d16:	2300      	movs	r3, #0
 8000d18:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d1e:	f107 0320 	add.w	r3, r7, #32
 8000d22:	4619      	mov	r1, r3
 8000d24:	4810      	ldr	r0, [pc, #64]	; (8000d68 <MX_TIM3_Init+0xe4>)
 8000d26:	f002 fa6f 	bl	8003208 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d30:	f000 f8c8 	bl	8000ec4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d34:	2360      	movs	r3, #96	; 0x60
 8000d36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2200      	movs	r2, #0
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4807      	ldr	r0, [pc, #28]	; (8000d68 <MX_TIM3_Init+0xe4>)
 8000d4c:	f001 fd98 	bl	8002880 <HAL_TIM_PWM_ConfigChannel>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d56:	f000 f8b5 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d5a:	4803      	ldr	r0, [pc, #12]	; (8000d68 <MX_TIM3_Init+0xe4>)
 8000d5c:	f000 fa7e 	bl	800125c <HAL_TIM_MspPostInit>

}
 8000d60:	bf00      	nop
 8000d62:	3738      	adds	r7, #56	; 0x38
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000148 	.word	0x20000148
 8000d6c:	40000400 	.word	0x40000400

08000d70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <MX_USART2_UART_Init+0x50>)
 8000d78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000d7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000d96:	220c      	movs	r2, #12
 8000d98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000da8:	f002 fac2 	bl	8003330 <HAL_UART_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000db2:	f000 f887 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200001d8 	.word	0x200001d8
 8000dc0:	40004400 	.word	0x40004400

08000dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 0308 	add.w	r3, r7, #8
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <MX_GPIO_Init+0xd0>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a2d      	ldr	r2, [pc, #180]	; (8000e94 <MX_GPIO_Init+0xd0>)
 8000dde:	f043 0304 	orr.w	r3, r3, #4
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <MX_GPIO_Init+0xd0>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df0:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <MX_GPIO_Init+0xd0>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a27      	ldr	r2, [pc, #156]	; (8000e94 <MX_GPIO_Init+0xd0>)
 8000df6:	f043 0308 	orr.w	r3, r3, #8
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <MX_GPIO_Init+0xd0>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0308 	and.w	r3, r3, #8
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000e0e:	4822      	ldr	r0, [pc, #136]	; (8000e98 <MX_GPIO_Init+0xd4>)
 8000e10:	f000 ff01 	bl	8001c16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000e1a:	4820      	ldr	r0, [pc, #128]	; (8000e9c <MX_GPIO_Init+0xd8>)
 8000e1c:	f000 fefb 	bl	8001c16 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8000e20:	2313      	movs	r3, #19
 8000e22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	4619      	mov	r1, r3
 8000e32:	481a      	ldr	r0, [pc, #104]	; (8000e9c <MX_GPIO_Init+0xd8>)
 8000e34:	f000 fd54 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4813      	ldr	r0, [pc, #76]	; (8000e98 <MX_GPIO_Init+0xd4>)
 8000e4c:	f000 fd48 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000e50:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000e54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e56:	2301      	movs	r3, #1
 8000e58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	4619      	mov	r1, r3
 8000e68:	480b      	ldr	r0, [pc, #44]	; (8000e98 <MX_GPIO_Init+0xd4>)
 8000e6a:	f000 fd39 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8000e6e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000e72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	4619      	mov	r1, r3
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_GPIO_Init+0xd8>)
 8000e88:	f000 fd2a 	bl	80018e0 <HAL_GPIO_Init>

}
 8000e8c:	bf00      	nop
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010c00 	.word	0x40010c00
 8000e9c:	40010800 	.word	0x40010800

08000ea0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000ea8:	f000 f812 	bl	8000ed0 <SCH_Update>
	timerRun();
 8000eac:	f000 f902 	bl	80010b4 <timerRun>
	getKeyInput_1();
 8000eb0:	f7ff f9be 	bl	8000230 <getKeyInput_1>
	getKeyInput_2();
 8000eb4:	f7ff fa0c 	bl	80002d0 <getKeyInput_2>
	getKeyInput_3();
 8000eb8:	f7ff fa62 	bl	8000380 <getKeyInput_3>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
}
 8000eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <Error_Handler+0x8>
	...

08000ed0 <SCH_Update>:
	SCH_tasks_G[Index].TaskID = Index;

	return Index;
}

void SCH_Update(void){
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
	unsigned char Index ;
	// NOTE: calculations are in *TICKS* (not milliseconds)
	for( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	71fb      	strb	r3, [r7, #7]
 8000eda:	e05d      	b.n	8000f98 <SCH_Update+0xc8>
		// Check i f there is a task at this location
		if(SCH_tasks_G[Index].pTask ) {
 8000edc:	79fa      	ldrb	r2, [r7, #7]
 8000ede:	4933      	ldr	r1, [pc, #204]	; (8000fac <SCH_Update+0xdc>)
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	440b      	add	r3, r1
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d050      	beq.n	8000f92 <SCH_Update+0xc2>
			if(SCH_tasks_G[Index].Delay == 0 ) {
 8000ef0:	79fa      	ldrb	r2, [r7, #7]
 8000ef2:	492e      	ldr	r1, [pc, #184]	; (8000fac <SCH_Update+0xdc>)
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	440b      	add	r3, r1
 8000efe:	3304      	adds	r3, #4
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d132      	bne.n	8000f6c <SCH_Update+0x9c>
				// The task i s due to run
				// Inc . the ’RunMe’ flag
				SCH_tasks_G[Index].RunMe += 1;
 8000f06:	79fa      	ldrb	r2, [r7, #7]
 8000f08:	4928      	ldr	r1, [pc, #160]	; (8000fac <SCH_Update+0xdc>)
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	440b      	add	r3, r1
 8000f14:	330c      	adds	r3, #12
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	79fa      	ldrb	r2, [r7, #7]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	b2d8      	uxtb	r0, r3
 8000f1e:	4923      	ldr	r1, [pc, #140]	; (8000fac <SCH_Update+0xdc>)
 8000f20:	4613      	mov	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4413      	add	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	440b      	add	r3, r1
 8000f2a:	330c      	adds	r3, #12
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	701a      	strb	r2, [r3, #0]
				if(SCH_tasks_G [Index].Period ) {
 8000f30:	79fa      	ldrb	r2, [r7, #7]
 8000f32:	491e      	ldr	r1, [pc, #120]	; (8000fac <SCH_Update+0xdc>)
 8000f34:	4613      	mov	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	3308      	adds	r3, #8
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d025      	beq.n	8000f92 <SCH_Update+0xc2>
					// Schedule periodic tasks to run again
					SCH_tasks_G [Index].Delay = SCH_tasks_G[Index].Period ;
 8000f46:	79f9      	ldrb	r1, [r7, #7]
 8000f48:	79fa      	ldrb	r2, [r7, #7]
 8000f4a:	4818      	ldr	r0, [pc, #96]	; (8000fac <SCH_Update+0xdc>)
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	440b      	add	r3, r1
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4403      	add	r3, r0
 8000f56:	3308      	adds	r3, #8
 8000f58:	6819      	ldr	r1, [r3, #0]
 8000f5a:	4814      	ldr	r0, [pc, #80]	; (8000fac <SCH_Update+0xdc>)
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4403      	add	r3, r0
 8000f66:	3304      	adds	r3, #4
 8000f68:	6019      	str	r1, [r3, #0]
 8000f6a:	e012      	b.n	8000f92 <SCH_Update+0xc2>
				}
			}else{
				// Not yet ready to run : just decrement the delay
				SCH_tasks_G [Index].Delay -= 1;
 8000f6c:	79fa      	ldrb	r2, [r7, #7]
 8000f6e:	490f      	ldr	r1, [pc, #60]	; (8000fac <SCH_Update+0xdc>)
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	440b      	add	r3, r1
 8000f7a:	3304      	adds	r3, #4
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	79fa      	ldrb	r2, [r7, #7]
 8000f80:	1e59      	subs	r1, r3, #1
 8000f82:	480a      	ldr	r0, [pc, #40]	; (8000fac <SCH_Update+0xdc>)
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4403      	add	r3, r0
 8000f8e:	3304      	adds	r3, #4
 8000f90:	6019      	str	r1, [r3, #0]
	for( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	3301      	adds	r3, #1
 8000f96:	71fb      	strb	r3, [r7, #7]
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	2b27      	cmp	r3, #39	; 0x27
 8000f9c:	d99e      	bls.n	8000edc <SCH_Update+0xc>
//		}else{
//			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
//			SCH_tasks_G[i].RunMe+=1;
//		}
//	}
}
 8000f9e:	bf00      	nop
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	2000021c 	.word	0x2000021c

08000fb0 <setTimer0>:
int timer3_flag = 0;
int timer3_counter = 0;
int timer4_flag = 0;
int timer4_counter = 0;

void setTimer0(int duration) {
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE ;
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <setTimer0+0x28>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fc2:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <setTimer0+0x2c>)
 8000fc4:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <setTimer0+0x30>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	2000003c 	.word	0x2000003c
 8000fdc:	20000118 	.word	0x20000118
 8000fe0:	20000114 	.word	0x20000114

08000fe4 <setTimer1>:
void setTimer1(int duration){
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE ;
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <setTimer1+0x28>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ff6:	4a06      	ldr	r2, [pc, #24]	; (8001010 <setTimer1+0x2c>)
 8000ff8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <setTimer1+0x30>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	2000003c 	.word	0x2000003c
 8001010:	20000120 	.word	0x20000120
 8001014:	2000011c 	.word	0x2000011c

08001018 <setTimer2>:
void setTimer2(int duration){
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE ;
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <setTimer2+0x28>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	fb92 f3f3 	sdiv	r3, r2, r3
 800102a:	4a06      	ldr	r2, [pc, #24]	; (8001044 <setTimer2+0x2c>)
 800102c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <setTimer2+0x30>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	2000003c 	.word	0x2000003c
 8001044:	20000128 	.word	0x20000128
 8001048:	20000124 	.word	0x20000124

0800104c <setTimer3>:
void setTimer3(int duration) {
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE ;
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <setTimer3+0x28>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	fb92 f3f3 	sdiv	r3, r2, r3
 800105e:	4a06      	ldr	r2, [pc, #24]	; (8001078 <setTimer3+0x2c>)
 8001060:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <setTimer3+0x30>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	2000003c 	.word	0x2000003c
 8001078:	20000130 	.word	0x20000130
 800107c:	2000012c 	.word	0x2000012c

08001080 <setTimer4>:
void setTimer4(int duration) {
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE ;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <setTimer4+0x28>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001092:	4a06      	ldr	r2, [pc, #24]	; (80010ac <setTimer4+0x2c>)
 8001094:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <setTimer4+0x30>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	2000003c 	.word	0x2000003c
 80010ac:	20000138 	.word	0x20000138
 80010b0:	20000134 	.word	0x20000134

080010b4 <timerRun>:


void timerRun(){
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 80010b8:	4b29      	ldr	r3, [pc, #164]	; (8001160 <timerRun+0xac>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	dd0b      	ble.n	80010d8 <timerRun+0x24>
		timer0_counter--;
 80010c0:	4b27      	ldr	r3, [pc, #156]	; (8001160 <timerRun+0xac>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	4a26      	ldr	r2, [pc, #152]	; (8001160 <timerRun+0xac>)
 80010c8:	6013      	str	r3, [r2, #0]
		if(timer0_counter <= 0){
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <timerRun+0xac>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	dc02      	bgt.n	80010d8 <timerRun+0x24>
			timer0_flag = 1;
 80010d2:	4b24      	ldr	r3, [pc, #144]	; (8001164 <timerRun+0xb0>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer1_counter > 0){
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <timerRun+0xb4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	dd0b      	ble.n	80010f8 <timerRun+0x44>
		timer1_counter--;
 80010e0:	4b21      	ldr	r3, [pc, #132]	; (8001168 <timerRun+0xb4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	4a20      	ldr	r2, [pc, #128]	; (8001168 <timerRun+0xb4>)
 80010e8:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <timerRun+0xb4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	dc02      	bgt.n	80010f8 <timerRun+0x44>
			timer1_flag = 1;
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <timerRun+0xb8>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <timerRun+0xbc>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	dd0b      	ble.n	8001118 <timerRun+0x64>
		timer2_counter--;
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <timerRun+0xbc>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	3b01      	subs	r3, #1
 8001106:	4a1a      	ldr	r2, [pc, #104]	; (8001170 <timerRun+0xbc>)
 8001108:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <timerRun+0xbc>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	dc02      	bgt.n	8001118 <timerRun+0x64>
			timer2_flag = 1;
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <timerRun+0xc0>)
 8001114:	2201      	movs	r2, #1
 8001116:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <timerRun+0xc4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	dd0b      	ble.n	8001138 <timerRun+0x84>
		timer3_counter--;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <timerRun+0xc4>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	3b01      	subs	r3, #1
 8001126:	4a14      	ldr	r2, [pc, #80]	; (8001178 <timerRun+0xc4>)
 8001128:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <timerRun+0xc4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	dc02      	bgt.n	8001138 <timerRun+0x84>
			timer3_flag = 1;
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <timerRun+0xc8>)
 8001134:	2201      	movs	r2, #1
 8001136:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <timerRun+0xcc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	dd0b      	ble.n	8001158 <timerRun+0xa4>
		timer4_counter--;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <timerRun+0xcc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	3b01      	subs	r3, #1
 8001146:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <timerRun+0xcc>)
 8001148:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <timerRun+0xcc>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	dc02      	bgt.n	8001158 <timerRun+0xa4>
			timer4_flag = 1;
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <timerRun+0xd0>)
 8001154:	2201      	movs	r2, #1
 8001156:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	20000118 	.word	0x20000118
 8001164:	20000114 	.word	0x20000114
 8001168:	20000120 	.word	0x20000120
 800116c:	2000011c 	.word	0x2000011c
 8001170:	20000128 	.word	0x20000128
 8001174:	20000124 	.word	0x20000124
 8001178:	20000130 	.word	0x20000130
 800117c:	2000012c 	.word	0x2000012c
 8001180:	20000138 	.word	0x20000138
 8001184:	20000134 	.word	0x20000134

08001188 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_MspInit+0x5c>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <HAL_MspInit+0x5c>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6193      	str	r3, [r2, #24]
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_MspInit+0x5c>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <HAL_MspInit+0x5c>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <HAL_MspInit+0x5c>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	61d3      	str	r3, [r2, #28]
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <HAL_MspInit+0x5c>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_MspInit+0x60>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_MspInit+0x60>)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010000 	.word	0x40010000

080011ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011fc:	d114      	bne.n	8001228 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_TIM_Base_MspInit+0x68>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	4a14      	ldr	r2, [pc, #80]	; (8001254 <HAL_TIM_Base_MspInit+0x68>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	61d3      	str	r3, [r2, #28]
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_TIM_Base_MspInit+0x68>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	201c      	movs	r0, #28
 800121c:	f000 fa79 	bl	8001712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001220:	201c      	movs	r0, #28
 8001222:	f000 fa92 	bl	800174a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001226:	e010      	b.n	800124a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <HAL_TIM_Base_MspInit+0x6c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d10b      	bne.n	800124a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <HAL_TIM_Base_MspInit+0x68>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a07      	ldr	r2, [pc, #28]	; (8001254 <HAL_TIM_Base_MspInit+0x68>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b05      	ldr	r3, [pc, #20]	; (8001254 <HAL_TIM_Base_MspInit+0x68>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40021000 	.word	0x40021000
 8001258:	40000400 	.word	0x40000400

0800125c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <HAL_TIM_MspPostInit+0x58>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d117      	bne.n	80012ac <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127c:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <HAL_TIM_MspPostInit+0x5c>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a0d      	ldr	r2, [pc, #52]	; (80012b8 <HAL_TIM_MspPostInit+0x5c>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <HAL_TIM_MspPostInit+0x5c>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001294:	2340      	movs	r3, #64	; 0x40
 8001296:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2302      	movs	r3, #2
 800129e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	4619      	mov	r1, r3
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <HAL_TIM_MspPostInit+0x60>)
 80012a8:	f000 fb1a 	bl	80018e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012ac:	bf00      	nop
 80012ae:	3720      	adds	r7, #32
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40000400 	.word	0x40000400
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40010800 	.word	0x40010800

080012c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a1f      	ldr	r2, [pc, #124]	; (8001358 <HAL_UART_MspInit+0x98>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d137      	bne.n	8001350 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <HAL_UART_MspInit+0x9c>)
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	4a1d      	ldr	r2, [pc, #116]	; (800135c <HAL_UART_MspInit+0x9c>)
 80012e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ea:	61d3      	str	r3, [r2, #28]
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <HAL_UART_MspInit+0x9c>)
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f8:	4b18      	ldr	r3, [pc, #96]	; (800135c <HAL_UART_MspInit+0x9c>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a17      	ldr	r2, [pc, #92]	; (800135c <HAL_UART_MspInit+0x9c>)
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_UART_MspInit+0x9c>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001310:	2304      	movs	r3, #4
 8001312:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	4619      	mov	r1, r3
 8001322:	480f      	ldr	r0, [pc, #60]	; (8001360 <HAL_UART_MspInit+0xa0>)
 8001324:	f000 fadc 	bl	80018e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001328:	2308      	movs	r3, #8
 800132a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	4619      	mov	r1, r3
 800133a:	4809      	ldr	r0, [pc, #36]	; (8001360 <HAL_UART_MspInit+0xa0>)
 800133c:	f000 fad0 	bl	80018e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	2026      	movs	r0, #38	; 0x26
 8001346:	f000 f9e4 	bl	8001712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800134a:	2026      	movs	r0, #38	; 0x26
 800134c:	f000 f9fd 	bl	800174a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001350:	bf00      	nop
 8001352:	3720      	adds	r7, #32
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40004400 	.word	0x40004400
 800135c:	40021000 	.word	0x40021000
 8001360:	40010800 	.word	0x40010800

08001364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <NMI_Handler+0x4>

0800136a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136e:	e7fe      	b.n	800136e <HardFault_Handler+0x4>

08001370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <MemManage_Handler+0x4>

08001376 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <BusFault_Handler+0x4>

0800137c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <UsageFault_Handler+0x4>

08001382 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr

0800138e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr

0800139a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013aa:	f000 f8bf 	bl	800152c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <TIM2_IRQHandler+0x10>)
 80013ba:	f001 f959 	bl	8002670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000190 	.word	0x20000190

080013c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <USART2_IRQHandler+0x10>)
 80013ce:	f002 f88f 	bl	80034f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200001d8 	.word	0x200001d8

080013dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e4:	4a14      	ldr	r2, [pc, #80]	; (8001438 <_sbrk+0x5c>)
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <_sbrk+0x60>)
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <_sbrk+0x64>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <_sbrk+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	429a      	cmp	r2, r3
 800140a:	d207      	bcs.n	800141c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800140c:	f002 fc68 	bl	8003ce0 <__errno>
 8001410:	4603      	mov	r3, r0
 8001412:	220c      	movs	r2, #12
 8001414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	e009      	b.n	8001430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <_sbrk+0x64>)
 800142c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20005000 	.word	0x20005000
 800143c:	00000400 	.word	0x00000400
 8001440:	2000013c 	.word	0x2000013c
 8001444:	20000550 	.word	0x20000550

08001448 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001454:	480c      	ldr	r0, [pc, #48]	; (8001488 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001456:	490d      	ldr	r1, [pc, #52]	; (800148c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001458:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800145c:	e002      	b.n	8001464 <LoopCopyDataInit>

0800145e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001462:	3304      	adds	r3, #4

08001464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001468:	d3f9      	bcc.n	800145e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800146c:	4c0a      	ldr	r4, [pc, #40]	; (8001498 <LoopFillZerobss+0x22>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001470:	e001      	b.n	8001476 <LoopFillZerobss>

08001472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001474:	3204      	adds	r2, #4

08001476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001478:	d3fb      	bcc.n	8001472 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800147a:	f7ff ffe5 	bl	8001448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800147e:	f002 fc35 	bl	8003cec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001482:	f7ff fb51 	bl	8000b28 <main>
  bx lr
 8001486:	4770      	bx	lr
  ldr r0, =_sdata
 8001488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800148c:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001490:	08004640 	.word	0x08004640
  ldr r2, =_sbss
 8001494:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8001498:	20000550 	.word	0x20000550

0800149c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800149c:	e7fe      	b.n	800149c <ADC1_2_IRQHandler>
	...

080014a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_Init+0x28>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <HAL_Init+0x28>)
 80014aa:	f043 0310 	orr.w	r3, r3, #16
 80014ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f000 f923 	bl	80016fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b6:	200f      	movs	r0, #15
 80014b8:	f000 f808 	bl	80014cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014bc:	f7ff fe64 	bl	8001188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40022000 	.word	0x40022000

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_InitTick+0x54>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_InitTick+0x58>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f93b 	bl	8001766 <HAL_SYSTICK_Config>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00e      	b.n	8001518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d80a      	bhi.n	8001516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001500:	2200      	movs	r2, #0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f000 f903 	bl	8001712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800150c:	4a06      	ldr	r2, [pc, #24]	; (8001528 <HAL_InitTick+0x5c>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	e000      	b.n	8001518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	2000004c 	.word	0x2000004c
 8001524:	20000054 	.word	0x20000054
 8001528:	20000050 	.word	0x20000050

0800152c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_IncTick+0x1c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_IncTick+0x20>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a03      	ldr	r2, [pc, #12]	; (800154c <HAL_IncTick+0x20>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	20000054 	.word	0x20000054
 800154c:	2000053c 	.word	0x2000053c

08001550 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b02      	ldr	r3, [pc, #8]	; (8001560 <HAL_GetTick+0x10>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	2000053c 	.word	0x2000053c

08001564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001580:	4013      	ands	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800158c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001596:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	60d3      	str	r3, [r2, #12]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <__NVIC_GetPriorityGrouping+0x18>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	f003 0307 	and.w	r3, r3, #7
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	db0b      	blt.n	80015f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	f003 021f 	and.w	r2, r3, #31
 80015e0:	4906      	ldr	r1, [pc, #24]	; (80015fc <__NVIC_EnableIRQ+0x34>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	2001      	movs	r0, #1
 80015ea:	fa00 f202 	lsl.w	r2, r0, r2
 80015ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	e000e100 	.word	0xe000e100

08001600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	2b00      	cmp	r3, #0
 8001612:	db0a      	blt.n	800162a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	490c      	ldr	r1, [pc, #48]	; (800164c <__NVIC_SetPriority+0x4c>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	0112      	lsls	r2, r2, #4
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	440b      	add	r3, r1
 8001624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001628:	e00a      	b.n	8001640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4908      	ldr	r1, [pc, #32]	; (8001650 <__NVIC_SetPriority+0x50>)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	3b04      	subs	r3, #4
 8001638:	0112      	lsls	r2, r2, #4
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	440b      	add	r3, r1
 800163e:	761a      	strb	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000e100 	.word	0xe000e100
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f1c3 0307 	rsb	r3, r3, #7
 800166e:	2b04      	cmp	r3, #4
 8001670:	bf28      	it	cs
 8001672:	2304      	movcs	r3, #4
 8001674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3304      	adds	r3, #4
 800167a:	2b06      	cmp	r3, #6
 800167c:	d902      	bls.n	8001684 <NVIC_EncodePriority+0x30>
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3b03      	subs	r3, #3
 8001682:	e000      	b.n	8001686 <NVIC_EncodePriority+0x32>
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	f04f 32ff 	mov.w	r2, #4294967295
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43da      	mvns	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	401a      	ands	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43d9      	mvns	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	4313      	orrs	r3, r2
         );
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3724      	adds	r7, #36	; 0x24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c8:	d301      	bcc.n	80016ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00f      	b.n	80016ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <SysTick_Config+0x40>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d6:	210f      	movs	r1, #15
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f7ff ff90 	bl	8001600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <SysTick_Config+0x40>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <SysTick_Config+0x40>)
 80016e8:	2207      	movs	r2, #7
 80016ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	e000e010 	.word	0xe000e010

080016fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ff2d 	bl	8001564 <__NVIC_SetPriorityGrouping>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001724:	f7ff ff42 	bl	80015ac <__NVIC_GetPriorityGrouping>
 8001728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	6978      	ldr	r0, [r7, #20]
 8001730:	f7ff ff90 	bl	8001654 <NVIC_EncodePriority>
 8001734:	4602      	mov	r2, r0
 8001736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff5f 	bl	8001600 <__NVIC_SetPriority>
}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff35 	bl	80015c8 <__NVIC_EnableIRQ>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff ffa2 	bl	80016b8 <SysTick_Config>
 8001774:	4603      	mov	r3, r0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800177e:	b480      	push	{r7}
 8001780:	b085      	sub	sp, #20
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001790:	2b02      	cmp	r3, #2
 8001792:	d008      	beq.n	80017a6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2204      	movs	r2, #4
 8001798:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e020      	b.n	80017e8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 020e 	bic.w	r2, r2, #14
 80017b4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0201 	bic.w	r2, r2, #1
 80017c4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ce:	2101      	movs	r1, #1
 80017d0:	fa01 f202 	lsl.w	r2, r1, r2
 80017d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
	...

080017f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001806:	2b02      	cmp	r3, #2
 8001808:	d005      	beq.n	8001816 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2204      	movs	r2, #4
 800180e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	e051      	b.n	80018ba <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 020e 	bic.w	r2, r2, #14
 8001824:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 0201 	bic.w	r2, r2, #1
 8001834:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a22      	ldr	r2, [pc, #136]	; (80018c4 <HAL_DMA_Abort_IT+0xd0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d029      	beq.n	8001894 <HAL_DMA_Abort_IT+0xa0>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a20      	ldr	r2, [pc, #128]	; (80018c8 <HAL_DMA_Abort_IT+0xd4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d022      	beq.n	8001890 <HAL_DMA_Abort_IT+0x9c>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a1f      	ldr	r2, [pc, #124]	; (80018cc <HAL_DMA_Abort_IT+0xd8>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d01a      	beq.n	800188a <HAL_DMA_Abort_IT+0x96>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <HAL_DMA_Abort_IT+0xdc>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d012      	beq.n	8001884 <HAL_DMA_Abort_IT+0x90>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a1c      	ldr	r2, [pc, #112]	; (80018d4 <HAL_DMA_Abort_IT+0xe0>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d00a      	beq.n	800187e <HAL_DMA_Abort_IT+0x8a>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a1a      	ldr	r2, [pc, #104]	; (80018d8 <HAL_DMA_Abort_IT+0xe4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d102      	bne.n	8001878 <HAL_DMA_Abort_IT+0x84>
 8001872:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001876:	e00e      	b.n	8001896 <HAL_DMA_Abort_IT+0xa2>
 8001878:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800187c:	e00b      	b.n	8001896 <HAL_DMA_Abort_IT+0xa2>
 800187e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001882:	e008      	b.n	8001896 <HAL_DMA_Abort_IT+0xa2>
 8001884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001888:	e005      	b.n	8001896 <HAL_DMA_Abort_IT+0xa2>
 800188a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800188e:	e002      	b.n	8001896 <HAL_DMA_Abort_IT+0xa2>
 8001890:	2310      	movs	r3, #16
 8001892:	e000      	b.n	8001896 <HAL_DMA_Abort_IT+0xa2>
 8001894:	2301      	movs	r3, #1
 8001896:	4a11      	ldr	r2, [pc, #68]	; (80018dc <HAL_DMA_Abort_IT+0xe8>)
 8001898:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	4798      	blx	r3
    } 
  }
  return status;
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40020008 	.word	0x40020008
 80018c8:	4002001c 	.word	0x4002001c
 80018cc:	40020030 	.word	0x40020030
 80018d0:	40020044 	.word	0x40020044
 80018d4:	40020058 	.word	0x40020058
 80018d8:	4002006c 	.word	0x4002006c
 80018dc:	40020000 	.word	0x40020000

080018e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b08b      	sub	sp, #44	; 0x2c
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f2:	e169      	b.n	8001bc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018f4:	2201      	movs	r2, #1
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	429a      	cmp	r2, r3
 800190e:	f040 8158 	bne.w	8001bc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4a9a      	ldr	r2, [pc, #616]	; (8001b80 <HAL_GPIO_Init+0x2a0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d05e      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 800191c:	4a98      	ldr	r2, [pc, #608]	; (8001b80 <HAL_GPIO_Init+0x2a0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d875      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 8001922:	4a98      	ldr	r2, [pc, #608]	; (8001b84 <HAL_GPIO_Init+0x2a4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d058      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 8001928:	4a96      	ldr	r2, [pc, #600]	; (8001b84 <HAL_GPIO_Init+0x2a4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d86f      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 800192e:	4a96      	ldr	r2, [pc, #600]	; (8001b88 <HAL_GPIO_Init+0x2a8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d052      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 8001934:	4a94      	ldr	r2, [pc, #592]	; (8001b88 <HAL_GPIO_Init+0x2a8>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d869      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 800193a:	4a94      	ldr	r2, [pc, #592]	; (8001b8c <HAL_GPIO_Init+0x2ac>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d04c      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 8001940:	4a92      	ldr	r2, [pc, #584]	; (8001b8c <HAL_GPIO_Init+0x2ac>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d863      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 8001946:	4a92      	ldr	r2, [pc, #584]	; (8001b90 <HAL_GPIO_Init+0x2b0>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d046      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 800194c:	4a90      	ldr	r2, [pc, #576]	; (8001b90 <HAL_GPIO_Init+0x2b0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d85d      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 8001952:	2b12      	cmp	r3, #18
 8001954:	d82a      	bhi.n	80019ac <HAL_GPIO_Init+0xcc>
 8001956:	2b12      	cmp	r3, #18
 8001958:	d859      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 800195a:	a201      	add	r2, pc, #4	; (adr r2, 8001960 <HAL_GPIO_Init+0x80>)
 800195c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001960:	080019db 	.word	0x080019db
 8001964:	080019b5 	.word	0x080019b5
 8001968:	080019c7 	.word	0x080019c7
 800196c:	08001a09 	.word	0x08001a09
 8001970:	08001a0f 	.word	0x08001a0f
 8001974:	08001a0f 	.word	0x08001a0f
 8001978:	08001a0f 	.word	0x08001a0f
 800197c:	08001a0f 	.word	0x08001a0f
 8001980:	08001a0f 	.word	0x08001a0f
 8001984:	08001a0f 	.word	0x08001a0f
 8001988:	08001a0f 	.word	0x08001a0f
 800198c:	08001a0f 	.word	0x08001a0f
 8001990:	08001a0f 	.word	0x08001a0f
 8001994:	08001a0f 	.word	0x08001a0f
 8001998:	08001a0f 	.word	0x08001a0f
 800199c:	08001a0f 	.word	0x08001a0f
 80019a0:	08001a0f 	.word	0x08001a0f
 80019a4:	080019bd 	.word	0x080019bd
 80019a8:	080019d1 	.word	0x080019d1
 80019ac:	4a79      	ldr	r2, [pc, #484]	; (8001b94 <HAL_GPIO_Init+0x2b4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d013      	beq.n	80019da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019b2:	e02c      	b.n	8001a0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	623b      	str	r3, [r7, #32]
          break;
 80019ba:	e029      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	3304      	adds	r3, #4
 80019c2:	623b      	str	r3, [r7, #32]
          break;
 80019c4:	e024      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	3308      	adds	r3, #8
 80019cc:	623b      	str	r3, [r7, #32]
          break;
 80019ce:	e01f      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	330c      	adds	r3, #12
 80019d6:	623b      	str	r3, [r7, #32]
          break;
 80019d8:	e01a      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019e2:	2304      	movs	r3, #4
 80019e4:	623b      	str	r3, [r7, #32]
          break;
 80019e6:	e013      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d105      	bne.n	80019fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f0:	2308      	movs	r3, #8
 80019f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	611a      	str	r2, [r3, #16]
          break;
 80019fa:	e009      	b.n	8001a10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019fc:	2308      	movs	r3, #8
 80019fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	615a      	str	r2, [r3, #20]
          break;
 8001a06:	e003      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	623b      	str	r3, [r7, #32]
          break;
 8001a0c:	e000      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          break;
 8001a0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2bff      	cmp	r3, #255	; 0xff
 8001a14:	d801      	bhi.n	8001a1a <HAL_GPIO_Init+0x13a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	e001      	b.n	8001a1e <HAL_GPIO_Init+0x13e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2bff      	cmp	r3, #255	; 0xff
 8001a24:	d802      	bhi.n	8001a2c <HAL_GPIO_Init+0x14c>
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	e002      	b.n	8001a32 <HAL_GPIO_Init+0x152>
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	3b08      	subs	r3, #8
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	210f      	movs	r1, #15
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	401a      	ands	r2, r3
 8001a44:	6a39      	ldr	r1, [r7, #32]
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 80b1 	beq.w	8001bc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a60:	4b4d      	ldr	r3, [pc, #308]	; (8001b98 <HAL_GPIO_Init+0x2b8>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a4c      	ldr	r2, [pc, #304]	; (8001b98 <HAL_GPIO_Init+0x2b8>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6193      	str	r3, [r2, #24]
 8001a6c:	4b4a      	ldr	r3, [pc, #296]	; (8001b98 <HAL_GPIO_Init+0x2b8>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a78:	4a48      	ldr	r2, [pc, #288]	; (8001b9c <HAL_GPIO_Init+0x2bc>)
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	3302      	adds	r3, #2
 8001a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	220f      	movs	r2, #15
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a40      	ldr	r2, [pc, #256]	; (8001ba0 <HAL_GPIO_Init+0x2c0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d013      	beq.n	8001acc <HAL_GPIO_Init+0x1ec>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a3f      	ldr	r2, [pc, #252]	; (8001ba4 <HAL_GPIO_Init+0x2c4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d00d      	beq.n	8001ac8 <HAL_GPIO_Init+0x1e8>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a3e      	ldr	r2, [pc, #248]	; (8001ba8 <HAL_GPIO_Init+0x2c8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d007      	beq.n	8001ac4 <HAL_GPIO_Init+0x1e4>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a3d      	ldr	r2, [pc, #244]	; (8001bac <HAL_GPIO_Init+0x2cc>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d101      	bne.n	8001ac0 <HAL_GPIO_Init+0x1e0>
 8001abc:	2303      	movs	r3, #3
 8001abe:	e006      	b.n	8001ace <HAL_GPIO_Init+0x1ee>
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	e004      	b.n	8001ace <HAL_GPIO_Init+0x1ee>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e002      	b.n	8001ace <HAL_GPIO_Init+0x1ee>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <HAL_GPIO_Init+0x1ee>
 8001acc:	2300      	movs	r3, #0
 8001ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad0:	f002 0203 	and.w	r2, r2, #3
 8001ad4:	0092      	lsls	r2, r2, #2
 8001ad6:	4093      	lsls	r3, r2
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ade:	492f      	ldr	r1, [pc, #188]	; (8001b9c <HAL_GPIO_Init+0x2bc>)
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	089b      	lsrs	r3, r3, #2
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d006      	beq.n	8001b06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001af8:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	492c      	ldr	r1, [pc, #176]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	600b      	str	r3, [r1, #0]
 8001b04:	e006      	b.n	8001b14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b06:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	4928      	ldr	r1, [pc, #160]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d006      	beq.n	8001b2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b20:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	4922      	ldr	r1, [pc, #136]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b2e:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	491e      	ldr	r1, [pc, #120]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d006      	beq.n	8001b56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b48:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	4918      	ldr	r1, [pc, #96]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	608b      	str	r3, [r1, #8]
 8001b54:	e006      	b.n	8001b64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b56:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	4914      	ldr	r1, [pc, #80]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d021      	beq.n	8001bb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	490e      	ldr	r1, [pc, #56]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60cb      	str	r3, [r1, #12]
 8001b7c:	e021      	b.n	8001bc2 <HAL_GPIO_Init+0x2e2>
 8001b7e:	bf00      	nop
 8001b80:	10320000 	.word	0x10320000
 8001b84:	10310000 	.word	0x10310000
 8001b88:	10220000 	.word	0x10220000
 8001b8c:	10210000 	.word	0x10210000
 8001b90:	10120000 	.word	0x10120000
 8001b94:	10110000 	.word	0x10110000
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010000 	.word	0x40010000
 8001ba0:	40010800 	.word	0x40010800
 8001ba4:	40010c00 	.word	0x40010c00
 8001ba8:	40011000 	.word	0x40011000
 8001bac:	40011400 	.word	0x40011400
 8001bb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_GPIO_Init+0x304>)
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	4909      	ldr	r1, [pc, #36]	; (8001be4 <HAL_GPIO_Init+0x304>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f47f ae8e 	bne.w	80018f4 <HAL_GPIO_Init+0x14>
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	372c      	adds	r7, #44	; 0x2c
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	40010400 	.word	0x40010400

08001be8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	887b      	ldrh	r3, [r7, #2]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
 8001c04:	e001      	b.n	8001c0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr

08001c16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	807b      	strh	r3, [r7, #2]
 8001c22:	4613      	mov	r3, r2
 8001c24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c26:	787b      	ldrb	r3, [r7, #1]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2c:	887a      	ldrh	r2, [r7, #2]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c32:	e003      	b.n	8001c3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c34:	887b      	ldrh	r3, [r7, #2]
 8001c36:	041a      	lsls	r2, r3, #16
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	611a      	str	r2, [r3, #16]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr
	...

08001c48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e26c      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8087 	beq.w	8001d76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c68:	4b92      	ldr	r3, [pc, #584]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d00c      	beq.n	8001c8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c74:	4b8f      	ldr	r3, [pc, #572]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d112      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x5e>
 8001c80:	4b8c      	ldr	r3, [pc, #560]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c8c:	d10b      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8e:	4b89      	ldr	r3, [pc, #548]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d06c      	beq.n	8001d74 <HAL_RCC_OscConfig+0x12c>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d168      	bne.n	8001d74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e246      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x76>
 8001cb0:	4b80      	ldr	r3, [pc, #512]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a7f      	ldr	r2, [pc, #508]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	e02e      	b.n	8001d1c <HAL_RCC_OscConfig+0xd4>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x98>
 8001cc6:	4b7b      	ldr	r3, [pc, #492]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a7a      	ldr	r2, [pc, #488]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b78      	ldr	r3, [pc, #480]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a77      	ldr	r2, [pc, #476]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e01d      	b.n	8001d1c <HAL_RCC_OscConfig+0xd4>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0xbc>
 8001cea:	4b72      	ldr	r3, [pc, #456]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a71      	ldr	r2, [pc, #452]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4b6f      	ldr	r3, [pc, #444]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a6e      	ldr	r2, [pc, #440]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	e00b      	b.n	8001d1c <HAL_RCC_OscConfig+0xd4>
 8001d04:	4b6b      	ldr	r3, [pc, #428]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a6a      	ldr	r2, [pc, #424]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	4b68      	ldr	r3, [pc, #416]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a67      	ldr	r2, [pc, #412]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d013      	beq.n	8001d4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff fc14 	bl	8001550 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d2c:	f7ff fc10 	bl	8001550 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	; 0x64
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e1fa      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3e:	4b5d      	ldr	r3, [pc, #372]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0xe4>
 8001d4a:	e014      	b.n	8001d76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7ff fc00 	bl	8001550 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d54:	f7ff fbfc 	bl	8001550 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b64      	cmp	r3, #100	; 0x64
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e1e6      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d66:	4b53      	ldr	r3, [pc, #332]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x10c>
 8001d72:	e000      	b.n	8001d76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d063      	beq.n	8001e4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d82:	4b4c      	ldr	r3, [pc, #304]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00b      	beq.n	8001da6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d8e:	4b49      	ldr	r3, [pc, #292]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d11c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x18c>
 8001d9a:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d116      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	4b43      	ldr	r3, [pc, #268]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d005      	beq.n	8001dbe <HAL_RCC_OscConfig+0x176>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d001      	beq.n	8001dbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e1ba      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4939      	ldr	r1, [pc, #228]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd2:	e03a      	b.n	8001e4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d020      	beq.n	8001e1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ddc:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de2:	f7ff fbb5 	bl	8001550 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dea:	f7ff fbb1 	bl	8001550 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e19b      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfc:	4b2d      	ldr	r3, [pc, #180]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e08:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4927      	ldr	r1, [pc, #156]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]
 8001e1c:	e015      	b.n	8001e4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1e:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7ff fb94 	bl	8001550 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2c:	f7ff fb90 	bl	8001550 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e17a      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d03a      	beq.n	8001ecc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d019      	beq.n	8001e92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5e:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e64:	f7ff fb74 	bl	8001550 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e6c:	f7ff fb70 	bl	8001550 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e15a      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f000 fad8 	bl	8002440 <RCC_Delay>
 8001e90:	e01c      	b.n	8001ecc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e98:	f7ff fb5a 	bl	8001550 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9e:	e00f      	b.n	8001ec0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7ff fb56 	bl	8001550 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d908      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e140      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	42420000 	.word	0x42420000
 8001ebc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec0:	4b9e      	ldr	r3, [pc, #632]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1e9      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80a6 	beq.w	8002026 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eda:	2300      	movs	r3, #0
 8001edc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ede:	4b97      	ldr	r3, [pc, #604]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10d      	bne.n	8001f06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	4b94      	ldr	r3, [pc, #592]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4a93      	ldr	r2, [pc, #588]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	61d3      	str	r3, [r2, #28]
 8001ef6:	4b91      	ldr	r3, [pc, #580]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f02:	2301      	movs	r3, #1
 8001f04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f06:	4b8e      	ldr	r3, [pc, #568]	; (8002140 <HAL_RCC_OscConfig+0x4f8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d118      	bne.n	8001f44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f12:	4b8b      	ldr	r3, [pc, #556]	; (8002140 <HAL_RCC_OscConfig+0x4f8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a8a      	ldr	r2, [pc, #552]	; (8002140 <HAL_RCC_OscConfig+0x4f8>)
 8001f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1e:	f7ff fb17 	bl	8001550 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f26:	f7ff fb13 	bl	8001550 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b64      	cmp	r3, #100	; 0x64
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e0fd      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	4b81      	ldr	r3, [pc, #516]	; (8002140 <HAL_RCC_OscConfig+0x4f8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d106      	bne.n	8001f5a <HAL_RCC_OscConfig+0x312>
 8001f4c:	4b7b      	ldr	r3, [pc, #492]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4a7a      	ldr	r2, [pc, #488]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6213      	str	r3, [r2, #32]
 8001f58:	e02d      	b.n	8001fb6 <HAL_RCC_OscConfig+0x36e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x334>
 8001f62:	4b76      	ldr	r3, [pc, #472]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	4a75      	ldr	r2, [pc, #468]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	f023 0301 	bic.w	r3, r3, #1
 8001f6c:	6213      	str	r3, [r2, #32]
 8001f6e:	4b73      	ldr	r3, [pc, #460]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	4a72      	ldr	r2, [pc, #456]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	f023 0304 	bic.w	r3, r3, #4
 8001f78:	6213      	str	r3, [r2, #32]
 8001f7a:	e01c      	b.n	8001fb6 <HAL_RCC_OscConfig+0x36e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	d10c      	bne.n	8001f9e <HAL_RCC_OscConfig+0x356>
 8001f84:	4b6d      	ldr	r3, [pc, #436]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4a6c      	ldr	r2, [pc, #432]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	f043 0304 	orr.w	r3, r3, #4
 8001f8e:	6213      	str	r3, [r2, #32]
 8001f90:	4b6a      	ldr	r3, [pc, #424]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	4a69      	ldr	r2, [pc, #420]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6213      	str	r3, [r2, #32]
 8001f9c:	e00b      	b.n	8001fb6 <HAL_RCC_OscConfig+0x36e>
 8001f9e:	4b67      	ldr	r3, [pc, #412]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	4a66      	ldr	r2, [pc, #408]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	6213      	str	r3, [r2, #32]
 8001faa:	4b64      	ldr	r3, [pc, #400]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	4a63      	ldr	r2, [pc, #396]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	f023 0304 	bic.w	r3, r3, #4
 8001fb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d015      	beq.n	8001fea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fbe:	f7ff fac7 	bl	8001550 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc4:	e00a      	b.n	8001fdc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7ff fac3 	bl	8001550 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e0ab      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fdc:	4b57      	ldr	r3, [pc, #348]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ee      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x37e>
 8001fe8:	e014      	b.n	8002014 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7ff fab1 	bl	8001550 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7ff faad 	bl	8001550 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e095      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002008:	4b4c      	ldr	r3, [pc, #304]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1ee      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002014:	7dfb      	ldrb	r3, [r7, #23]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d105      	bne.n	8002026 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201a:	4b48      	ldr	r3, [pc, #288]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	4a47      	ldr	r2, [pc, #284]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8002020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002024:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 8081 	beq.w	8002132 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002030:	4b42      	ldr	r3, [pc, #264]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	2b08      	cmp	r3, #8
 800203a:	d061      	beq.n	8002100 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d146      	bne.n	80020d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002044:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <HAL_RCC_OscConfig+0x4fc>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7ff fa81 	bl	8001550 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002052:	f7ff fa7d 	bl	8001550 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e067      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002064:	4b35      	ldr	r3, [pc, #212]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1f0      	bne.n	8002052 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002078:	d108      	bne.n	800208c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800207a:	4b30      	ldr	r3, [pc, #192]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	492d      	ldr	r1, [pc, #180]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800208c:	4b2b      	ldr	r3, [pc, #172]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a19      	ldr	r1, [r3, #32]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	430b      	orrs	r3, r1
 800209e:	4927      	ldr	r1, [pc, #156]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a4:	4b27      	ldr	r3, [pc, #156]	; (8002144 <HAL_RCC_OscConfig+0x4fc>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7ff fa51 	bl	8001550 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b2:	f7ff fa4d 	bl	8001550 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e037      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020c4:	4b1d      	ldr	r3, [pc, #116]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x46a>
 80020d0:	e02f      	b.n	8002132 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d2:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <HAL_RCC_OscConfig+0x4fc>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7ff fa3a 	bl	8001550 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7ff fa36 	bl	8001550 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e020      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f2:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x498>
 80020fe:	e018      	b.n	8002132 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e013      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	429a      	cmp	r2, r3
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d001      	beq.n	8002132 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40021000 	.word	0x40021000
 8002140:	40007000 	.word	0x40007000
 8002144:	42420060 	.word	0x42420060

08002148 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0d0      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800215c:	4b6a      	ldr	r3, [pc, #424]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d910      	bls.n	800218c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b67      	ldr	r3, [pc, #412]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 0207 	bic.w	r2, r3, #7
 8002172:	4965      	ldr	r1, [pc, #404]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b63      	ldr	r3, [pc, #396]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0b8      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d020      	beq.n	80021da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021a4:	4b59      	ldr	r3, [pc, #356]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4a58      	ldr	r2, [pc, #352]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021bc:	4b53      	ldr	r3, [pc, #332]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	4a52      	ldr	r2, [pc, #328]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c8:	4b50      	ldr	r3, [pc, #320]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	494d      	ldr	r1, [pc, #308]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d040      	beq.n	8002268 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ee:	4b47      	ldr	r3, [pc, #284]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d115      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e07f      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d107      	bne.n	8002216 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002206:	4b41      	ldr	r3, [pc, #260]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e073      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002216:	4b3d      	ldr	r3, [pc, #244]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e06b      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002226:	4b39      	ldr	r3, [pc, #228]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f023 0203 	bic.w	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4936      	ldr	r1, [pc, #216]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002238:	f7ff f98a 	bl	8001550 <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	e00a      	b.n	8002256 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002240:	f7ff f986 	bl	8001550 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f241 3288 	movw	r2, #5000	; 0x1388
 800224e:	4293      	cmp	r3, r2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e053      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002256:	4b2d      	ldr	r3, [pc, #180]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 020c 	and.w	r2, r3, #12
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	429a      	cmp	r2, r3
 8002266:	d1eb      	bne.n	8002240 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002268:	4b27      	ldr	r3, [pc, #156]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d210      	bcs.n	8002298 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002276:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 0207 	bic.w	r2, r3, #7
 800227e:	4922      	ldr	r1, [pc, #136]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	4313      	orrs	r3, r2
 8002284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002286:	4b20      	ldr	r3, [pc, #128]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e032      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4916      	ldr	r1, [pc, #88]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022c2:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	490e      	ldr	r1, [pc, #56]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022d6:	f000 f821 	bl	800231c <HAL_RCC_GetSysClockFreq>
 80022da:	4602      	mov	r2, r0
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	490a      	ldr	r1, [pc, #40]	; (8002310 <HAL_RCC_ClockConfig+0x1c8>)
 80022e8:	5ccb      	ldrb	r3, [r1, r3]
 80022ea:	fa22 f303 	lsr.w	r3, r2, r3
 80022ee:	4a09      	ldr	r2, [pc, #36]	; (8002314 <HAL_RCC_ClockConfig+0x1cc>)
 80022f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_RCC_ClockConfig+0x1d0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff f8e8 	bl	80014cc <HAL_InitTick>

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40022000 	.word	0x40022000
 800230c:	40021000 	.word	0x40021000
 8002310:	080045ec 	.word	0x080045ec
 8002314:	2000004c 	.word	0x2000004c
 8002318:	20000050 	.word	0x20000050

0800231c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800231c:	b490      	push	{r4, r7}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002322:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002324:	1d3c      	adds	r4, r7, #4
 8002326:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002328:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800232c:	f240 2301 	movw	r3, #513	; 0x201
 8002330:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	2300      	movs	r3, #0
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002346:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b04      	cmp	r3, #4
 8002354:	d002      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x40>
 8002356:	2b08      	cmp	r3, #8
 8002358:	d003      	beq.n	8002362 <HAL_RCC_GetSysClockFreq+0x46>
 800235a:	e02d      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800235c:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800235e:	623b      	str	r3, [r7, #32]
      break;
 8002360:	e02d      	b.n	80023be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	0c9b      	lsrs	r3, r3, #18
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800236e:	4413      	add	r3, r2
 8002370:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002374:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d013      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	0c5b      	lsrs	r3, r3, #17
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800238e:	4413      	add	r3, r2
 8002390:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002394:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	4a0e      	ldr	r2, [pc, #56]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800239a:	fb02 f203 	mul.w	r2, r2, r3
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
 80023a6:	e004      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	4a0b      	ldr	r2, [pc, #44]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023ac:	fb02 f303 	mul.w	r3, r2, r3
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	623b      	str	r3, [r7, #32]
      break;
 80023b6:	e002      	b.n	80023be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ba:	623b      	str	r3, [r7, #32]
      break;
 80023bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023be:	6a3b      	ldr	r3, [r7, #32]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3728      	adds	r7, #40	; 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc90      	pop	{r4, r7}
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	080045dc 	.word	0x080045dc
 80023d0:	40021000 	.word	0x40021000
 80023d4:	007a1200 	.word	0x007a1200
 80023d8:	003d0900 	.word	0x003d0900

080023dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e0:	4b02      	ldr	r3, [pc, #8]	; (80023ec <HAL_RCC_GetHCLKFreq+0x10>)
 80023e2:	681b      	ldr	r3, [r3, #0]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	2000004c 	.word	0x2000004c

080023f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023f4:	f7ff fff2 	bl	80023dc <HAL_RCC_GetHCLKFreq>
 80023f8:	4602      	mov	r2, r0
 80023fa:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	0a1b      	lsrs	r3, r3, #8
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	4903      	ldr	r1, [pc, #12]	; (8002414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002406:	5ccb      	ldrb	r3, [r1, r3]
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800240c:	4618      	mov	r0, r3
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000
 8002414:	080045fc 	.word	0x080045fc

08002418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800241c:	f7ff ffde 	bl	80023dc <HAL_RCC_GetHCLKFreq>
 8002420:	4602      	mov	r2, r0
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	0adb      	lsrs	r3, r3, #11
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	4903      	ldr	r1, [pc, #12]	; (800243c <HAL_RCC_GetPCLK2Freq+0x24>)
 800242e:	5ccb      	ldrb	r3, [r1, r3]
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000
 800243c:	080045fc 	.word	0x080045fc

08002440 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002448:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <RCC_Delay+0x34>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <RCC_Delay+0x38>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	0a5b      	lsrs	r3, r3, #9
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800245c:	bf00      	nop
  }
  while (Delay --);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1e5a      	subs	r2, r3, #1
 8002462:	60fa      	str	r2, [r7, #12]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1f9      	bne.n	800245c <RCC_Delay+0x1c>
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr
 8002474:	2000004c 	.word	0x2000004c
 8002478:	10624dd3 	.word	0x10624dd3

0800247c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e041      	b.n	8002512 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d106      	bne.n	80024a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7fe fea2 	bl	80011ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3304      	adds	r3, #4
 80024b8:	4619      	mov	r1, r3
 80024ba:	4610      	mov	r0, r2
 80024bc:	f000 fb86 	bl	8002bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b01      	cmp	r3, #1
 800252e:	d001      	beq.n	8002534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e03a      	b.n	80025aa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a18      	ldr	r2, [pc, #96]	; (80025b4 <HAL_TIM_Base_Start_IT+0x98>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00e      	beq.n	8002574 <HAL_TIM_Base_Start_IT+0x58>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800255e:	d009      	beq.n	8002574 <HAL_TIM_Base_Start_IT+0x58>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a14      	ldr	r2, [pc, #80]	; (80025b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d004      	beq.n	8002574 <HAL_TIM_Base_Start_IT+0x58>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a13      	ldr	r2, [pc, #76]	; (80025bc <HAL_TIM_Base_Start_IT+0xa0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d111      	bne.n	8002598 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b06      	cmp	r3, #6
 8002584:	d010      	beq.n	80025a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 0201 	orr.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002596:	e007      	b.n	80025a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	40012c00 	.word	0x40012c00
 80025b8:	40000400 	.word	0x40000400
 80025bc:	40000800 	.word	0x40000800

080025c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e041      	b.n	8002656 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f839 	bl	800265e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3304      	adds	r3, #4
 80025fc:	4619      	mov	r1, r3
 80025fe:	4610      	mov	r0, r2
 8002600:	f000 fae4 	bl	8002bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b02      	cmp	r3, #2
 8002684:	d122      	bne.n	80026cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b02      	cmp	r3, #2
 8002692:	d11b      	bne.n	80026cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0202 	mvn.w	r2, #2
 800269c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fa6f 	bl	8002b96 <HAL_TIM_IC_CaptureCallback>
 80026b8:	e005      	b.n	80026c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fa62 	bl	8002b84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fa71 	bl	8002ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d122      	bne.n	8002720 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d11b      	bne.n	8002720 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0204 	mvn.w	r2, #4
 80026f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2202      	movs	r2, #2
 80026f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 fa45 	bl	8002b96 <HAL_TIM_IC_CaptureCallback>
 800270c:	e005      	b.n	800271a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 fa38 	bl	8002b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 fa47 	bl	8002ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b08      	cmp	r3, #8
 800272c:	d122      	bne.n	8002774 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b08      	cmp	r3, #8
 800273a:	d11b      	bne.n	8002774 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0208 	mvn.w	r2, #8
 8002744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2204      	movs	r2, #4
 800274a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fa1b 	bl	8002b96 <HAL_TIM_IC_CaptureCallback>
 8002760:	e005      	b.n	800276e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 fa0e 	bl	8002b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 fa1d 	bl	8002ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b10      	cmp	r3, #16
 8002780:	d122      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0310 	and.w	r3, r3, #16
 800278c:	2b10      	cmp	r3, #16
 800278e:	d11b      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0210 	mvn.w	r2, #16
 8002798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2208      	movs	r2, #8
 800279e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f9f1 	bl	8002b96 <HAL_TIM_IC_CaptureCallback>
 80027b4:	e005      	b.n	80027c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f9e4 	bl	8002b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f9f3 	bl	8002ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d10e      	bne.n	80027f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d107      	bne.n	80027f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0201 	mvn.w	r2, #1
 80027ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe fb56 	bl	8000ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fe:	2b80      	cmp	r3, #128	; 0x80
 8002800:	d10e      	bne.n	8002820 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280c:	2b80      	cmp	r3, #128	; 0x80
 800280e:	d107      	bne.n	8002820 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 fd5b 	bl	80032d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282a:	2b40      	cmp	r3, #64	; 0x40
 800282c:	d10e      	bne.n	800284c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002838:	2b40      	cmp	r3, #64	; 0x40
 800283a:	d107      	bne.n	800284c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f9b7 	bl	8002bba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	2b20      	cmp	r3, #32
 8002858:	d10e      	bne.n	8002878 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f003 0320 	and.w	r3, r3, #32
 8002864:	2b20      	cmp	r3, #32
 8002866:	d107      	bne.n	8002878 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0220 	mvn.w	r2, #32
 8002870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fd26 	bl	80032c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002878:	bf00      	nop
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002896:	2302      	movs	r3, #2
 8002898:	e0ac      	b.n	80029f4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b0c      	cmp	r3, #12
 80028a6:	f200 809f 	bhi.w	80029e8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80028aa:	a201      	add	r2, pc, #4	; (adr r2, 80028b0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80028ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b0:	080028e5 	.word	0x080028e5
 80028b4:	080029e9 	.word	0x080029e9
 80028b8:	080029e9 	.word	0x080029e9
 80028bc:	080029e9 	.word	0x080029e9
 80028c0:	08002925 	.word	0x08002925
 80028c4:	080029e9 	.word	0x080029e9
 80028c8:	080029e9 	.word	0x080029e9
 80028cc:	080029e9 	.word	0x080029e9
 80028d0:	08002967 	.word	0x08002967
 80028d4:	080029e9 	.word	0x080029e9
 80028d8:	080029e9 	.word	0x080029e9
 80028dc:	080029e9 	.word	0x080029e9
 80028e0:	080029a7 	.word	0x080029a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 f9d0 	bl	8002c90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0208 	orr.w	r2, r2, #8
 80028fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699a      	ldr	r2, [r3, #24]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0204 	bic.w	r2, r2, #4
 800290e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6999      	ldr	r1, [r3, #24]
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	619a      	str	r2, [r3, #24]
      break;
 8002922:	e062      	b.n	80029ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fa16 	bl	8002d5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800293e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800294e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6999      	ldr	r1, [r3, #24]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	021a      	lsls	r2, r3, #8
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	619a      	str	r2, [r3, #24]
      break;
 8002964:	e041      	b.n	80029ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68b9      	ldr	r1, [r7, #8]
 800296c:	4618      	mov	r0, r3
 800296e:	f000 fa5f 	bl	8002e30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	69da      	ldr	r2, [r3, #28]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f042 0208 	orr.w	r2, r2, #8
 8002980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69da      	ldr	r2, [r3, #28]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0204 	bic.w	r2, r2, #4
 8002990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	69d9      	ldr	r1, [r3, #28]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	61da      	str	r2, [r3, #28]
      break;
 80029a4:	e021      	b.n	80029ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68b9      	ldr	r1, [r7, #8]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 faa9 	bl	8002f04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	69da      	ldr	r2, [r3, #28]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	69da      	ldr	r2, [r3, #28]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	69d9      	ldr	r1, [r3, #28]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	021a      	lsls	r2, r3, #8
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	61da      	str	r2, [r3, #28]
      break;
 80029e6:	e000      	b.n	80029ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80029e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_TIM_ConfigClockSource+0x18>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e0b3      	b.n	8002b7c <HAL_TIM_ConfigClockSource+0x180>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a4c:	d03e      	beq.n	8002acc <HAL_TIM_ConfigClockSource+0xd0>
 8002a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a52:	f200 8087 	bhi.w	8002b64 <HAL_TIM_ConfigClockSource+0x168>
 8002a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a5a:	f000 8085 	beq.w	8002b68 <HAL_TIM_ConfigClockSource+0x16c>
 8002a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a62:	d87f      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x168>
 8002a64:	2b70      	cmp	r3, #112	; 0x70
 8002a66:	d01a      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0xa2>
 8002a68:	2b70      	cmp	r3, #112	; 0x70
 8002a6a:	d87b      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x168>
 8002a6c:	2b60      	cmp	r3, #96	; 0x60
 8002a6e:	d050      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0x116>
 8002a70:	2b60      	cmp	r3, #96	; 0x60
 8002a72:	d877      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x168>
 8002a74:	2b50      	cmp	r3, #80	; 0x50
 8002a76:	d03c      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0xf6>
 8002a78:	2b50      	cmp	r3, #80	; 0x50
 8002a7a:	d873      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x168>
 8002a7c:	2b40      	cmp	r3, #64	; 0x40
 8002a7e:	d058      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0x136>
 8002a80:	2b40      	cmp	r3, #64	; 0x40
 8002a82:	d86f      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x168>
 8002a84:	2b30      	cmp	r3, #48	; 0x30
 8002a86:	d064      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0x156>
 8002a88:	2b30      	cmp	r3, #48	; 0x30
 8002a8a:	d86b      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x168>
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	d060      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0x156>
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	d867      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x168>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d05c      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0x156>
 8002a98:	2b10      	cmp	r3, #16
 8002a9a:	d05a      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a9c:	e062      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6899      	ldr	r1, [r3, #8]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f000 faee 	bl	800308e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ac0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	609a      	str	r2, [r3, #8]
      break;
 8002aca:	e04e      	b.n	8002b6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	6899      	ldr	r1, [r3, #8]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f000 fad7 	bl	800308e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002aee:	609a      	str	r2, [r3, #8]
      break;
 8002af0:	e03b      	b.n	8002b6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6859      	ldr	r1, [r3, #4]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	461a      	mov	r2, r3
 8002b00:	f000 fa4e 	bl	8002fa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2150      	movs	r1, #80	; 0x50
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 faa5 	bl	800305a <TIM_ITRx_SetConfig>
      break;
 8002b10:	e02b      	b.n	8002b6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6859      	ldr	r1, [r3, #4]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	f000 fa6c 	bl	8002ffc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2160      	movs	r1, #96	; 0x60
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fa95 	bl	800305a <TIM_ITRx_SetConfig>
      break;
 8002b30:	e01b      	b.n	8002b6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	6859      	ldr	r1, [r3, #4]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	f000 fa2e 	bl	8002fa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2140      	movs	r1, #64	; 0x40
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fa85 	bl	800305a <TIM_ITRx_SetConfig>
      break;
 8002b50:	e00b      	b.n	8002b6a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	f000 fa7c 	bl	800305a <TIM_ITRx_SetConfig>
        break;
 8002b62:	e002      	b.n	8002b6a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b64:	bf00      	nop
 8002b66:	e000      	b.n	8002b6a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr

08002b96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr

08002bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a29      	ldr	r2, [pc, #164]	; (8002c84 <TIM_Base_SetConfig+0xb8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00b      	beq.n	8002bfc <TIM_Base_SetConfig+0x30>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bea:	d007      	beq.n	8002bfc <TIM_Base_SetConfig+0x30>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a26      	ldr	r2, [pc, #152]	; (8002c88 <TIM_Base_SetConfig+0xbc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d003      	beq.n	8002bfc <TIM_Base_SetConfig+0x30>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a25      	ldr	r2, [pc, #148]	; (8002c8c <TIM_Base_SetConfig+0xc0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d108      	bne.n	8002c0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a1c      	ldr	r2, [pc, #112]	; (8002c84 <TIM_Base_SetConfig+0xb8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00b      	beq.n	8002c2e <TIM_Base_SetConfig+0x62>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c1c:	d007      	beq.n	8002c2e <TIM_Base_SetConfig+0x62>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a19      	ldr	r2, [pc, #100]	; (8002c88 <TIM_Base_SetConfig+0xbc>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d003      	beq.n	8002c2e <TIM_Base_SetConfig+0x62>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <TIM_Base_SetConfig+0xc0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d108      	bne.n	8002c40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a07      	ldr	r2, [pc, #28]	; (8002c84 <TIM_Base_SetConfig+0xb8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d103      	bne.n	8002c74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	615a      	str	r2, [r3, #20]
}
 8002c7a:	bf00      	nop
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	40012c00 	.word	0x40012c00
 8002c88:	40000400 	.word	0x40000400
 8002c8c:	40000800 	.word	0x40000800

08002c90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f023 0201 	bic.w	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0303 	bic.w	r3, r3, #3
 8002cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f023 0302 	bic.w	r3, r3, #2
 8002cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a1c      	ldr	r2, [pc, #112]	; (8002d58 <TIM_OC1_SetConfig+0xc8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d10c      	bne.n	8002d06 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f023 0308 	bic.w	r3, r3, #8
 8002cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f023 0304 	bic.w	r3, r3, #4
 8002d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a13      	ldr	r2, [pc, #76]	; (8002d58 <TIM_OC1_SetConfig+0xc8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d111      	bne.n	8002d32 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	621a      	str	r2, [r3, #32]
}
 8002d4c:	bf00      	nop
 8002d4e:	371c      	adds	r7, #28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40012c00 	.word	0x40012c00

08002d5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	f023 0210 	bic.w	r2, r3, #16
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	021b      	lsls	r3, r3, #8
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f023 0320 	bic.w	r3, r3, #32
 8002da6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a1d      	ldr	r2, [pc, #116]	; (8002e2c <TIM_OC2_SetConfig+0xd0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d10d      	bne.n	8002dd8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <TIM_OC2_SetConfig+0xd0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d113      	bne.n	8002e08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002de6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	621a      	str	r2, [r3, #32]
}
 8002e22:	bf00      	nop
 8002e24:	371c      	adds	r7, #28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr
 8002e2c:	40012c00 	.word	0x40012c00

08002e30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 0303 	bic.w	r3, r3, #3
 8002e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a1d      	ldr	r2, [pc, #116]	; (8002f00 <TIM_OC3_SetConfig+0xd0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d10d      	bne.n	8002eaa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	021b      	lsls	r3, r3, #8
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a14      	ldr	r2, [pc, #80]	; (8002f00 <TIM_OC3_SetConfig+0xd0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d113      	bne.n	8002eda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	621a      	str	r2, [r3, #32]
}
 8002ef4:	bf00      	nop
 8002ef6:	371c      	adds	r7, #28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40012c00 	.word	0x40012c00

08002f04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	021b      	lsls	r3, r3, #8
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	031b      	lsls	r3, r3, #12
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a0f      	ldr	r2, [pc, #60]	; (8002f9c <TIM_OC4_SetConfig+0x98>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d109      	bne.n	8002f78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	019b      	lsls	r3, r3, #6
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	621a      	str	r2, [r3, #32]
}
 8002f92:	bf00      	nop
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	40012c00 	.word	0x40012c00

08002fa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	f023 0201 	bic.w	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f023 030a 	bic.w	r3, r3, #10
 8002fdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	621a      	str	r2, [r3, #32]
}
 8002ff2:	bf00      	nop
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr

08002ffc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	f023 0210 	bic.w	r2, r3, #16
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003026:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	031b      	lsls	r3, r3, #12
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4313      	orrs	r3, r2
 8003030:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003038:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	621a      	str	r2, [r3, #32]
}
 8003050:	bf00      	nop
 8003052:	371c      	adds	r7, #28
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr

0800305a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800305a:	b480      	push	{r7}
 800305c:	b085      	sub	sp, #20
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003070:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	f043 0307 	orr.w	r3, r3, #7
 800307c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	609a      	str	r2, [r3, #8]
}
 8003084:	bf00      	nop
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800308e:	b480      	push	{r7}
 8003090:	b087      	sub	sp, #28
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	021a      	lsls	r2, r3, #8
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	431a      	orrs	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	609a      	str	r2, [r3, #8]
}
 80030c2:	bf00      	nop
 80030c4:	371c      	adds	r7, #28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d109      	bne.n	80030f0 <HAL_TIMEx_PWMN_Start+0x24>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	bf14      	ite	ne
 80030e8:	2301      	movne	r3, #1
 80030ea:	2300      	moveq	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	e022      	b.n	8003136 <HAL_TIMEx_PWMN_Start+0x6a>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d109      	bne.n	800310a <HAL_TIMEx_PWMN_Start+0x3e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	bf14      	ite	ne
 8003102:	2301      	movne	r3, #1
 8003104:	2300      	moveq	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	e015      	b.n	8003136 <HAL_TIMEx_PWMN_Start+0x6a>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b08      	cmp	r3, #8
 800310e:	d109      	bne.n	8003124 <HAL_TIMEx_PWMN_Start+0x58>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	bf14      	ite	ne
 800311c:	2301      	movne	r3, #1
 800311e:	2300      	moveq	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	e008      	b.n	8003136 <HAL_TIMEx_PWMN_Start+0x6a>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	bf14      	ite	ne
 8003130:	2301      	movne	r3, #1
 8003132:	2300      	moveq	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e059      	b.n	80031f2 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d104      	bne.n	800314e <HAL_TIMEx_PWMN_Start+0x82>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800314c:	e013      	b.n	8003176 <HAL_TIMEx_PWMN_Start+0xaa>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b04      	cmp	r3, #4
 8003152:	d104      	bne.n	800315e <HAL_TIMEx_PWMN_Start+0x92>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800315c:	e00b      	b.n	8003176 <HAL_TIMEx_PWMN_Start+0xaa>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b08      	cmp	r3, #8
 8003162:	d104      	bne.n	800316e <HAL_TIMEx_PWMN_Start+0xa2>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800316c:	e003      	b.n	8003176 <HAL_TIMEx_PWMN_Start+0xaa>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2202      	movs	r2, #2
 8003172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2204      	movs	r2, #4
 800317c:	6839      	ldr	r1, [r7, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f000 f8b2 	bl	80032e8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003192:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a18      	ldr	r2, [pc, #96]	; (80031fc <HAL_TIMEx_PWMN_Start+0x130>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00e      	beq.n	80031bc <HAL_TIMEx_PWMN_Start+0xf0>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a6:	d009      	beq.n	80031bc <HAL_TIMEx_PWMN_Start+0xf0>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a14      	ldr	r2, [pc, #80]	; (8003200 <HAL_TIMEx_PWMN_Start+0x134>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d004      	beq.n	80031bc <HAL_TIMEx_PWMN_Start+0xf0>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a13      	ldr	r2, [pc, #76]	; (8003204 <HAL_TIMEx_PWMN_Start+0x138>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d111      	bne.n	80031e0 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b06      	cmp	r3, #6
 80031cc:	d010      	beq.n	80031f0 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 0201 	orr.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031de:	e007      	b.n	80031f0 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40012c00 	.word	0x40012c00
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800

08003208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800321c:	2302      	movs	r3, #2
 800321e:	e046      	b.n	80032ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003246:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a16      	ldr	r2, [pc, #88]	; (80032b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d00e      	beq.n	8003282 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326c:	d009      	beq.n	8003282 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a12      	ldr	r2, [pc, #72]	; (80032bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d004      	beq.n	8003282 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a10      	ldr	r2, [pc, #64]	; (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d10c      	bne.n	800329c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003288:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	4313      	orrs	r3, r2
 8003292:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	40012c00 	.word	0x40012c00
 80032bc:	40000400 	.word	0x40000400
 80032c0:	40000800 	.word	0x40000800

080032c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr

080032d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr

080032e8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	2204      	movs	r2, #4
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a1a      	ldr	r2, [r3, #32]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	43db      	mvns	r3, r3
 800330a:	401a      	ands	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a1a      	ldr	r2, [r3, #32]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	fa01 f303 	lsl.w	r3, r1, r3
 8003320:	431a      	orrs	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	621a      	str	r2, [r3, #32]
}
 8003326:	bf00      	nop
 8003328:	371c      	adds	r7, #28
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e03f      	b.n	80033c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fd ffb2 	bl	80012c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2224      	movs	r2, #36	; 0x24
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003372:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 fc25 	bl	8003bc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003388:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003398:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b08a      	sub	sp, #40	; 0x28
 80033ce:	af02      	add	r7, sp, #8
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	603b      	str	r3, [r7, #0]
 80033d6:	4613      	mov	r3, r2
 80033d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	d17c      	bne.n	80034e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <HAL_UART_Transmit+0x2c>
 80033f0:	88fb      	ldrh	r3, [r7, #6]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e075      	b.n	80034e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_UART_Transmit+0x3e>
 8003404:	2302      	movs	r3, #2
 8003406:	e06e      	b.n	80034e6 <HAL_UART_Transmit+0x11c>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2221      	movs	r2, #33	; 0x21
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800341e:	f7fe f897 	bl	8001550 <HAL_GetTick>
 8003422:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	88fa      	ldrh	r2, [r7, #6]
 8003428:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	88fa      	ldrh	r2, [r7, #6]
 800342e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003438:	d108      	bne.n	800344c <HAL_UART_Transmit+0x82>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d104      	bne.n	800344c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	e003      	b.n	8003454 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003450:	2300      	movs	r3, #0
 8003452:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800345c:	e02a      	b.n	80034b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2200      	movs	r2, #0
 8003466:	2180      	movs	r1, #128	; 0x80
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 fa11 	bl	8003890 <UART_WaitOnFlagUntilTimeout>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e036      	b.n	80034e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10b      	bne.n	8003496 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800348c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	3302      	adds	r3, #2
 8003492:	61bb      	str	r3, [r7, #24]
 8003494:	e007      	b.n	80034a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	781a      	ldrb	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	3301      	adds	r3, #1
 80034a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1cf      	bne.n	800345e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2200      	movs	r2, #0
 80034c6:	2140      	movs	r1, #64	; 0x40
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f9e1 	bl	8003890 <UART_WaitOnFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e006      	b.n	80034e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	e000      	b.n	80034e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034e4:	2302      	movs	r3, #2
  }
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3720      	adds	r7, #32
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08a      	sub	sp, #40	; 0x28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003510:	2300      	movs	r3, #0
 8003512:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10d      	bne.n	8003542 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_UART_IRQHandler+0x52>
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fa99 	bl	8003a72 <UART_Receive_IT>
      return;
 8003540:	e17b      	b.n	800383a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80b1 	beq.w	80036ac <HAL_UART_IRQHandler+0x1bc>
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d105      	bne.n	8003560 <HAL_UART_IRQHandler+0x70>
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 80a6 	beq.w	80036ac <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <HAL_UART_IRQHandler+0x90>
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	f043 0201 	orr.w	r2, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_UART_IRQHandler+0xb0>
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	f043 0202 	orr.w	r2, r3, #2
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_UART_IRQHandler+0xd0>
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	f043 0204 	orr.w	r2, r3, #4
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00f      	beq.n	80035ea <HAL_UART_IRQHandler+0xfa>
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d104      	bne.n	80035de <HAL_UART_IRQHandler+0xee>
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f043 0208 	orr.w	r2, r3, #8
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 811e 	beq.w	8003830 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d007      	beq.n	800360e <HAL_UART_IRQHandler+0x11e>
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fa32 	bl	8003a72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003618:	2b00      	cmp	r3, #0
 800361a:	bf14      	ite	ne
 800361c:	2301      	movne	r3, #1
 800361e:	2300      	moveq	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d102      	bne.n	8003636 <HAL_UART_IRQHandler+0x146>
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d031      	beq.n	800369a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f974 	bl	8003924 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d023      	beq.n	8003692 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695a      	ldr	r2, [r3, #20]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003658:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	2b00      	cmp	r3, #0
 8003660:	d013      	beq.n	800368a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003666:	4a76      	ldr	r2, [pc, #472]	; (8003840 <HAL_UART_IRQHandler+0x350>)
 8003668:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366e:	4618      	mov	r0, r3
 8003670:	f7fe f8c0 	bl	80017f4 <HAL_DMA_Abort_IT>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d016      	beq.n	80036a8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003684:	4610      	mov	r0, r2
 8003686:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003688:	e00e      	b.n	80036a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f8ec 	bl	8003868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003690:	e00a      	b.n	80036a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f8e8 	bl	8003868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003698:	e006      	b.n	80036a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f8e4 	bl	8003868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80036a6:	e0c3      	b.n	8003830 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a8:	bf00      	nop
    return;
 80036aa:	e0c1      	b.n	8003830 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	f040 80a1 	bne.w	80037f8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	f003 0310 	and.w	r3, r3, #16
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 809b 	beq.w	80037f8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8095 	beq.w	80037f8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d04e      	beq.n	8003790 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80036fc:	8a3b      	ldrh	r3, [r7, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 8098 	beq.w	8003834 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003708:	8a3a      	ldrh	r2, [r7, #16]
 800370a:	429a      	cmp	r2, r3
 800370c:	f080 8092 	bcs.w	8003834 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	8a3a      	ldrh	r2, [r7, #16]
 8003714:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	2b20      	cmp	r3, #32
 800371e:	d02b      	beq.n	8003778 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800372e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0210 	bic.w	r2, r2, #16
 800376c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe f803 	bl	800177e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003780:	b29b      	uxth	r3, r3
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	b29b      	uxth	r3, r3
 8003786:	4619      	mov	r1, r3
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f876 	bl	800387a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800378e:	e051      	b.n	8003834 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003798:	b29b      	uxth	r3, r3
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d047      	beq.n	8003838 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80037a8:	8a7b      	ldrh	r3, [r7, #18]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d044      	beq.n	8003838 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037bc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0201 	bic.w	r2, r2, #1
 80037cc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0210 	bic.w	r2, r2, #16
 80037ea:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037ec:	8a7b      	ldrh	r3, [r7, #18]
 80037ee:	4619      	mov	r1, r3
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f842 	bl	800387a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80037f6:	e01f      	b.n	8003838 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d008      	beq.n	8003814 <HAL_UART_IRQHandler+0x324>
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f8c9 	bl	80039a4 <UART_Transmit_IT>
    return;
 8003812:	e012      	b.n	800383a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00d      	beq.n	800383a <HAL_UART_IRQHandler+0x34a>
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f90a 	bl	8003a42 <UART_EndTransmit_IT>
    return;
 800382e:	e004      	b.n	800383a <HAL_UART_IRQHandler+0x34a>
    return;
 8003830:	bf00      	nop
 8003832:	e002      	b.n	800383a <HAL_UART_IRQHandler+0x34a>
      return;
 8003834:	bf00      	nop
 8003836:	e000      	b.n	800383a <HAL_UART_IRQHandler+0x34a>
      return;
 8003838:	bf00      	nop
  }
}
 800383a:	3728      	adds	r7, #40	; 0x28
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	0800397d 	.word	0x0800397d

08003844 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr

08003856 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr

08003868 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	460b      	mov	r3, r1
 8003884:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	4613      	mov	r3, r2
 800389e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a0:	e02c      	b.n	80038fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a8:	d028      	beq.n	80038fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d007      	beq.n	80038c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80038b0:	f7fd fe4e 	bl	8001550 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d21d      	bcs.n	80038fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695a      	ldr	r2, [r3, #20]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0201 	bic.w	r2, r2, #1
 80038de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e00f      	b.n	800391c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	4013      	ands	r3, r2
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	429a      	cmp	r2, r3
 800390a:	bf0c      	ite	eq
 800390c:	2301      	moveq	r3, #1
 800390e:	2300      	movne	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	461a      	mov	r2, r3
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	429a      	cmp	r2, r3
 8003918:	d0c3      	beq.n	80038a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800393a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695a      	ldr	r2, [r3, #20]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0201 	bic.w	r2, r2, #1
 800394a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003950:	2b01      	cmp	r3, #1
 8003952:	d107      	bne.n	8003964 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0210 	bic.w	r2, r2, #16
 8003962:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr

0800397c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f7ff ff66 	bl	8003868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800399c:	bf00      	nop
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b21      	cmp	r3, #33	; 0x21
 80039b6:	d13e      	bne.n	8003a36 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c0:	d114      	bne.n	80039ec <UART_Transmit_IT+0x48>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d110      	bne.n	80039ec <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	1c9a      	adds	r2, r3, #2
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	621a      	str	r2, [r3, #32]
 80039ea:	e008      	b.n	80039fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	1c59      	adds	r1, r3, #1
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6211      	str	r1, [r2, #32]
 80039f6:	781a      	ldrb	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10f      	bne.n	8003a32 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a20:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a30:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e000      	b.n	8003a38 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a36:	2302      	movs	r3, #2
  }
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr

08003a42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7ff feee 	bl	8003844 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b086      	sub	sp, #24
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b22      	cmp	r3, #34	; 0x22
 8003a84:	f040 8099 	bne.w	8003bba <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a90:	d117      	bne.n	8003ac2 <UART_Receive_IT+0x50>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d113      	bne.n	8003ac2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	1c9a      	adds	r2, r3, #2
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	629a      	str	r2, [r3, #40]	; 0x28
 8003ac0:	e026      	b.n	8003b10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad4:	d007      	beq.n	8003ae6 <UART_Receive_IT+0x74>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10a      	bne.n	8003af4 <UART_Receive_IT+0x82>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	701a      	strb	r2, [r3, #0]
 8003af2:	e008      	b.n	8003b06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d148      	bne.n	8003bb6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0220 	bic.w	r2, r2, #32
 8003b32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0201 	bic.w	r2, r2, #1
 8003b52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d123      	bne.n	8003bac <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0210 	bic.w	r2, r2, #16
 8003b78:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	2b10      	cmp	r3, #16
 8003b86:	d10a      	bne.n	8003b9e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff fe68 	bl	800387a <HAL_UARTEx_RxEventCallback>
 8003baa:	e002      	b.n	8003bb2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff fe52 	bl	8003856 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e002      	b.n	8003bbc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e000      	b.n	8003bbc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003bba:	2302      	movs	r3, #2
  }
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bfe:	f023 030c 	bic.w	r3, r3, #12
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6812      	ldr	r2, [r2, #0]
 8003c06:	68b9      	ldr	r1, [r7, #8]
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699a      	ldr	r2, [r3, #24]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a2c      	ldr	r2, [pc, #176]	; (8003cd8 <UART_SetConfig+0x114>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d103      	bne.n	8003c34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c2c:	f7fe fbf4 	bl	8002418 <HAL_RCC_GetPCLK2Freq>
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	e002      	b.n	8003c3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c34:	f7fe fbdc 	bl	80023f0 <HAL_RCC_GetPCLK1Freq>
 8003c38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	009a      	lsls	r2, r3, #2
 8003c44:	441a      	add	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c50:	4a22      	ldr	r2, [pc, #136]	; (8003cdc <UART_SetConfig+0x118>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	0119      	lsls	r1, r3, #4
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	009a      	lsls	r2, r3, #2
 8003c64:	441a      	add	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c70:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <UART_SetConfig+0x118>)
 8003c72:	fba3 0302 	umull	r0, r3, r3, r2
 8003c76:	095b      	lsrs	r3, r3, #5
 8003c78:	2064      	movs	r0, #100	; 0x64
 8003c7a:	fb00 f303 	mul.w	r3, r0, r3
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	3332      	adds	r3, #50	; 0x32
 8003c84:	4a15      	ldr	r2, [pc, #84]	; (8003cdc <UART_SetConfig+0x118>)
 8003c86:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c90:	4419      	add	r1, r3
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	009a      	lsls	r2, r3, #2
 8003c9c:	441a      	add	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <UART_SetConfig+0x118>)
 8003caa:	fba3 0302 	umull	r0, r3, r3, r2
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	2064      	movs	r0, #100	; 0x64
 8003cb2:	fb00 f303 	mul.w	r3, r0, r3
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	3332      	adds	r3, #50	; 0x32
 8003cbc:	4a07      	ldr	r2, [pc, #28]	; (8003cdc <UART_SetConfig+0x118>)
 8003cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	f003 020f 	and.w	r2, r3, #15
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	440a      	add	r2, r1
 8003cce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cd0:	bf00      	nop
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40013800 	.word	0x40013800
 8003cdc:	51eb851f 	.word	0x51eb851f

08003ce0 <__errno>:
 8003ce0:	4b01      	ldr	r3, [pc, #4]	; (8003ce8 <__errno+0x8>)
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	20000058 	.word	0x20000058

08003cec <__libc_init_array>:
 8003cec:	b570      	push	{r4, r5, r6, lr}
 8003cee:	2600      	movs	r6, #0
 8003cf0:	4d0c      	ldr	r5, [pc, #48]	; (8003d24 <__libc_init_array+0x38>)
 8003cf2:	4c0d      	ldr	r4, [pc, #52]	; (8003d28 <__libc_init_array+0x3c>)
 8003cf4:	1b64      	subs	r4, r4, r5
 8003cf6:	10a4      	asrs	r4, r4, #2
 8003cf8:	42a6      	cmp	r6, r4
 8003cfa:	d109      	bne.n	8003d10 <__libc_init_array+0x24>
 8003cfc:	f000 fc5c 	bl	80045b8 <_init>
 8003d00:	2600      	movs	r6, #0
 8003d02:	4d0a      	ldr	r5, [pc, #40]	; (8003d2c <__libc_init_array+0x40>)
 8003d04:	4c0a      	ldr	r4, [pc, #40]	; (8003d30 <__libc_init_array+0x44>)
 8003d06:	1b64      	subs	r4, r4, r5
 8003d08:	10a4      	asrs	r4, r4, #2
 8003d0a:	42a6      	cmp	r6, r4
 8003d0c:	d105      	bne.n	8003d1a <__libc_init_array+0x2e>
 8003d0e:	bd70      	pop	{r4, r5, r6, pc}
 8003d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d14:	4798      	blx	r3
 8003d16:	3601      	adds	r6, #1
 8003d18:	e7ee      	b.n	8003cf8 <__libc_init_array+0xc>
 8003d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d1e:	4798      	blx	r3
 8003d20:	3601      	adds	r6, #1
 8003d22:	e7f2      	b.n	8003d0a <__libc_init_array+0x1e>
 8003d24:	08004638 	.word	0x08004638
 8003d28:	08004638 	.word	0x08004638
 8003d2c:	08004638 	.word	0x08004638
 8003d30:	0800463c 	.word	0x0800463c

08003d34 <memset>:
 8003d34:	4603      	mov	r3, r0
 8003d36:	4402      	add	r2, r0
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d100      	bne.n	8003d3e <memset+0xa>
 8003d3c:	4770      	bx	lr
 8003d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d42:	e7f9      	b.n	8003d38 <memset+0x4>

08003d44 <siprintf>:
 8003d44:	b40e      	push	{r1, r2, r3}
 8003d46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d4a:	b500      	push	{lr}
 8003d4c:	b09c      	sub	sp, #112	; 0x70
 8003d4e:	ab1d      	add	r3, sp, #116	; 0x74
 8003d50:	9002      	str	r0, [sp, #8]
 8003d52:	9006      	str	r0, [sp, #24]
 8003d54:	9107      	str	r1, [sp, #28]
 8003d56:	9104      	str	r1, [sp, #16]
 8003d58:	4808      	ldr	r0, [pc, #32]	; (8003d7c <siprintf+0x38>)
 8003d5a:	4909      	ldr	r1, [pc, #36]	; (8003d80 <siprintf+0x3c>)
 8003d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d60:	9105      	str	r1, [sp, #20]
 8003d62:	6800      	ldr	r0, [r0, #0]
 8003d64:	a902      	add	r1, sp, #8
 8003d66:	9301      	str	r3, [sp, #4]
 8003d68:	f000 f868 	bl	8003e3c <_svfiprintf_r>
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	9b02      	ldr	r3, [sp, #8]
 8003d70:	701a      	strb	r2, [r3, #0]
 8003d72:	b01c      	add	sp, #112	; 0x70
 8003d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d78:	b003      	add	sp, #12
 8003d7a:	4770      	bx	lr
 8003d7c:	20000058 	.word	0x20000058
 8003d80:	ffff0208 	.word	0xffff0208

08003d84 <__ssputs_r>:
 8003d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d88:	688e      	ldr	r6, [r1, #8]
 8003d8a:	4682      	mov	sl, r0
 8003d8c:	429e      	cmp	r6, r3
 8003d8e:	460c      	mov	r4, r1
 8003d90:	4690      	mov	r8, r2
 8003d92:	461f      	mov	r7, r3
 8003d94:	d838      	bhi.n	8003e08 <__ssputs_r+0x84>
 8003d96:	898a      	ldrh	r2, [r1, #12]
 8003d98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d9c:	d032      	beq.n	8003e04 <__ssputs_r+0x80>
 8003d9e:	6825      	ldr	r5, [r4, #0]
 8003da0:	6909      	ldr	r1, [r1, #16]
 8003da2:	3301      	adds	r3, #1
 8003da4:	eba5 0901 	sub.w	r9, r5, r1
 8003da8:	6965      	ldr	r5, [r4, #20]
 8003daa:	444b      	add	r3, r9
 8003dac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003db0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003db4:	106d      	asrs	r5, r5, #1
 8003db6:	429d      	cmp	r5, r3
 8003db8:	bf38      	it	cc
 8003dba:	461d      	movcc	r5, r3
 8003dbc:	0553      	lsls	r3, r2, #21
 8003dbe:	d531      	bpl.n	8003e24 <__ssputs_r+0xa0>
 8003dc0:	4629      	mov	r1, r5
 8003dc2:	f000 fb53 	bl	800446c <_malloc_r>
 8003dc6:	4606      	mov	r6, r0
 8003dc8:	b950      	cbnz	r0, 8003de0 <__ssputs_r+0x5c>
 8003dca:	230c      	movs	r3, #12
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd0:	f8ca 3000 	str.w	r3, [sl]
 8003dd4:	89a3      	ldrh	r3, [r4, #12]
 8003dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dda:	81a3      	strh	r3, [r4, #12]
 8003ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de0:	464a      	mov	r2, r9
 8003de2:	6921      	ldr	r1, [r4, #16]
 8003de4:	f000 face 	bl	8004384 <memcpy>
 8003de8:	89a3      	ldrh	r3, [r4, #12]
 8003dea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df2:	81a3      	strh	r3, [r4, #12]
 8003df4:	6126      	str	r6, [r4, #16]
 8003df6:	444e      	add	r6, r9
 8003df8:	6026      	str	r6, [r4, #0]
 8003dfa:	463e      	mov	r6, r7
 8003dfc:	6165      	str	r5, [r4, #20]
 8003dfe:	eba5 0509 	sub.w	r5, r5, r9
 8003e02:	60a5      	str	r5, [r4, #8]
 8003e04:	42be      	cmp	r6, r7
 8003e06:	d900      	bls.n	8003e0a <__ssputs_r+0x86>
 8003e08:	463e      	mov	r6, r7
 8003e0a:	4632      	mov	r2, r6
 8003e0c:	4641      	mov	r1, r8
 8003e0e:	6820      	ldr	r0, [r4, #0]
 8003e10:	f000 fac6 	bl	80043a0 <memmove>
 8003e14:	68a3      	ldr	r3, [r4, #8]
 8003e16:	6822      	ldr	r2, [r4, #0]
 8003e18:	1b9b      	subs	r3, r3, r6
 8003e1a:	4432      	add	r2, r6
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	60a3      	str	r3, [r4, #8]
 8003e20:	6022      	str	r2, [r4, #0]
 8003e22:	e7db      	b.n	8003ddc <__ssputs_r+0x58>
 8003e24:	462a      	mov	r2, r5
 8003e26:	f000 fb7b 	bl	8004520 <_realloc_r>
 8003e2a:	4606      	mov	r6, r0
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d1e1      	bne.n	8003df4 <__ssputs_r+0x70>
 8003e30:	4650      	mov	r0, sl
 8003e32:	6921      	ldr	r1, [r4, #16]
 8003e34:	f000 face 	bl	80043d4 <_free_r>
 8003e38:	e7c7      	b.n	8003dca <__ssputs_r+0x46>
	...

08003e3c <_svfiprintf_r>:
 8003e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e40:	4698      	mov	r8, r3
 8003e42:	898b      	ldrh	r3, [r1, #12]
 8003e44:	4607      	mov	r7, r0
 8003e46:	061b      	lsls	r3, r3, #24
 8003e48:	460d      	mov	r5, r1
 8003e4a:	4614      	mov	r4, r2
 8003e4c:	b09d      	sub	sp, #116	; 0x74
 8003e4e:	d50e      	bpl.n	8003e6e <_svfiprintf_r+0x32>
 8003e50:	690b      	ldr	r3, [r1, #16]
 8003e52:	b963      	cbnz	r3, 8003e6e <_svfiprintf_r+0x32>
 8003e54:	2140      	movs	r1, #64	; 0x40
 8003e56:	f000 fb09 	bl	800446c <_malloc_r>
 8003e5a:	6028      	str	r0, [r5, #0]
 8003e5c:	6128      	str	r0, [r5, #16]
 8003e5e:	b920      	cbnz	r0, 8003e6a <_svfiprintf_r+0x2e>
 8003e60:	230c      	movs	r3, #12
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	f04f 30ff 	mov.w	r0, #4294967295
 8003e68:	e0d1      	b.n	800400e <_svfiprintf_r+0x1d2>
 8003e6a:	2340      	movs	r3, #64	; 0x40
 8003e6c:	616b      	str	r3, [r5, #20]
 8003e6e:	2300      	movs	r3, #0
 8003e70:	9309      	str	r3, [sp, #36]	; 0x24
 8003e72:	2320      	movs	r3, #32
 8003e74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e78:	2330      	movs	r3, #48	; 0x30
 8003e7a:	f04f 0901 	mov.w	r9, #1
 8003e7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004028 <_svfiprintf_r+0x1ec>
 8003e86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e8a:	4623      	mov	r3, r4
 8003e8c:	469a      	mov	sl, r3
 8003e8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e92:	b10a      	cbz	r2, 8003e98 <_svfiprintf_r+0x5c>
 8003e94:	2a25      	cmp	r2, #37	; 0x25
 8003e96:	d1f9      	bne.n	8003e8c <_svfiprintf_r+0x50>
 8003e98:	ebba 0b04 	subs.w	fp, sl, r4
 8003e9c:	d00b      	beq.n	8003eb6 <_svfiprintf_r+0x7a>
 8003e9e:	465b      	mov	r3, fp
 8003ea0:	4622      	mov	r2, r4
 8003ea2:	4629      	mov	r1, r5
 8003ea4:	4638      	mov	r0, r7
 8003ea6:	f7ff ff6d 	bl	8003d84 <__ssputs_r>
 8003eaa:	3001      	adds	r0, #1
 8003eac:	f000 80aa 	beq.w	8004004 <_svfiprintf_r+0x1c8>
 8003eb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003eb2:	445a      	add	r2, fp
 8003eb4:	9209      	str	r2, [sp, #36]	; 0x24
 8003eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80a2 	beq.w	8004004 <_svfiprintf_r+0x1c8>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eca:	f10a 0a01 	add.w	sl, sl, #1
 8003ece:	9304      	str	r3, [sp, #16]
 8003ed0:	9307      	str	r3, [sp, #28]
 8003ed2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ed6:	931a      	str	r3, [sp, #104]	; 0x68
 8003ed8:	4654      	mov	r4, sl
 8003eda:	2205      	movs	r2, #5
 8003edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ee0:	4851      	ldr	r0, [pc, #324]	; (8004028 <_svfiprintf_r+0x1ec>)
 8003ee2:	f000 fa41 	bl	8004368 <memchr>
 8003ee6:	9a04      	ldr	r2, [sp, #16]
 8003ee8:	b9d8      	cbnz	r0, 8003f22 <_svfiprintf_r+0xe6>
 8003eea:	06d0      	lsls	r0, r2, #27
 8003eec:	bf44      	itt	mi
 8003eee:	2320      	movmi	r3, #32
 8003ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ef4:	0711      	lsls	r1, r2, #28
 8003ef6:	bf44      	itt	mi
 8003ef8:	232b      	movmi	r3, #43	; 0x2b
 8003efa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003efe:	f89a 3000 	ldrb.w	r3, [sl]
 8003f02:	2b2a      	cmp	r3, #42	; 0x2a
 8003f04:	d015      	beq.n	8003f32 <_svfiprintf_r+0xf6>
 8003f06:	4654      	mov	r4, sl
 8003f08:	2000      	movs	r0, #0
 8003f0a:	f04f 0c0a 	mov.w	ip, #10
 8003f0e:	9a07      	ldr	r2, [sp, #28]
 8003f10:	4621      	mov	r1, r4
 8003f12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f16:	3b30      	subs	r3, #48	; 0x30
 8003f18:	2b09      	cmp	r3, #9
 8003f1a:	d94e      	bls.n	8003fba <_svfiprintf_r+0x17e>
 8003f1c:	b1b0      	cbz	r0, 8003f4c <_svfiprintf_r+0x110>
 8003f1e:	9207      	str	r2, [sp, #28]
 8003f20:	e014      	b.n	8003f4c <_svfiprintf_r+0x110>
 8003f22:	eba0 0308 	sub.w	r3, r0, r8
 8003f26:	fa09 f303 	lsl.w	r3, r9, r3
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	46a2      	mov	sl, r4
 8003f2e:	9304      	str	r3, [sp, #16]
 8003f30:	e7d2      	b.n	8003ed8 <_svfiprintf_r+0x9c>
 8003f32:	9b03      	ldr	r3, [sp, #12]
 8003f34:	1d19      	adds	r1, r3, #4
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	9103      	str	r1, [sp, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	bfbb      	ittet	lt
 8003f3e:	425b      	neglt	r3, r3
 8003f40:	f042 0202 	orrlt.w	r2, r2, #2
 8003f44:	9307      	strge	r3, [sp, #28]
 8003f46:	9307      	strlt	r3, [sp, #28]
 8003f48:	bfb8      	it	lt
 8003f4a:	9204      	strlt	r2, [sp, #16]
 8003f4c:	7823      	ldrb	r3, [r4, #0]
 8003f4e:	2b2e      	cmp	r3, #46	; 0x2e
 8003f50:	d10c      	bne.n	8003f6c <_svfiprintf_r+0x130>
 8003f52:	7863      	ldrb	r3, [r4, #1]
 8003f54:	2b2a      	cmp	r3, #42	; 0x2a
 8003f56:	d135      	bne.n	8003fc4 <_svfiprintf_r+0x188>
 8003f58:	9b03      	ldr	r3, [sp, #12]
 8003f5a:	3402      	adds	r4, #2
 8003f5c:	1d1a      	adds	r2, r3, #4
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	9203      	str	r2, [sp, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	bfb8      	it	lt
 8003f66:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f6a:	9305      	str	r3, [sp, #20]
 8003f6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004038 <_svfiprintf_r+0x1fc>
 8003f70:	2203      	movs	r2, #3
 8003f72:	4650      	mov	r0, sl
 8003f74:	7821      	ldrb	r1, [r4, #0]
 8003f76:	f000 f9f7 	bl	8004368 <memchr>
 8003f7a:	b140      	cbz	r0, 8003f8e <_svfiprintf_r+0x152>
 8003f7c:	2340      	movs	r3, #64	; 0x40
 8003f7e:	eba0 000a 	sub.w	r0, r0, sl
 8003f82:	fa03 f000 	lsl.w	r0, r3, r0
 8003f86:	9b04      	ldr	r3, [sp, #16]
 8003f88:	3401      	adds	r4, #1
 8003f8a:	4303      	orrs	r3, r0
 8003f8c:	9304      	str	r3, [sp, #16]
 8003f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f92:	2206      	movs	r2, #6
 8003f94:	4825      	ldr	r0, [pc, #148]	; (800402c <_svfiprintf_r+0x1f0>)
 8003f96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f9a:	f000 f9e5 	bl	8004368 <memchr>
 8003f9e:	2800      	cmp	r0, #0
 8003fa0:	d038      	beq.n	8004014 <_svfiprintf_r+0x1d8>
 8003fa2:	4b23      	ldr	r3, [pc, #140]	; (8004030 <_svfiprintf_r+0x1f4>)
 8003fa4:	bb1b      	cbnz	r3, 8003fee <_svfiprintf_r+0x1b2>
 8003fa6:	9b03      	ldr	r3, [sp, #12]
 8003fa8:	3307      	adds	r3, #7
 8003faa:	f023 0307 	bic.w	r3, r3, #7
 8003fae:	3308      	adds	r3, #8
 8003fb0:	9303      	str	r3, [sp, #12]
 8003fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fb4:	4433      	add	r3, r6
 8003fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8003fb8:	e767      	b.n	8003e8a <_svfiprintf_r+0x4e>
 8003fba:	460c      	mov	r4, r1
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fc2:	e7a5      	b.n	8003f10 <_svfiprintf_r+0xd4>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f04f 0c0a 	mov.w	ip, #10
 8003fca:	4619      	mov	r1, r3
 8003fcc:	3401      	adds	r4, #1
 8003fce:	9305      	str	r3, [sp, #20]
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fd6:	3a30      	subs	r2, #48	; 0x30
 8003fd8:	2a09      	cmp	r2, #9
 8003fda:	d903      	bls.n	8003fe4 <_svfiprintf_r+0x1a8>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0c5      	beq.n	8003f6c <_svfiprintf_r+0x130>
 8003fe0:	9105      	str	r1, [sp, #20]
 8003fe2:	e7c3      	b.n	8003f6c <_svfiprintf_r+0x130>
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fec:	e7f0      	b.n	8003fd0 <_svfiprintf_r+0x194>
 8003fee:	ab03      	add	r3, sp, #12
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	462a      	mov	r2, r5
 8003ff4:	4638      	mov	r0, r7
 8003ff6:	4b0f      	ldr	r3, [pc, #60]	; (8004034 <_svfiprintf_r+0x1f8>)
 8003ff8:	a904      	add	r1, sp, #16
 8003ffa:	f3af 8000 	nop.w
 8003ffe:	1c42      	adds	r2, r0, #1
 8004000:	4606      	mov	r6, r0
 8004002:	d1d6      	bne.n	8003fb2 <_svfiprintf_r+0x176>
 8004004:	89ab      	ldrh	r3, [r5, #12]
 8004006:	065b      	lsls	r3, r3, #25
 8004008:	f53f af2c 	bmi.w	8003e64 <_svfiprintf_r+0x28>
 800400c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800400e:	b01d      	add	sp, #116	; 0x74
 8004010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004014:	ab03      	add	r3, sp, #12
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	462a      	mov	r2, r5
 800401a:	4638      	mov	r0, r7
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <_svfiprintf_r+0x1f8>)
 800401e:	a904      	add	r1, sp, #16
 8004020:	f000 f87c 	bl	800411c <_printf_i>
 8004024:	e7eb      	b.n	8003ffe <_svfiprintf_r+0x1c2>
 8004026:	bf00      	nop
 8004028:	08004604 	.word	0x08004604
 800402c:	0800460e 	.word	0x0800460e
 8004030:	00000000 	.word	0x00000000
 8004034:	08003d85 	.word	0x08003d85
 8004038:	0800460a 	.word	0x0800460a

0800403c <_printf_common>:
 800403c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004040:	4616      	mov	r6, r2
 8004042:	4699      	mov	r9, r3
 8004044:	688a      	ldr	r2, [r1, #8]
 8004046:	690b      	ldr	r3, [r1, #16]
 8004048:	4607      	mov	r7, r0
 800404a:	4293      	cmp	r3, r2
 800404c:	bfb8      	it	lt
 800404e:	4613      	movlt	r3, r2
 8004050:	6033      	str	r3, [r6, #0]
 8004052:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004056:	460c      	mov	r4, r1
 8004058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800405c:	b10a      	cbz	r2, 8004062 <_printf_common+0x26>
 800405e:	3301      	adds	r3, #1
 8004060:	6033      	str	r3, [r6, #0]
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	0699      	lsls	r1, r3, #26
 8004066:	bf42      	ittt	mi
 8004068:	6833      	ldrmi	r3, [r6, #0]
 800406a:	3302      	addmi	r3, #2
 800406c:	6033      	strmi	r3, [r6, #0]
 800406e:	6825      	ldr	r5, [r4, #0]
 8004070:	f015 0506 	ands.w	r5, r5, #6
 8004074:	d106      	bne.n	8004084 <_printf_common+0x48>
 8004076:	f104 0a19 	add.w	sl, r4, #25
 800407a:	68e3      	ldr	r3, [r4, #12]
 800407c:	6832      	ldr	r2, [r6, #0]
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	42ab      	cmp	r3, r5
 8004082:	dc28      	bgt.n	80040d6 <_printf_common+0x9a>
 8004084:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004088:	1e13      	subs	r3, r2, #0
 800408a:	6822      	ldr	r2, [r4, #0]
 800408c:	bf18      	it	ne
 800408e:	2301      	movne	r3, #1
 8004090:	0692      	lsls	r2, r2, #26
 8004092:	d42d      	bmi.n	80040f0 <_printf_common+0xb4>
 8004094:	4649      	mov	r1, r9
 8004096:	4638      	mov	r0, r7
 8004098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800409c:	47c0      	blx	r8
 800409e:	3001      	adds	r0, #1
 80040a0:	d020      	beq.n	80040e4 <_printf_common+0xa8>
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	68e5      	ldr	r5, [r4, #12]
 80040a6:	f003 0306 	and.w	r3, r3, #6
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	bf18      	it	ne
 80040ae:	2500      	movne	r5, #0
 80040b0:	6832      	ldr	r2, [r6, #0]
 80040b2:	f04f 0600 	mov.w	r6, #0
 80040b6:	68a3      	ldr	r3, [r4, #8]
 80040b8:	bf08      	it	eq
 80040ba:	1aad      	subeq	r5, r5, r2
 80040bc:	6922      	ldr	r2, [r4, #16]
 80040be:	bf08      	it	eq
 80040c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040c4:	4293      	cmp	r3, r2
 80040c6:	bfc4      	itt	gt
 80040c8:	1a9b      	subgt	r3, r3, r2
 80040ca:	18ed      	addgt	r5, r5, r3
 80040cc:	341a      	adds	r4, #26
 80040ce:	42b5      	cmp	r5, r6
 80040d0:	d11a      	bne.n	8004108 <_printf_common+0xcc>
 80040d2:	2000      	movs	r0, #0
 80040d4:	e008      	b.n	80040e8 <_printf_common+0xac>
 80040d6:	2301      	movs	r3, #1
 80040d8:	4652      	mov	r2, sl
 80040da:	4649      	mov	r1, r9
 80040dc:	4638      	mov	r0, r7
 80040de:	47c0      	blx	r8
 80040e0:	3001      	adds	r0, #1
 80040e2:	d103      	bne.n	80040ec <_printf_common+0xb0>
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295
 80040e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ec:	3501      	adds	r5, #1
 80040ee:	e7c4      	b.n	800407a <_printf_common+0x3e>
 80040f0:	2030      	movs	r0, #48	; 0x30
 80040f2:	18e1      	adds	r1, r4, r3
 80040f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040fe:	4422      	add	r2, r4
 8004100:	3302      	adds	r3, #2
 8004102:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004106:	e7c5      	b.n	8004094 <_printf_common+0x58>
 8004108:	2301      	movs	r3, #1
 800410a:	4622      	mov	r2, r4
 800410c:	4649      	mov	r1, r9
 800410e:	4638      	mov	r0, r7
 8004110:	47c0      	blx	r8
 8004112:	3001      	adds	r0, #1
 8004114:	d0e6      	beq.n	80040e4 <_printf_common+0xa8>
 8004116:	3601      	adds	r6, #1
 8004118:	e7d9      	b.n	80040ce <_printf_common+0x92>
	...

0800411c <_printf_i>:
 800411c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004120:	460c      	mov	r4, r1
 8004122:	7e27      	ldrb	r7, [r4, #24]
 8004124:	4691      	mov	r9, r2
 8004126:	2f78      	cmp	r7, #120	; 0x78
 8004128:	4680      	mov	r8, r0
 800412a:	469a      	mov	sl, r3
 800412c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800412e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004132:	d807      	bhi.n	8004144 <_printf_i+0x28>
 8004134:	2f62      	cmp	r7, #98	; 0x62
 8004136:	d80a      	bhi.n	800414e <_printf_i+0x32>
 8004138:	2f00      	cmp	r7, #0
 800413a:	f000 80d9 	beq.w	80042f0 <_printf_i+0x1d4>
 800413e:	2f58      	cmp	r7, #88	; 0x58
 8004140:	f000 80a4 	beq.w	800428c <_printf_i+0x170>
 8004144:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800414c:	e03a      	b.n	80041c4 <_printf_i+0xa8>
 800414e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004152:	2b15      	cmp	r3, #21
 8004154:	d8f6      	bhi.n	8004144 <_printf_i+0x28>
 8004156:	a001      	add	r0, pc, #4	; (adr r0, 800415c <_printf_i+0x40>)
 8004158:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800415c:	080041b5 	.word	0x080041b5
 8004160:	080041c9 	.word	0x080041c9
 8004164:	08004145 	.word	0x08004145
 8004168:	08004145 	.word	0x08004145
 800416c:	08004145 	.word	0x08004145
 8004170:	08004145 	.word	0x08004145
 8004174:	080041c9 	.word	0x080041c9
 8004178:	08004145 	.word	0x08004145
 800417c:	08004145 	.word	0x08004145
 8004180:	08004145 	.word	0x08004145
 8004184:	08004145 	.word	0x08004145
 8004188:	080042d7 	.word	0x080042d7
 800418c:	080041f9 	.word	0x080041f9
 8004190:	080042b9 	.word	0x080042b9
 8004194:	08004145 	.word	0x08004145
 8004198:	08004145 	.word	0x08004145
 800419c:	080042f9 	.word	0x080042f9
 80041a0:	08004145 	.word	0x08004145
 80041a4:	080041f9 	.word	0x080041f9
 80041a8:	08004145 	.word	0x08004145
 80041ac:	08004145 	.word	0x08004145
 80041b0:	080042c1 	.word	0x080042c1
 80041b4:	680b      	ldr	r3, [r1, #0]
 80041b6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041ba:	1d1a      	adds	r2, r3, #4
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	600a      	str	r2, [r1, #0]
 80041c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0a4      	b.n	8004312 <_printf_i+0x1f6>
 80041c8:	6825      	ldr	r5, [r4, #0]
 80041ca:	6808      	ldr	r0, [r1, #0]
 80041cc:	062e      	lsls	r6, r5, #24
 80041ce:	f100 0304 	add.w	r3, r0, #4
 80041d2:	d50a      	bpl.n	80041ea <_printf_i+0xce>
 80041d4:	6805      	ldr	r5, [r0, #0]
 80041d6:	600b      	str	r3, [r1, #0]
 80041d8:	2d00      	cmp	r5, #0
 80041da:	da03      	bge.n	80041e4 <_printf_i+0xc8>
 80041dc:	232d      	movs	r3, #45	; 0x2d
 80041de:	426d      	negs	r5, r5
 80041e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e4:	230a      	movs	r3, #10
 80041e6:	485e      	ldr	r0, [pc, #376]	; (8004360 <_printf_i+0x244>)
 80041e8:	e019      	b.n	800421e <_printf_i+0x102>
 80041ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80041ee:	6805      	ldr	r5, [r0, #0]
 80041f0:	600b      	str	r3, [r1, #0]
 80041f2:	bf18      	it	ne
 80041f4:	b22d      	sxthne	r5, r5
 80041f6:	e7ef      	b.n	80041d8 <_printf_i+0xbc>
 80041f8:	680b      	ldr	r3, [r1, #0]
 80041fa:	6825      	ldr	r5, [r4, #0]
 80041fc:	1d18      	adds	r0, r3, #4
 80041fe:	6008      	str	r0, [r1, #0]
 8004200:	0628      	lsls	r0, r5, #24
 8004202:	d501      	bpl.n	8004208 <_printf_i+0xec>
 8004204:	681d      	ldr	r5, [r3, #0]
 8004206:	e002      	b.n	800420e <_printf_i+0xf2>
 8004208:	0669      	lsls	r1, r5, #25
 800420a:	d5fb      	bpl.n	8004204 <_printf_i+0xe8>
 800420c:	881d      	ldrh	r5, [r3, #0]
 800420e:	2f6f      	cmp	r7, #111	; 0x6f
 8004210:	bf0c      	ite	eq
 8004212:	2308      	moveq	r3, #8
 8004214:	230a      	movne	r3, #10
 8004216:	4852      	ldr	r0, [pc, #328]	; (8004360 <_printf_i+0x244>)
 8004218:	2100      	movs	r1, #0
 800421a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800421e:	6866      	ldr	r6, [r4, #4]
 8004220:	2e00      	cmp	r6, #0
 8004222:	bfa8      	it	ge
 8004224:	6821      	ldrge	r1, [r4, #0]
 8004226:	60a6      	str	r6, [r4, #8]
 8004228:	bfa4      	itt	ge
 800422a:	f021 0104 	bicge.w	r1, r1, #4
 800422e:	6021      	strge	r1, [r4, #0]
 8004230:	b90d      	cbnz	r5, 8004236 <_printf_i+0x11a>
 8004232:	2e00      	cmp	r6, #0
 8004234:	d04d      	beq.n	80042d2 <_printf_i+0x1b6>
 8004236:	4616      	mov	r6, r2
 8004238:	fbb5 f1f3 	udiv	r1, r5, r3
 800423c:	fb03 5711 	mls	r7, r3, r1, r5
 8004240:	5dc7      	ldrb	r7, [r0, r7]
 8004242:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004246:	462f      	mov	r7, r5
 8004248:	42bb      	cmp	r3, r7
 800424a:	460d      	mov	r5, r1
 800424c:	d9f4      	bls.n	8004238 <_printf_i+0x11c>
 800424e:	2b08      	cmp	r3, #8
 8004250:	d10b      	bne.n	800426a <_printf_i+0x14e>
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	07df      	lsls	r7, r3, #31
 8004256:	d508      	bpl.n	800426a <_printf_i+0x14e>
 8004258:	6923      	ldr	r3, [r4, #16]
 800425a:	6861      	ldr	r1, [r4, #4]
 800425c:	4299      	cmp	r1, r3
 800425e:	bfde      	ittt	le
 8004260:	2330      	movle	r3, #48	; 0x30
 8004262:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004266:	f106 36ff 	addle.w	r6, r6, #4294967295
 800426a:	1b92      	subs	r2, r2, r6
 800426c:	6122      	str	r2, [r4, #16]
 800426e:	464b      	mov	r3, r9
 8004270:	4621      	mov	r1, r4
 8004272:	4640      	mov	r0, r8
 8004274:	f8cd a000 	str.w	sl, [sp]
 8004278:	aa03      	add	r2, sp, #12
 800427a:	f7ff fedf 	bl	800403c <_printf_common>
 800427e:	3001      	adds	r0, #1
 8004280:	d14c      	bne.n	800431c <_printf_i+0x200>
 8004282:	f04f 30ff 	mov.w	r0, #4294967295
 8004286:	b004      	add	sp, #16
 8004288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800428c:	4834      	ldr	r0, [pc, #208]	; (8004360 <_printf_i+0x244>)
 800428e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004292:	680e      	ldr	r6, [r1, #0]
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	f856 5b04 	ldr.w	r5, [r6], #4
 800429a:	061f      	lsls	r7, r3, #24
 800429c:	600e      	str	r6, [r1, #0]
 800429e:	d514      	bpl.n	80042ca <_printf_i+0x1ae>
 80042a0:	07d9      	lsls	r1, r3, #31
 80042a2:	bf44      	itt	mi
 80042a4:	f043 0320 	orrmi.w	r3, r3, #32
 80042a8:	6023      	strmi	r3, [r4, #0]
 80042aa:	b91d      	cbnz	r5, 80042b4 <_printf_i+0x198>
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	f023 0320 	bic.w	r3, r3, #32
 80042b2:	6023      	str	r3, [r4, #0]
 80042b4:	2310      	movs	r3, #16
 80042b6:	e7af      	b.n	8004218 <_printf_i+0xfc>
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	f043 0320 	orr.w	r3, r3, #32
 80042be:	6023      	str	r3, [r4, #0]
 80042c0:	2378      	movs	r3, #120	; 0x78
 80042c2:	4828      	ldr	r0, [pc, #160]	; (8004364 <_printf_i+0x248>)
 80042c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042c8:	e7e3      	b.n	8004292 <_printf_i+0x176>
 80042ca:	065e      	lsls	r6, r3, #25
 80042cc:	bf48      	it	mi
 80042ce:	b2ad      	uxthmi	r5, r5
 80042d0:	e7e6      	b.n	80042a0 <_printf_i+0x184>
 80042d2:	4616      	mov	r6, r2
 80042d4:	e7bb      	b.n	800424e <_printf_i+0x132>
 80042d6:	680b      	ldr	r3, [r1, #0]
 80042d8:	6826      	ldr	r6, [r4, #0]
 80042da:	1d1d      	adds	r5, r3, #4
 80042dc:	6960      	ldr	r0, [r4, #20]
 80042de:	600d      	str	r5, [r1, #0]
 80042e0:	0635      	lsls	r5, r6, #24
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	d501      	bpl.n	80042ea <_printf_i+0x1ce>
 80042e6:	6018      	str	r0, [r3, #0]
 80042e8:	e002      	b.n	80042f0 <_printf_i+0x1d4>
 80042ea:	0671      	lsls	r1, r6, #25
 80042ec:	d5fb      	bpl.n	80042e6 <_printf_i+0x1ca>
 80042ee:	8018      	strh	r0, [r3, #0]
 80042f0:	2300      	movs	r3, #0
 80042f2:	4616      	mov	r6, r2
 80042f4:	6123      	str	r3, [r4, #16]
 80042f6:	e7ba      	b.n	800426e <_printf_i+0x152>
 80042f8:	680b      	ldr	r3, [r1, #0]
 80042fa:	1d1a      	adds	r2, r3, #4
 80042fc:	600a      	str	r2, [r1, #0]
 80042fe:	681e      	ldr	r6, [r3, #0]
 8004300:	2100      	movs	r1, #0
 8004302:	4630      	mov	r0, r6
 8004304:	6862      	ldr	r2, [r4, #4]
 8004306:	f000 f82f 	bl	8004368 <memchr>
 800430a:	b108      	cbz	r0, 8004310 <_printf_i+0x1f4>
 800430c:	1b80      	subs	r0, r0, r6
 800430e:	6060      	str	r0, [r4, #4]
 8004310:	6863      	ldr	r3, [r4, #4]
 8004312:	6123      	str	r3, [r4, #16]
 8004314:	2300      	movs	r3, #0
 8004316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800431a:	e7a8      	b.n	800426e <_printf_i+0x152>
 800431c:	4632      	mov	r2, r6
 800431e:	4649      	mov	r1, r9
 8004320:	4640      	mov	r0, r8
 8004322:	6923      	ldr	r3, [r4, #16]
 8004324:	47d0      	blx	sl
 8004326:	3001      	adds	r0, #1
 8004328:	d0ab      	beq.n	8004282 <_printf_i+0x166>
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	079b      	lsls	r3, r3, #30
 800432e:	d413      	bmi.n	8004358 <_printf_i+0x23c>
 8004330:	68e0      	ldr	r0, [r4, #12]
 8004332:	9b03      	ldr	r3, [sp, #12]
 8004334:	4298      	cmp	r0, r3
 8004336:	bfb8      	it	lt
 8004338:	4618      	movlt	r0, r3
 800433a:	e7a4      	b.n	8004286 <_printf_i+0x16a>
 800433c:	2301      	movs	r3, #1
 800433e:	4632      	mov	r2, r6
 8004340:	4649      	mov	r1, r9
 8004342:	4640      	mov	r0, r8
 8004344:	47d0      	blx	sl
 8004346:	3001      	adds	r0, #1
 8004348:	d09b      	beq.n	8004282 <_printf_i+0x166>
 800434a:	3501      	adds	r5, #1
 800434c:	68e3      	ldr	r3, [r4, #12]
 800434e:	9903      	ldr	r1, [sp, #12]
 8004350:	1a5b      	subs	r3, r3, r1
 8004352:	42ab      	cmp	r3, r5
 8004354:	dcf2      	bgt.n	800433c <_printf_i+0x220>
 8004356:	e7eb      	b.n	8004330 <_printf_i+0x214>
 8004358:	2500      	movs	r5, #0
 800435a:	f104 0619 	add.w	r6, r4, #25
 800435e:	e7f5      	b.n	800434c <_printf_i+0x230>
 8004360:	08004615 	.word	0x08004615
 8004364:	08004626 	.word	0x08004626

08004368 <memchr>:
 8004368:	4603      	mov	r3, r0
 800436a:	b510      	push	{r4, lr}
 800436c:	b2c9      	uxtb	r1, r1
 800436e:	4402      	add	r2, r0
 8004370:	4293      	cmp	r3, r2
 8004372:	4618      	mov	r0, r3
 8004374:	d101      	bne.n	800437a <memchr+0x12>
 8004376:	2000      	movs	r0, #0
 8004378:	e003      	b.n	8004382 <memchr+0x1a>
 800437a:	7804      	ldrb	r4, [r0, #0]
 800437c:	3301      	adds	r3, #1
 800437e:	428c      	cmp	r4, r1
 8004380:	d1f6      	bne.n	8004370 <memchr+0x8>
 8004382:	bd10      	pop	{r4, pc}

08004384 <memcpy>:
 8004384:	440a      	add	r2, r1
 8004386:	4291      	cmp	r1, r2
 8004388:	f100 33ff 	add.w	r3, r0, #4294967295
 800438c:	d100      	bne.n	8004390 <memcpy+0xc>
 800438e:	4770      	bx	lr
 8004390:	b510      	push	{r4, lr}
 8004392:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004396:	4291      	cmp	r1, r2
 8004398:	f803 4f01 	strb.w	r4, [r3, #1]!
 800439c:	d1f9      	bne.n	8004392 <memcpy+0xe>
 800439e:	bd10      	pop	{r4, pc}

080043a0 <memmove>:
 80043a0:	4288      	cmp	r0, r1
 80043a2:	b510      	push	{r4, lr}
 80043a4:	eb01 0402 	add.w	r4, r1, r2
 80043a8:	d902      	bls.n	80043b0 <memmove+0x10>
 80043aa:	4284      	cmp	r4, r0
 80043ac:	4623      	mov	r3, r4
 80043ae:	d807      	bhi.n	80043c0 <memmove+0x20>
 80043b0:	1e43      	subs	r3, r0, #1
 80043b2:	42a1      	cmp	r1, r4
 80043b4:	d008      	beq.n	80043c8 <memmove+0x28>
 80043b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043be:	e7f8      	b.n	80043b2 <memmove+0x12>
 80043c0:	4601      	mov	r1, r0
 80043c2:	4402      	add	r2, r0
 80043c4:	428a      	cmp	r2, r1
 80043c6:	d100      	bne.n	80043ca <memmove+0x2a>
 80043c8:	bd10      	pop	{r4, pc}
 80043ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043d2:	e7f7      	b.n	80043c4 <memmove+0x24>

080043d4 <_free_r>:
 80043d4:	b538      	push	{r3, r4, r5, lr}
 80043d6:	4605      	mov	r5, r0
 80043d8:	2900      	cmp	r1, #0
 80043da:	d043      	beq.n	8004464 <_free_r+0x90>
 80043dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043e0:	1f0c      	subs	r4, r1, #4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	bfb8      	it	lt
 80043e6:	18e4      	addlt	r4, r4, r3
 80043e8:	f000 f8d0 	bl	800458c <__malloc_lock>
 80043ec:	4a1e      	ldr	r2, [pc, #120]	; (8004468 <_free_r+0x94>)
 80043ee:	6813      	ldr	r3, [r2, #0]
 80043f0:	4610      	mov	r0, r2
 80043f2:	b933      	cbnz	r3, 8004402 <_free_r+0x2e>
 80043f4:	6063      	str	r3, [r4, #4]
 80043f6:	6014      	str	r4, [r2, #0]
 80043f8:	4628      	mov	r0, r5
 80043fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043fe:	f000 b8cb 	b.w	8004598 <__malloc_unlock>
 8004402:	42a3      	cmp	r3, r4
 8004404:	d90a      	bls.n	800441c <_free_r+0x48>
 8004406:	6821      	ldr	r1, [r4, #0]
 8004408:	1862      	adds	r2, r4, r1
 800440a:	4293      	cmp	r3, r2
 800440c:	bf01      	itttt	eq
 800440e:	681a      	ldreq	r2, [r3, #0]
 8004410:	685b      	ldreq	r3, [r3, #4]
 8004412:	1852      	addeq	r2, r2, r1
 8004414:	6022      	streq	r2, [r4, #0]
 8004416:	6063      	str	r3, [r4, #4]
 8004418:	6004      	str	r4, [r0, #0]
 800441a:	e7ed      	b.n	80043f8 <_free_r+0x24>
 800441c:	461a      	mov	r2, r3
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	b10b      	cbz	r3, 8004426 <_free_r+0x52>
 8004422:	42a3      	cmp	r3, r4
 8004424:	d9fa      	bls.n	800441c <_free_r+0x48>
 8004426:	6811      	ldr	r1, [r2, #0]
 8004428:	1850      	adds	r0, r2, r1
 800442a:	42a0      	cmp	r0, r4
 800442c:	d10b      	bne.n	8004446 <_free_r+0x72>
 800442e:	6820      	ldr	r0, [r4, #0]
 8004430:	4401      	add	r1, r0
 8004432:	1850      	adds	r0, r2, r1
 8004434:	4283      	cmp	r3, r0
 8004436:	6011      	str	r1, [r2, #0]
 8004438:	d1de      	bne.n	80043f8 <_free_r+0x24>
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	4401      	add	r1, r0
 8004440:	6011      	str	r1, [r2, #0]
 8004442:	6053      	str	r3, [r2, #4]
 8004444:	e7d8      	b.n	80043f8 <_free_r+0x24>
 8004446:	d902      	bls.n	800444e <_free_r+0x7a>
 8004448:	230c      	movs	r3, #12
 800444a:	602b      	str	r3, [r5, #0]
 800444c:	e7d4      	b.n	80043f8 <_free_r+0x24>
 800444e:	6820      	ldr	r0, [r4, #0]
 8004450:	1821      	adds	r1, r4, r0
 8004452:	428b      	cmp	r3, r1
 8004454:	bf01      	itttt	eq
 8004456:	6819      	ldreq	r1, [r3, #0]
 8004458:	685b      	ldreq	r3, [r3, #4]
 800445a:	1809      	addeq	r1, r1, r0
 800445c:	6021      	streq	r1, [r4, #0]
 800445e:	6063      	str	r3, [r4, #4]
 8004460:	6054      	str	r4, [r2, #4]
 8004462:	e7c9      	b.n	80043f8 <_free_r+0x24>
 8004464:	bd38      	pop	{r3, r4, r5, pc}
 8004466:	bf00      	nop
 8004468:	20000140 	.word	0x20000140

0800446c <_malloc_r>:
 800446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446e:	1ccd      	adds	r5, r1, #3
 8004470:	f025 0503 	bic.w	r5, r5, #3
 8004474:	3508      	adds	r5, #8
 8004476:	2d0c      	cmp	r5, #12
 8004478:	bf38      	it	cc
 800447a:	250c      	movcc	r5, #12
 800447c:	2d00      	cmp	r5, #0
 800447e:	4606      	mov	r6, r0
 8004480:	db01      	blt.n	8004486 <_malloc_r+0x1a>
 8004482:	42a9      	cmp	r1, r5
 8004484:	d903      	bls.n	800448e <_malloc_r+0x22>
 8004486:	230c      	movs	r3, #12
 8004488:	6033      	str	r3, [r6, #0]
 800448a:	2000      	movs	r0, #0
 800448c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800448e:	f000 f87d 	bl	800458c <__malloc_lock>
 8004492:	4921      	ldr	r1, [pc, #132]	; (8004518 <_malloc_r+0xac>)
 8004494:	680a      	ldr	r2, [r1, #0]
 8004496:	4614      	mov	r4, r2
 8004498:	b99c      	cbnz	r4, 80044c2 <_malloc_r+0x56>
 800449a:	4f20      	ldr	r7, [pc, #128]	; (800451c <_malloc_r+0xb0>)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	b923      	cbnz	r3, 80044aa <_malloc_r+0x3e>
 80044a0:	4621      	mov	r1, r4
 80044a2:	4630      	mov	r0, r6
 80044a4:	f000 f862 	bl	800456c <_sbrk_r>
 80044a8:	6038      	str	r0, [r7, #0]
 80044aa:	4629      	mov	r1, r5
 80044ac:	4630      	mov	r0, r6
 80044ae:	f000 f85d 	bl	800456c <_sbrk_r>
 80044b2:	1c43      	adds	r3, r0, #1
 80044b4:	d123      	bne.n	80044fe <_malloc_r+0x92>
 80044b6:	230c      	movs	r3, #12
 80044b8:	4630      	mov	r0, r6
 80044ba:	6033      	str	r3, [r6, #0]
 80044bc:	f000 f86c 	bl	8004598 <__malloc_unlock>
 80044c0:	e7e3      	b.n	800448a <_malloc_r+0x1e>
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	1b5b      	subs	r3, r3, r5
 80044c6:	d417      	bmi.n	80044f8 <_malloc_r+0x8c>
 80044c8:	2b0b      	cmp	r3, #11
 80044ca:	d903      	bls.n	80044d4 <_malloc_r+0x68>
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	441c      	add	r4, r3
 80044d0:	6025      	str	r5, [r4, #0]
 80044d2:	e004      	b.n	80044de <_malloc_r+0x72>
 80044d4:	6863      	ldr	r3, [r4, #4]
 80044d6:	42a2      	cmp	r2, r4
 80044d8:	bf0c      	ite	eq
 80044da:	600b      	streq	r3, [r1, #0]
 80044dc:	6053      	strne	r3, [r2, #4]
 80044de:	4630      	mov	r0, r6
 80044e0:	f000 f85a 	bl	8004598 <__malloc_unlock>
 80044e4:	f104 000b 	add.w	r0, r4, #11
 80044e8:	1d23      	adds	r3, r4, #4
 80044ea:	f020 0007 	bic.w	r0, r0, #7
 80044ee:	1ac2      	subs	r2, r0, r3
 80044f0:	d0cc      	beq.n	800448c <_malloc_r+0x20>
 80044f2:	1a1b      	subs	r3, r3, r0
 80044f4:	50a3      	str	r3, [r4, r2]
 80044f6:	e7c9      	b.n	800448c <_malloc_r+0x20>
 80044f8:	4622      	mov	r2, r4
 80044fa:	6864      	ldr	r4, [r4, #4]
 80044fc:	e7cc      	b.n	8004498 <_malloc_r+0x2c>
 80044fe:	1cc4      	adds	r4, r0, #3
 8004500:	f024 0403 	bic.w	r4, r4, #3
 8004504:	42a0      	cmp	r0, r4
 8004506:	d0e3      	beq.n	80044d0 <_malloc_r+0x64>
 8004508:	1a21      	subs	r1, r4, r0
 800450a:	4630      	mov	r0, r6
 800450c:	f000 f82e 	bl	800456c <_sbrk_r>
 8004510:	3001      	adds	r0, #1
 8004512:	d1dd      	bne.n	80044d0 <_malloc_r+0x64>
 8004514:	e7cf      	b.n	80044b6 <_malloc_r+0x4a>
 8004516:	bf00      	nop
 8004518:	20000140 	.word	0x20000140
 800451c:	20000144 	.word	0x20000144

08004520 <_realloc_r>:
 8004520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004522:	4607      	mov	r7, r0
 8004524:	4614      	mov	r4, r2
 8004526:	460e      	mov	r6, r1
 8004528:	b921      	cbnz	r1, 8004534 <_realloc_r+0x14>
 800452a:	4611      	mov	r1, r2
 800452c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004530:	f7ff bf9c 	b.w	800446c <_malloc_r>
 8004534:	b922      	cbnz	r2, 8004540 <_realloc_r+0x20>
 8004536:	f7ff ff4d 	bl	80043d4 <_free_r>
 800453a:	4625      	mov	r5, r4
 800453c:	4628      	mov	r0, r5
 800453e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004540:	f000 f830 	bl	80045a4 <_malloc_usable_size_r>
 8004544:	42a0      	cmp	r0, r4
 8004546:	d20f      	bcs.n	8004568 <_realloc_r+0x48>
 8004548:	4621      	mov	r1, r4
 800454a:	4638      	mov	r0, r7
 800454c:	f7ff ff8e 	bl	800446c <_malloc_r>
 8004550:	4605      	mov	r5, r0
 8004552:	2800      	cmp	r0, #0
 8004554:	d0f2      	beq.n	800453c <_realloc_r+0x1c>
 8004556:	4631      	mov	r1, r6
 8004558:	4622      	mov	r2, r4
 800455a:	f7ff ff13 	bl	8004384 <memcpy>
 800455e:	4631      	mov	r1, r6
 8004560:	4638      	mov	r0, r7
 8004562:	f7ff ff37 	bl	80043d4 <_free_r>
 8004566:	e7e9      	b.n	800453c <_realloc_r+0x1c>
 8004568:	4635      	mov	r5, r6
 800456a:	e7e7      	b.n	800453c <_realloc_r+0x1c>

0800456c <_sbrk_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	2300      	movs	r3, #0
 8004570:	4d05      	ldr	r5, [pc, #20]	; (8004588 <_sbrk_r+0x1c>)
 8004572:	4604      	mov	r4, r0
 8004574:	4608      	mov	r0, r1
 8004576:	602b      	str	r3, [r5, #0]
 8004578:	f7fc ff30 	bl	80013dc <_sbrk>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d102      	bne.n	8004586 <_sbrk_r+0x1a>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	b103      	cbz	r3, 8004586 <_sbrk_r+0x1a>
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	bd38      	pop	{r3, r4, r5, pc}
 8004588:	20000540 	.word	0x20000540

0800458c <__malloc_lock>:
 800458c:	4801      	ldr	r0, [pc, #4]	; (8004594 <__malloc_lock+0x8>)
 800458e:	f000 b811 	b.w	80045b4 <__retarget_lock_acquire_recursive>
 8004592:	bf00      	nop
 8004594:	20000548 	.word	0x20000548

08004598 <__malloc_unlock>:
 8004598:	4801      	ldr	r0, [pc, #4]	; (80045a0 <__malloc_unlock+0x8>)
 800459a:	f000 b80c 	b.w	80045b6 <__retarget_lock_release_recursive>
 800459e:	bf00      	nop
 80045a0:	20000548 	.word	0x20000548

080045a4 <_malloc_usable_size_r>:
 80045a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045a8:	1f18      	subs	r0, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	bfbc      	itt	lt
 80045ae:	580b      	ldrlt	r3, [r1, r0]
 80045b0:	18c0      	addlt	r0, r0, r3
 80045b2:	4770      	bx	lr

080045b4 <__retarget_lock_acquire_recursive>:
 80045b4:	4770      	bx	lr

080045b6 <__retarget_lock_release_recursive>:
 80045b6:	4770      	bx	lr

080045b8 <_init>:
 80045b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ba:	bf00      	nop
 80045bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045be:	bc08      	pop	{r3}
 80045c0:	469e      	mov	lr, r3
 80045c2:	4770      	bx	lr

080045c4 <_fini>:
 80045c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c6:	bf00      	nop
 80045c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ca:	bc08      	pop	{r3}
 80045cc:	469e      	mov	lr, r3
 80045ce:	4770      	bx	lr
